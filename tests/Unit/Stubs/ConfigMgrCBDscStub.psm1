<#
    .SYNOPSIS
        Cmdlet stubs for the module ConfigurationManager.

    .DESCRIPTION
        This module contains the stubs for the cmdlets in the module ConfigurationManager version 5.1902.1085.1700.

    .NOTES
        The stubs in this module were generated from the Write-ModuleStubFile function which is distributed as part of the SqlServerDsc module.
#>

# Suppressing this rule because these functions are from an external module and are only being used as stubs
[System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUserNameAndPassWordParams', '')]
param()

function Add-CMAndroidDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentTypeName},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Parameter(Mandatory=$true)]
        [Alias('InstallationFileLocation')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ContentLocation},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Add-CMApkDeploymentType -Value Add-CMAndroidDeploymentType

function Add-CMApplicationCatalogWebServicePoint
{
    [CmdletBinding(DefaultParameterSetName='WebServicePointByValue', ConfirmImpact='Medium')]
    param
    (
        [Alias('IISWebSite')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${WebsiteName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${WebApplicationName},

        [int]
        ${PortNumber},

        [Parameter(ParameterSetName='WebServicePointByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='WebServicePointByName')]
        [string]
        ${SiteCode},

        [System.Object]
        ${CommunicationType},

        [Parameter(ParameterSetName='WebServicePointByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SiteServer')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMApplicationCatalogWebsitePoint
{
    [CmdletBinding(DefaultParameterSetName='AppWebSitePointByValue', ConfirmImpact='Medium')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 64)]
        [string]
        ${IisWebsite},

        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 64)]
        [string]
        ${WebApplicationName},

        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 15)]
        [string]
        ${NetBiosName},

        [ValidateLength(0, 40)]
        [string]
        ${OrganizationName},

        [Parameter(ParameterSetName='AppWebSite', Mandatory=$true, Position=0)]
        [Parameter(ParameterSetName='AppWebSitePoint', Mandatory=$true, Position=0)]
        [Parameter(ParameterSetName='AppWebSitePointWithSsl', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='AppWebSite')]
        [Parameter(ParameterSetName='AppWebSitePoint')]
        [Parameter(ParameterSetName='AppWebSitePointWithSsl')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Alias('SiteSystemServerNameConfiguredForApplicationCatalogWebServicePoint')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ApplicationWebServicePointServerName},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${ApplicationWebServicePointServer},

        [Parameter(ParameterSetName='AppWebSite', Mandatory=$true)]
        [Parameter(ParameterSetName='AppWebSiteByValue', Mandatory=$true)]
        [Alias('ClientCommunicationType')]
        [System.Object]
        ${CommunicationType},

        [Parameter(ParameterSetName='AppWebSitePoint', Mandatory=$true)]
        [Parameter(ParameterSetName='AppWebSitePointByValue', Mandatory=$true)]
        [Alias('ConfiguredAsHttpConnection')]
        [switch]
        ${Http},

        [Parameter(ParameterSetName='AppWebSitePointWithSsl', Mandatory=$true)]
        [Parameter(ParameterSetName='AppWebSitePointWithSslByValue', Mandatory=$true)]
        [Alias('ConfiguredAsHttpsConnection')]
        [switch]
        ${Https},

        [Alias('PortForHttpConnection','PortForHttpsConnection')]
        [ValidateRange(1, 65535)]
        [int]
        ${Port},

        [ValidateRange(0, 255)]
        [int]
        ${ColorRed},

        [ValidateRange(0, 255)]
        [int]
        ${ColorGreen},

        [ValidateRange(0, 255)]
        [int]
        ${ColorBlue},

        [ValidateNotNullOrEmpty()]
        [System.Drawing.Color]
        ${Color},

        [System.Object]
        ${ClientConnectionType},

        [Parameter(ParameterSetName='AppWebSiteByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AppWebSitePointByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AppWebSitePointWithSslByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SiteServer')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMAppv5XDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [Alias('EnableContentLocationFallback','AllowClientsToUseFallbackSourceLocationForContent')]
        [switch]
        ${ContentFallback},

        [ValidateSet('DownloadContentForStreaming','Download')]
        [System.Object]
        ${FastNetworkDeploymentMode},

        [System.Object]
        ${SlowNetworkDeploymentMode},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentTypeName},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Parameter(Mandatory=$true)]
        [Alias('InstallationFileLocation')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ContentLocation},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMAppvDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [Alias('EnableContentLocationFallback','AllowClientsToUseFallbackSourceLocationForContent')]
        [switch]
        ${ContentFallback},

        [ValidateSet('DownloadContentForStreaming','Download')]
        [System.Object]
        ${FastNetworkDeploymentMode},

        [System.Object]
        ${SlowNetworkDeploymentMode},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentTypeName},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Parameter(Mandatory=$true)]
        [Alias('InstallationFileLocation')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ContentLocation},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMAssetIntelligenceSynchronizationPoint
{
    [CmdletBinding(DefaultParameterSetName='AISyncPointByValue', ConfirmImpact='Medium')]
    param
    (
        [string]
        ${CertificateFile},

        [Parameter(ParameterSetName='AISyncPointByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SiteServer')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${InputObject},

        [Alias('ScheduleToken')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [Parameter(ParameterSetName='AISyncPoint', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMBoundaryToGroup
{
    [CmdletBinding(DefaultParameterSetName='AddBoundaryToGroupByObject_Object', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='AddBoundaryToGroupById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddBoundaryToGroupById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddBoundaryToGroupById_Object', Mandatory=$true)]
        [int]
        ${BoundaryId},

        [Parameter(ParameterSetName='AddBoundaryToGroupByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddBoundaryToGroupByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddBoundaryToGroupByName_Object', Mandatory=$true)]
        [AllowEmptyString()]
        [string]
        ${BoundaryName},

        [Parameter(ParameterSetName='AddBoundaryToGroupByObject_Id', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddBoundaryToGroupByObject_Name', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddBoundaryToGroupByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Boundary','BoundaryInputObject')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Boundary')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='AddBoundaryToGroupById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddBoundaryToGroupByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddBoundaryToGroupByObject_Id', Mandatory=$true)]
        [int]
        ${BoundaryGroupId},

        [Parameter(ParameterSetName='AddBoundaryToGroupById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddBoundaryToGroupByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddBoundaryToGroupByObject_Name', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${BoundaryGroupName},

        [Parameter(ParameterSetName='AddBoundaryToGroupById_Object', Mandatory=$true)]
        [Parameter(ParameterSetName='AddBoundaryToGroupByName_Object', Mandatory=$true)]
        [Parameter(ParameterSetName='AddBoundaryToGroupByObject_Object', Mandatory=$true)]
        [Alias('BoundaryGroup')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_BoundaryGroup')]
        [System.Object]
        ${BoundaryGroupInputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMCertificateRegistrationPoint
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('Certificates')]
        [hashtable]
        ${Certificate},

        [Alias('UserName')]
        [string]
        ${ConnectionAccountUserName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SiteServer')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 64)]
        [string]
        ${IisWebsite},

        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 64)]
        [string]
        ${WebApplicationName},

        [ValidateRange(1, 65535)]
        [int]
        ${Port},

        [Parameter(ParameterSetName='ByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMCloudManagementGatewayConnectionPoint
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${CloudManagementGatewayName},

        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='ByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='ByValue', ValueFromPipeline=$true)]
        [Alias('SiteServer')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMCollectionMembershipRule
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('User','Device')]
        [System.Object]
        ${CollectionType},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Collection')]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [string]
        ${RulePropertyName},

        [Parameter(Mandatory=$true)]
        [string]
        ${RuleClassName},

        [Parameter(Mandatory=$true)]
        [Alias('SearchCriteria')]
        [System.Object]
        ${ChildSearchCriteria},

        [switch]
        ${PassThru},

        [Parameter(ValueFromRemainingArguments=$true)]
        [System.Object]
        ${ExtraArguments},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMCollectionToAdministrativeUser
{
    [CmdletBinding(DefaultParameterSetName='AddCollectionToAdminByObject_Object', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='AddCollectionToAdminById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddCollectionToAdminById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddCollectionToAdminById_Object', Mandatory=$true)]
        [Alias('UserCollectionId','DeviceCollectionId')]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='AddCollectionToAdminByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddCollectionToAdminByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddCollectionToAdminByName_Object', Mandatory=$true)]
        [Alias('UserCollectionName','DeviceCollectionName')]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='AddCollectionToAdminByObject_Id', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddCollectionToAdminByObject_Name', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddCollectionToAdminByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Collection','UserCollection','DeviceCollection')]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='AddCollectionToAdminById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddCollectionToAdminByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddCollectionToAdminByObject_Id', Mandatory=$true)]
        [Alias('AdministrativeUserId')]
        [int]
        ${UserId},

        [Parameter(ParameterSetName='AddCollectionToAdminById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddCollectionToAdminByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddCollectionToAdminByObject_Name', Mandatory=$true)]
        [Alias('AdministrativeUserName')]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='AddCollectionToAdminById_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddCollectionToAdminByName_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddCollectionToAdminByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('AdministrativeUser')]
        [PSTypeName('IResultObject#SMS_Admin')]
        [System.Object]
        ${User},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Add-CMDeviceCollectionToAdministrativeUser Add-CMUserCollectionToAdministrativeUser -Value Add-CMCollectionToAdministrativeUser Add-CMCollectionToAdministrativeUser

function Add-CMCollectionToDistributionPointGroup
{
    [CmdletBinding(DefaultParameterSetName='AddById_Object', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='AddById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddById_Object', Mandatory=$true)]
        [Alias('DeviceCollectionId','UserCollectionId')]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='AddByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddByName_Object', Mandatory=$true)]
        [Alias('DeviceCollectionName','UserCollectionName')]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='AddByObject_Id', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddByObject_Name', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeviceCollection','UserCollection')]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${Collection},

        [Parameter(ParameterSetName='AddById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddByObject_Id', Mandatory=$true)]
        [string]
        ${DistributionPointGroupId},

        [Parameter(ParameterSetName='AddById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddByObject_Name', Mandatory=$true)]
        [string]
        ${DistributionPointGroupName},

        [Parameter(ParameterSetName='AddById_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddByName_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_DistributionPointGroup')]
        [System.Object]
        ${DistributionPointGroup},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Add-CMDeviceCollectionToDistributionPointGroup Add-CMUserCollectionToDistributionPointGroup -Value Add-CMCollectionToDistributionPointGroup Add-CMCollectionToDistributionPointGroup

function Add-CMComplianceSettingActiveDirectoryQuery
{
    [CmdletBinding(DefaultParameterSetName='EmptyRule', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('DN')]
        [string]
        ${DistinguishedName},

        [string]
        ${LdapPrefix},

        [Parameter(Mandatory=$true)]
        [Alias('ADProperty')]
        [string]
        ${Property},

        [Parameter(Mandatory=$true)]
        [Alias('LdapFilter')]
        [string]
        ${SearchFilter},

        [System.Object]
        ${SearchScope},

        [Parameter(Mandatory=$true)]
        [ValidateSet('String','DateTime','Integer','FloatingPoint','Version','Boolean','StringArray','IntegerArray')]
        [System.Object]
        ${DataType},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [System.Object]
        ${Existence},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [switch]
        ${ExistentialRule},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [Alias('ExpectedValues','ExpectedCount','ExpectedCounts')]
        [AllowNull()]
        [string[]]
        ${ExpectedValue},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('SettingName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule')]
        [System.Object]
        ${NoncomplianceSeverity},

        [Parameter(ParameterSetName='EmptyRule')]
        [Alias('NoRules')]
        [switch]
        ${NoRule},

        [Parameter(ParameterSetName='ValueRule')]
        [switch]
        ${ReportNoncompliance},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule')]
        [string]
        ${RuleDescription},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [string]
        ${RuleName},

        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [switch]
        ${ValueRule},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMComplianceSettingAssembly
{
    [CmdletBinding(DefaultParameterSetName='EmptyRule', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateLength(1, 255)]
        [string]
        ${AssemblyName},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Alias('ExpectedValues','ExpectedCount','ExpectedCounts')]
        [string[]]
        ${ExpectedValue},

        [Parameter(ParameterSetName='ExistentialRule')]
        [ValidateSet('IsEquals','NotEquals','GreaterThan','GreaterEquals','LessThan','LessEquals','Between','OneOf','NoneOf')]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(ParameterSetName='ExistentialRule')]
        [System.Object]
        ${NoncomplianceSeverity},

        [Parameter(ParameterSetName='ExistentialRule')]
        [string]
        ${RuleDescription},

        [Parameter(ParameterSetName='ExistentialRule')]
        [string]
        ${RuleName},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [System.Object]
        ${Existence},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [switch]
        ${ExistentialRule},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('SettingName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='EmptyRule')]
        [Alias('NoRules')]
        [switch]
        ${NoRule},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMComplianceSettingDirectory
{
    [CmdletBinding(DefaultParameterSetName='EmptyRule', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${DirectoryName},

        [switch]
        ${IncludeSubfolders},

        [switch]
        ${Is64Bit},

        [Parameter(Mandatory=$true)]
        [string]
        ${Path},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Alias('ExpectedValues','ExpectedCount','ExpectedCounts')]
        [string[]]
        ${ExpectedValue},

        [Parameter(ParameterSetName='ExistentialRule')]
        [ValidateSet('IsEquals','NotEquals','GreaterThan','GreaterEquals','LessThan','LessEquals','Between','OneOf','NoneOf')]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(ParameterSetName='ExistentialRule')]
        [System.Object]
        ${NoncomplianceSeverity},

        [Parameter(ParameterSetName='ExistentialRule')]
        [string]
        ${RuleDescription},

        [Parameter(ParameterSetName='ExistentialRule')]
        [string]
        ${RuleName},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [System.Object]
        ${Existence},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [switch]
        ${ExistentialRule},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('SettingName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='EmptyRule')]
        [Alias('NoRules')]
        [switch]
        ${NoRule},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMComplianceSettingFile
{
    [CmdletBinding(DefaultParameterSetName='EmptyRule', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${FileName},

        [switch]
        ${IncludeSubfolders},

        [switch]
        ${Is64Bit},

        [Parameter(Mandatory=$true)]
        [string]
        ${Path},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Alias('ExpectedValues','ExpectedCount','ExpectedCounts')]
        [string[]]
        ${ExpectedValue},

        [Parameter(ParameterSetName='ExistentialRule')]
        [ValidateSet('IsEquals','NotEquals','GreaterThan','GreaterEquals','LessThan','LessEquals','Between','OneOf','NoneOf')]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(ParameterSetName='ExistentialRule')]
        [System.Object]
        ${NoncomplianceSeverity},

        [Parameter(ParameterSetName='ExistentialRule')]
        [string]
        ${RuleDescription},

        [Parameter(ParameterSetName='ExistentialRule')]
        [string]
        ${RuleName},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [System.Object]
        ${Existence},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [switch]
        ${ExistentialRule},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('SettingName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='EmptyRule')]
        [Alias('NoRules')]
        [switch]
        ${NoRule},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMComplianceSettingIisMetabase
{
    [CmdletBinding(DefaultParameterSetName='EmptyRule', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('String','DateTime','Integer','FloatingPoint','Version','Boolean','StringArray')]
        [System.Object]
        ${DataType},

        [Parameter(Mandatory=$true)]
        [Alias('MetabasePath')]
        [string]
        ${Path},

        [Parameter(Mandatory=$true)]
        [uint32]
        ${PropertyId},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [System.Object]
        ${Existence},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [switch]
        ${ExistentialRule},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [Alias('ExpectedValues','ExpectedCount','ExpectedCounts')]
        [AllowNull()]
        [string[]]
        ${ExpectedValue},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('SettingName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule')]
        [System.Object]
        ${NoncomplianceSeverity},

        [Parameter(ParameterSetName='EmptyRule')]
        [Alias('NoRules')]
        [switch]
        ${NoRule},

        [Parameter(ParameterSetName='ValueRule')]
        [switch]
        ${ReportNoncompliance},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule')]
        [string]
        ${RuleDescription},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [string]
        ${RuleName},

        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [switch]
        ${ValueRule},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMComplianceSettingRegistryKey
{
    [CmdletBinding(DefaultParameterSetName='EmptyRule', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ExistentialRule')]
        [ValidateSet('MustExist','MustNotExist')]
        [System.Object]
        ${Existence},

        [Parameter(Mandatory=$true)]
        [Alias('RegistryHive')]
        [System.Object]
        ${Hive},

        [switch]
        ${Is64Bit},

        [Parameter(Mandatory=$true)]
        [Alias('RegistryKey')]
        [ValidateLength(0, 260)]
        [string]
        ${KeyName},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Alias('ExpectedValues','ExpectedCount','ExpectedCounts')]
        [string[]]
        ${ExpectedValue},

        [Parameter(ParameterSetName='ExistentialRule')]
        [ValidateSet('IsEquals','NotEquals','GreaterThan','GreaterEquals','LessThan','LessEquals','Between','OneOf','NoneOf')]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(ParameterSetName='ExistentialRule')]
        [System.Object]
        ${NoncomplianceSeverity},

        [Parameter(ParameterSetName='ExistentialRule')]
        [string]
        ${RuleDescription},

        [Parameter(ParameterSetName='ExistentialRule')]
        [string]
        ${RuleName},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [switch]
        ${ExistentialRule},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('SettingName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='EmptyRule')]
        [Alias('NoRules')]
        [switch]
        ${NoRule},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMComplianceSettingRegistryKeyValue
{
    [CmdletBinding(DefaultParameterSetName='EmptyRule', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('String','Integer','DateTime','FloatingPoint','Version','StringArray')]
        [System.Object]
        ${DataType},

        [Parameter(ParameterSetName='ExistentialRule')]
        [ValidateSet('MustExist','MustNotExist')]
        [System.Object]
        ${Existence},

        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [string[]]
        ${ExpectedValue},

        [Parameter(ParameterSetName='ValueRule')]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(Mandatory=$true)]
        [Alias('RegistryHive')]
        [System.Object]
        ${Hive},

        [switch]
        ${Is64Bit},

        [Parameter(Mandatory=$true)]
        [Alias('RegistryKey')]
        [string]
        ${KeyName},

        [Parameter(ParameterSetName='ValueRule')]
        [switch]
        ${Remediate},

        [Alias('RegistryValueName')]
        [string]
        ${ValueName},

        [bool]
        ${RemediateDword},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [switch]
        ${ExistentialRule},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('SettingName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule')]
        [System.Object]
        ${NoncomplianceSeverity},

        [Parameter(ParameterSetName='EmptyRule')]
        [Alias('NoRules')]
        [switch]
        ${NoRule},

        [Parameter(ParameterSetName='ValueRule')]
        [switch]
        ${ReportNoncompliance},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule')]
        [string]
        ${RuleDescription},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [string]
        ${RuleName},

        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [switch]
        ${ValueRule},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMComplianceSettingRule
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ConfigurationItem')]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${Rule},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMComplianceSettingScript
{
    [CmdletBinding(DefaultParameterSetName='EmptyRule', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('String','DateTime','Integer','FloatingPoint','Version','Boolean')]
        [System.Object]
        ${DataType},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DiscoveryScriptFile},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${DiscoveryScriptLanguage},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DiscoveryScriptText},

        [switch]
        ${Is64Bit},

        [switch]
        ${IsPerUser},

        [ValidateNotNullOrEmpty()]
        [string]
        ${RemediationScriptFile},

        [System.Object]
        ${RemediationScriptLanguage},

        [ValidateNotNullOrEmpty()]
        [string]
        ${RemediationScriptText},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [System.Object]
        ${Existence},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [switch]
        ${ExistentialRule},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [Alias('ExpectedValues','ExpectedCount','ExpectedCounts')]
        [AllowNull()]
        [string[]]
        ${ExpectedValue},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('SettingName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule')]
        [System.Object]
        ${NoncomplianceSeverity},

        [Parameter(ParameterSetName='EmptyRule')]
        [Alias('NoRules')]
        [switch]
        ${NoRule},

        [Parameter(ParameterSetName='ValueRule')]
        [switch]
        ${ReportNoncompliance},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule')]
        [string]
        ${RuleDescription},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [string]
        ${RuleName},

        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [switch]
        ${ValueRule},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMComplianceSettingSqlQuery
{
    [CmdletBinding(DefaultParameterSetName='EmptyRule', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${ColumnName},

        [Parameter(Mandatory=$true)]
        [string]
        ${DatabaseName},

        [Parameter(Mandatory=$true)]
        [ValidateSet('String','DateTime','Integer','FloatingPoint','Version','Boolean')]
        [System.Object]
        ${DataType},

        [ValidateSet('All','Default','Named')]
        [System.Object]
        ${InstanceType},

        [ValidateNotNullOrEmpty()]
        [string]
        ${InstanceName},

        [string]
        ${SqlStatementFile},

        [string]
        ${SqlStatementText},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [System.Object]
        ${Existence},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [switch]
        ${ExistentialRule},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [Alias('ExpectedValues','ExpectedCount','ExpectedCounts')]
        [AllowNull()]
        [string[]]
        ${ExpectedValue},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('SettingName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule')]
        [System.Object]
        ${NoncomplianceSeverity},

        [Parameter(ParameterSetName='EmptyRule')]
        [Alias('NoRules')]
        [switch]
        ${NoRule},

        [Parameter(ParameterSetName='ValueRule')]
        [switch]
        ${ReportNoncompliance},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule')]
        [string]
        ${RuleDescription},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [string]
        ${RuleName},

        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [switch]
        ${ValueRule},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMComplianceSettingWqlQuery
{
    [CmdletBinding(DefaultParameterSetName='EmptyRule', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${ClassName},

        [Parameter(Mandatory=$true)]
        [string]
        ${Namespace},

        [Parameter(Mandatory=$true)]
        [string]
        ${Property},

        [ValidateLength(0, 32767)]
        [string]
        ${WhereClause},

        [Parameter(ParameterSetName='ValueRule')]
        [switch]
        ${Remediate},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${DataType},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [System.Object]
        ${Existence},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [switch]
        ${ExistentialRule},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [Alias('ExpectedValues','ExpectedCount','ExpectedCounts')]
        [AllowNull()]
        [string[]]
        ${ExpectedValue},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('SettingName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule')]
        [System.Object]
        ${NoncomplianceSeverity},

        [Parameter(ParameterSetName='EmptyRule')]
        [Alias('NoRules')]
        [switch]
        ${NoRule},

        [Parameter(ParameterSetName='ValueRule')]
        [switch]
        ${ReportNoncompliance},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule')]
        [string]
        ${RuleDescription},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [string]
        ${RuleName},

        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [switch]
        ${ValueRule},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMComplianceSettingXPathQuery
{
    [CmdletBinding(DefaultParameterSetName='EmptyRule', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('String','DateTime','Integer','FloatingPoint','Boolean','Version')]
        [System.Object]
        ${DataType},

        [switch]
        ${IncludeSubfolders},

        [switch]
        ${Is64Bit},

        [Parameter(Mandatory=$true)]
        [string]
        ${Path},

        [Parameter(Mandatory=$true)]
        [string]
        ${XmlFileName},

        [Alias('XmlNamespaces')]
        [ValidateNotNullOrEmpty()]
        [hashtable]
        ${XmlNamespace},

        [ValidateNotNullOrEmpty()]
        [string]
        ${XPathQueryFile},

        [ValidateNotNullOrEmpty()]
        [string]
        ${XPathQueryText},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [System.Object]
        ${Existence},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [switch]
        ${ExistentialRule},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [Alias('ExpectedValues','ExpectedCount','ExpectedCounts')]
        [AllowNull()]
        [string[]]
        ${ExpectedValue},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('SettingName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule')]
        [System.Object]
        ${NoncomplianceSeverity},

        [Parameter(ParameterSetName='EmptyRule')]
        [Alias('NoRules')]
        [switch]
        ${NoRule},

        [Parameter(ParameterSetName='ValueRule')]
        [switch]
        ${ReportNoncompliance},

        [Parameter(ParameterSetName='ExistentialRule')]
        [Parameter(ParameterSetName='ValueRule')]
        [string]
        ${RuleDescription},

        [Parameter(ParameterSetName='ExistentialRule', Mandatory=$true)]
        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [string]
        ${RuleName},

        [Parameter(ParameterSetName='ValueRule', Mandatory=$true)]
        [switch]
        ${ValueRule},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMDataWarehouseServicePoint
{
    [CmdletBinding(DefaultParameterSetName='DataWarehouseServicePointByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='DataWarehouseServicePoint', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='DataWarehouseServicePoint')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='DataWarehouseServicePoint')]
        [Parameter(ParameterSetName='DataWarehouseServicePointByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DataWarehouseDatabaseServerName},

        [Parameter(ParameterSetName='DataWarehouseServicePoint')]
        [Parameter(ParameterSetName='DataWarehouseServicePointByValue')]
        [string]
        ${DataWarehouseInstanceName},

        [Parameter(ParameterSetName='DataWarehouseServicePoint')]
        [Parameter(ParameterSetName='DataWarehouseServicePointByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DataWarehouseDatabaseName},

        [Parameter(ParameterSetName='DataWarehouseServicePoint')]
        [Parameter(ParameterSetName='DataWarehouseServicePointByValue')]
        [ValidateRange(1, 65535)]
        [int]
        ${DataWarehouseSqlPort},

        [Parameter(ParameterSetName='DataWarehouseServicePoint')]
        [Parameter(ParameterSetName='DataWarehouseServicePointByValue')]
        [ValidateNotNullOrEmpty()]
        [datetime]
        ${StartAftertime},

        [Parameter(ParameterSetName='DataWarehouseServicePoint')]
        [Parameter(ParameterSetName='DataWarehouseServicePointByValue')]
        [ValidateRange(1, 4)]
        [int]
        ${WeekFrequency},

        [Parameter(ParameterSetName='DataWarehouseServicePoint')]
        [Parameter(ParameterSetName='DataWarehouseServicePointByValue')]
        [ValidateRange(1, 127)]
        [System.Object]
        ${DaysOfWeek},

        [Parameter(ParameterSetName='DataWarehouseServicePoint', Mandatory=$true)]
        [Parameter(ParameterSetName='DataWarehouseServicePointByValue', Mandatory=$true)]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='DataWarehouseServicePoint')]
        [Parameter(ParameterSetName='DataWarehouseServicePointByValue')]
        [ValidateRange(60, 2186)]
        [int]
        ${DataRetentionDays},

        [Parameter(ParameterSetName='DataWarehouseServicePointByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SiteServer')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='AddDeploymentTypeByMsiInstallerAuto', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='AddDeploymentTypeByAndroidInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByAppV5xInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByAppvInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByIosAppStoreInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByIosInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByMacInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByMsiInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWebAppInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWindows8AppInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWindowsStoreInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWinPhone8InstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWinPhoneStoreInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWMInstaller')]
        [Parameter(ParameterSetName='AddDeploymentTypeByMobileMsiInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByMobileMsiInstallerManual')]
        [System.Object[]]
        ${AddRequirement},

        [string]
        ${AdministratorComment},

        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual')]
        [Alias('AllowClientsToShareContentOnSameSubnet')]
        [bool]
        ${EnableBranchCache},

        [Parameter(ParameterSetName='AddDeploymentTypeByAppV5xInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByAppvInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByMsiInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWindows8AppInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual')]
        [Alias('AllowClientsToUseFallbackSourceLocationForContent')]
        [bool]
        ${EnableContentLocationFallback},

        [Parameter(ParameterSetName='AddDeploymentTypeByWMInstaller')]
        [Alias('AllowUserToUninstall','AllowsUsersToUninstallThisContent')]
        [bool]
        ${EnableUserUninstall},

        [Parameter(ParameterSetName='AddDeploymentTypeByAndroidGooglePlayInstallerAuto', Mandatory=$true)]
        [Alias('AndroidDeepLinkInstaller')]
        [switch]
        ${AndroidGooglePlayInstaller},

        [Parameter(ParameterSetName='AddDeploymentTypeByAndroidInstallerAuto', Mandatory=$true)]
        [switch]
        ${AndroidInstaller},

        [Parameter(ParameterSetName='AddDeploymentTypeByAppV5xInstallerAuto', Mandatory=$true)]
        [switch]
        ${AppV5xInstaller},

        [Parameter(ValueFromPipeline=$true)]
        [Alias('Application')]
        [ValidateNotNull()]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='AddDeploymentTypeByWindowsStoreInstallerAuto', Mandatory=$true)]
        [string]
        ${ApplicationNameInWindowsStore},

        [Parameter(ParameterSetName='AddDeploymentTypeByAppvInstallerAuto', Mandatory=$true)]
        [switch]
        ${AppvInstaller},

        [Parameter(ParameterSetName='AddDeploymentTypeByAndroidGooglePlayInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByAndroidInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByAppV5xInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByAppvInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByIosAppStoreInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByIosInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByMacInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByMsiInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWebAppInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWindows8AppInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWindowsStoreInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWinPhone8InstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWinPhoneStoreInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWMInstaller')]
        [Parameter(ParameterSetName='AddDeploymentTypeByMobileMsiInstallerAuto')]
        [switch]
        ${AutoIdentifyFromInstallationFile},

        [Parameter(ParameterSetName='AddDeploymentTypeByAndroidGooglePlayInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByAndroidInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByAppV5xInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByAppvInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByIosAppStoreInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByIosInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByMacInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByMsiInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDeploymentTypeByWebAppInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWindows8AppInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWindowsStoreInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWinPhone8InstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWinPhoneStoreInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWMInstaller')]
        [Parameter(ParameterSetName='AddDeploymentTypeByMobileMsiInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByMobileMsiInstallerManual', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentTypeName},

        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual')]
        [switch]
        ${DetectDeploymentTypeByCustomScript},

        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual')]
        [Alias('EstimatedInstallationTimeMinutes')]
        [ValidateRange(0, 32767)]
        [int]
        ${EstimatedInstallationTimeMins},

        [Parameter(ParameterSetName='AddDeploymentTypeByAndroidGooglePlayInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByAndroidInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByAppV5xInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByAppvInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByIosAppStoreInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByIosInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByMacInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByMsiInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWindows8AppInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWindowsStoreInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWinPhone8InstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWinPhoneStoreInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWMInstaller')]
        [Parameter(ParameterSetName='AddDeploymentTypeByMobileMsiInstallerAuto')]
        [bool]
        ${ForceForUnknownPublisher},

        [Parameter(ParameterSetName='AddDeploymentTypeByMsiInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual')]
        [System.Object]
        ${InstallationBehaviorType},

        [Parameter(ParameterSetName='AddDeploymentTypeByAndroidGooglePlayInstallerAuto', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDeploymentTypeByAndroidInstallerAuto', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDeploymentTypeByAppV5xInstallerAuto', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDeploymentTypeByAppvInstallerAuto', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDeploymentTypeByIosAppStoreInstallerAuto', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDeploymentTypeByIosInstallerAuto', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDeploymentTypeByMacInstallerAuto', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDeploymentTypeByMobileMsiInstallerAuto', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDeploymentTypeByMobileMsiInstallerManual')]
        [Parameter(ParameterSetName='AddDeploymentTypeByMsiInstallerAuto', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWebAppInstallerAuto', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDeploymentTypeByWindows8AppInstallerAuto', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDeploymentTypeByWinPhone8InstallerAuto', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDeploymentTypeByWinPhoneStoreInstallerAuto', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDeploymentTypeByWMInstaller', Mandatory=$true)]
        [Alias('InstallationFileLocation','WebAppUrl')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ContentLocation},

        [Parameter(ParameterSetName='AddDeploymentTypeByMobileMsiInstallerAuto')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 512)]
        [string]
        ${InstallationCommandLine},

        [Parameter(ParameterSetName='AddDeploymentTypeByMsiInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 1024)]
        [string]
        ${InstallationProgram},

        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual')]
        [System.Object]
        ${InstallationProgramVisibility},

        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(0, 512)]
        [string]
        ${InstallationStartIn},

        [Parameter(ParameterSetName='AddDeploymentTypeByIosAppStoreInstallerAuto', Mandatory=$true)]
        [Alias('IosDeepLinkInstaller')]
        [switch]
        ${IosAppStoreInstaller},

        [Parameter(ParameterSetName='AddDeploymentTypeByIosInstallerAuto', Mandatory=$true)]
        [switch]
        ${IosInstaller},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Language},

        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual')]
        [System.Object]
        ${LogonRequirementType},

        [Parameter(ParameterSetName='AddDeploymentTypeByMacInstallerAuto', Mandatory=$true)]
        [switch]
        ${MacInstaller},

        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWMInstaller')]
        [Parameter(ParameterSetName='AddDeploymentTypeByMobileMsiInstallerManual')]
        [switch]
        ${ManualSpecifyDeploymentType},

        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual')]
        [Alias('MaximumAllowedRunTimeMinutes')]
        [ValidateRange(15, 720)]
        [int]
        ${MaximumAllowedRunTimeMins},

        [Parameter(ParameterSetName='AddDeploymentTypeByMobileMsiInstallerAuto', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDeploymentTypeByMobileMsiInstallerManual', Mandatory=$true)]
        [switch]
        ${MobileMsiInstaller},

        [Parameter(ParameterSetName='AddDeploymentTypeByMsiInstallerAuto', Mandatory=$true)]
        [switch]
        ${MsiInstaller},

        [Parameter(ParameterSetName='AddDeploymentTypeByAppV5xInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByAppvInstallerAuto')]
        [System.Object]
        ${OnFastNetworkMode},

        [Parameter(ParameterSetName='AddDeploymentTypeByAppvInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByMsiInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByAppV5xInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByWindows8AppInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual')]
        [System.Object]
        ${OnSlowNetworkMode},

        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual')]
        [bool]
        ${PersistContentInClientCache},

        [Parameter(ParameterSetName='AddDeploymentTypeByWMInstaller')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${PfxFileLocation},

        [Parameter(ParameterSetName='AddDeploymentTypeByWMInstaller')]
        [ValidateNotNullOrEmpty()]
        [securestring]
        ${PfxFilePassword},

        [Parameter(ParameterSetName='AddDeploymentTypeByWindowsStoreInstallerAuto', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RemoteComputerName},

        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual')]
        [Alias('RequiresUserInteraction')]
        [bool]
        ${RequireUserInteraction},

        [Parameter(ParameterSetName='AddDeploymentTypeByMsiInstallerAuto')]
        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual')]
        [Alias('RunInstallationProgramAs32BitProcessOn64BitClient')]
        [bool]
        ${Force32BitInstaller},

        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual')]
        [Alias('RunScriptAs32BitProcessOn64BitClient')]
        [bool]
        ${Force32BitDetectionScript},

        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ScriptContent},

        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual', Mandatory=$true)]
        [switch]
        ${ScriptInstaller},

        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual', Mandatory=$true)]
        [Microsoft.ConfigurationManagement.AdminConsole.CreateDT.CreateDtConstantsUtilities+ScriptLanguage]
        ${ScriptType},

        [Parameter(ParameterSetName='AddDeploymentTypeByWMInstaller')]
        [bool]
        ${SignContentFile},

        [Parameter(ParameterSetName='AddDeploymentTypeByWMInstaller')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SignedContentFileLocation},

        [Parameter(ParameterSetName='AddDeploymentTypeByWindows8AppInstallerAuto')]
        [bool]
        ${TriggerVpn},

        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 1024)]
        [string]
        ${UninstallProgram},

        [Parameter(ParameterSetName='AddDeploymentTypeByScriptInstallerManual')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(0, 512)]
        [string]
        ${UninstallStartIn},

        [Parameter(ParameterSetName='AddDeploymentTypeByWMInstaller', Mandatory=$true)]
        [switch]
        ${WMInstaller},

        [Parameter(ParameterSetName='AddDeploymentTypeByWebAppInstallerAuto', Mandatory=$true)]
        [switch]
        ${WebAppInstaller},

        [Parameter(ParameterSetName='AddDeploymentTypeByWindows8AppInstallerAuto', Mandatory=$true)]
        [switch]
        ${Windows8AppInstaller},

        [Parameter(ParameterSetName='AddDeploymentTypeByWinPhone8InstallerAuto', Mandatory=$true)]
        [Alias('WinPhone8Installer')]
        [switch]
        ${WindowsPhone8Installer},

        [Parameter(ParameterSetName='AddDeploymentTypeByWinPhoneStoreInstallerAuto', Mandatory=$true)]
        [Alias('WinPhone8DeeplinkInstaller','WindowsPhone8StoreInstaller')]
        [switch]
        ${WindowsPhoneStoreInstaller},

        [Parameter(ParameterSetName='AddDeploymentTypeByWindowsStoreInstallerAuto', Mandatory=$true)]
        [Alias('DeeplinkInstaller')]
        [switch]
        ${WindowsStoreInstaller},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMDeploymentTypeDependency
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [bool]
        ${IsAutoInstall},

        [Parameter(Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_DeploymentType')]
        [System.Object[]]
        ${DeploymentTypeDependency},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Group')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMDeploymentTypeSupersedence
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true, Position=0)]
        [PSTypeName('IResultObject#SMS_DeploymentType')]
        [System.Object]
        ${SupersedingDeploymentType},

        [Parameter(Mandatory=$true, Position=1)]
        [PSTypeName('IResultObject#SMS_DeploymentType')]
        [System.Object]
        ${SupersededDeploymentType},

        [bool]
        ${IsUninstall},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMDeviceAffinityToUser
{
    [CmdletBinding(DefaultParameterSetName='AddDeviceAffinityByUserName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='AddDeviceAffinityByUserName', Mandatory=$true)]
        [Alias('UniqueUserName')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${UserName},

        [Parameter(ParameterSetName='AddDeviceAffinityByUserId', Mandatory=$true)]
        [int]
        ${UserId},

        [Parameter(ParameterSetName='AddDeviceAffinityByUserId')]
        [Parameter(ParameterSetName='AddDeviceAffinityByUserName')]
        [Alias('DeviceIds')]
        [int[]]
        ${DeviceId},

        [Parameter(ParameterSetName='AddDeviceAffinityByUserId')]
        [Parameter(ParameterSetName='AddDeviceAffinityByUserName')]
        [Alias('DeviceNames')]
        [string[]]
        ${DeviceName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMDeviceCollectionDirectMembershipRule
{
    [CmdletBinding(DefaultParameterSetName='ByCollectionIdAndResourceId', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByCollectionIdAndResourceId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByCollectionIdAndResourceValue', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='ByCollectionNameAndResourceId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByCollectionNameAndResourceValue', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='ByCollectionValueAndResourceId', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByCollectionValueAndResourceValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Collection')]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByCollectionIdAndResourceId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByCollectionNameAndResourceId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByCollectionValueAndResourceId', Mandatory=$true)]
        [Alias('ResourceIds')]
        [int[]]
        ${ResourceId},

        [Parameter(ParameterSetName='ByCollectionIdAndResourceValue', Mandatory=$true)]
        [Parameter(ParameterSetName='ByCollectionNameAndResourceValue', Mandatory=$true)]
        [Parameter(ParameterSetName='ByCollectionValueAndResourceValue', Mandatory=$true)]
        [Alias('Resources')]
        [System.Object[]]
        ${Resource},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMDeviceCollectionQueryMembershipRule
{
    [CmdletBinding(DefaultParameterSetName='ByCollectionId', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByCollectionId', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='ByCollectionName', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='ByCollectionValue', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${Collection},

        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RuleName},

        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${QueryExpression},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMDistributionPoint
{
    [CmdletBinding(DefaultParameterSetName='DistributionPointWithSelfCertByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='DistributionPointWithSelfCertByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='DistributionPointwithUserSpecifiedCertByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SiteServer')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='DistributionPointWithSelfCert', Mandatory=$true, Position=0)]
        [Parameter(ParameterSetName='DistributionPointwithUserSpecifiedCert', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='DistributionPointWithSelfCert')]
        [Parameter(ParameterSetName='DistributionPointwithUserSpecifiedCert')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${InstallInternetServer},

        [System.Object]
        ${ClientConnectionType},

        [Alias('EnableCloudGateway')]
        [switch]
        ${AllowProxyTraffic},

        [string]
        ${Description},

        [switch]
        ${EnableAnonymous},

        [Parameter(ParameterSetName='DistributionPointWithSelfCert', Mandatory=$true)]
        [Parameter(ParameterSetName='DistributionPointWithSelfCertByValue', Mandatory=$true)]
        [datetime]
        ${CertificateExpirationTimeUtc},

        [Parameter(ParameterSetName='DistributionPointwithUserSpecifiedCert', Mandatory=$true)]
        [Parameter(ParameterSetName='DistributionPointwithUserSpecifiedCertByValue', Mandatory=$true)]
        [string]
        ${CertificatePath},

        [Parameter(ParameterSetName='DistributionPointwithUserSpecifiedCert', Mandatory=$true)]
        [Parameter(ParameterSetName='DistributionPointwithUserSpecifiedCertByValue', Mandatory=$true)]
        [securestring]
        ${CertificatePassword},

        [switch]
        ${AllowPreStaging},

        [ValidateRange(50, 100000)]
        [int]
        ${MinimumFreeSpaceMB},

        [System.Object]
        ${PrimaryContentLibraryLocation},

        [System.Object]
        ${SecondaryContentLibraryLocation},

        [System.Object]
        ${PrimaryPackageShareLocation},

        [System.Object]
        ${SecondaryPackageShareLocation},

        [Alias('EnablePxeSupport')]
        [switch]
        ${EnablePxe},

        [Alias('AllowRespondIncomingPxeRequest')]
        [switch]
        ${AllowPxeResponse},

        [switch]
        ${EnableUnknownComputerSupport},

        [switch]
        ${EnableNonWdsPxe},

        [Alias('ComputersUsePxePassword')]
        [securestring]
        ${PxePassword},

        [System.Object]
        ${UserDeviceAffinity},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${MacAddressForRespondingPxeRequest},

        [Alias('PxeServerResponseDelaySeconds')]
        [ValidateRange(0, 32)]
        [int]
        ${PxeServerResponseDelaySec},

        [switch]
        ${EnableMulticast},

        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [string]
        ${StartIPAddress},

        [string]
        ${EndIPAddress},

        [ValidateRange(1, 65534)]
        [int]
        ${StartUdpPort},

        [ValidateRange(2, 65535)]
        [int]
        ${EndUdpPort},

        [ValidateRange(1, 10000)]
        [int]
        ${MulticastMaximumClientCount},

        [bool]
        ${EnableScheduledMulticast},

        [Alias('SessionStartDelayMinutes')]
        [ValidateRange(1, 99)]
        [int]
        ${SessionStartDelayMins},

        [ValidateRange(1, 99)]
        [int]
        ${MinimumSessionSize},

        [Alias('EnableValidateContent')]
        [switch]
        ${EnableContentValidation},

        [Alias('ValidateContentSchedule')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${ContentValidationSchedule},

        [System.Object]
        ${ContentMonitoringPriority},

        [switch]
        ${EnablePullDP},

        [Alias('SourceDistributionPoints')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${SourceDistributionPoint},

        [Alias('SourceDPRanks')]
        [ValidateRange(1, 100)]
        [int[]]
        ${SourceDPRank},

        [switch]
        ${EnableSsl},

        [switch]
        ${EnableBranchCache},

        [switch]
        ${EnableLedbat},

        [switch]
        ${AllowFallbackForContent},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMDistributionPointToGroup
{
    [CmdletBinding(DefaultParameterSetName='AddDistributionPointToGroupByObject_Object', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='AddDistributionPointToGroupById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDistributionPointToGroupById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDistributionPointToGroupById_Object', Mandatory=$true)]
        [string]
        ${DistributionPointId},

        [Parameter(ParameterSetName='AddDistributionPointToGroupByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDistributionPointToGroupByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDistributionPointToGroupByName_Object', Mandatory=$true)]
        [string]
        ${DistributionPointName},

        [Parameter(ParameterSetName='AddDistributionPointToGroupByObject_Id', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddDistributionPointToGroupByObject_Name', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddDistributionPointToGroupByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${DistributionPoint},

        [Parameter(ParameterSetName='AddDistributionPointToGroupById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDistributionPointToGroupByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDistributionPointToGroupByObject_Id', Mandatory=$true)]
        [string]
        ${DistributionPointGroupId},

        [Parameter(ParameterSetName='AddDistributionPointToGroupById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDistributionPointToGroupByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDistributionPointToGroupByObject_Name', Mandatory=$true)]
        [string]
        ${DistributionPointGroupName},

        [Parameter(ParameterSetName='AddDistributionPointToGroupById_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddDistributionPointToGroupByName_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddDistributionPointToGroupByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_DistributionPointGroup')]
        [System.Object]
        ${DistributionPointGroup},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMDriverToDriverPackage
{
    [CmdletBinding(DefaultParameterSetName='AddDriverToDriverPackageByObject_Object', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='AddDriverToDriverPackageById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDriverToDriverPackageById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDriverToDriverPackageById_Object', Mandatory=$true)]
        [int]
        ${DriverId},

        [Parameter(ParameterSetName='AddDriverToDriverPackageByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDriverToDriverPackageByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDriverToDriverPackageByName_Object', Mandatory=$true)]
        [string]
        ${DriverName},

        [Parameter(ParameterSetName='AddDriverToDriverPackageByObject_Id', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddDriverToDriverPackageByObject_Name', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddDriverToDriverPackageByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Driver')]
        [System.Object]
        ${Driver},

        [Parameter(ParameterSetName='AddDriverToDriverPackageById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDriverToDriverPackageByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDriverToDriverPackageByObject_Id', Mandatory=$true)]
        [string]
        ${DriverPackageId},

        [Parameter(ParameterSetName='AddDriverToDriverPackageById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDriverToDriverPackageByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddDriverToDriverPackageByObject_Name', Mandatory=$true)]
        [string]
        ${DriverPackageName},

        [Parameter(ParameterSetName='AddDriverToDriverPackageById_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddDriverToDriverPackageByName_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddDriverToDriverPackageByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_DriverPackage')]
        [System.Object]
        ${DriverPackage},

        [Alias('UpdateDistributionPoint','UpdateDistributionPointForDriverPackage','UpdateDistributionPointsForDriverPackage')]
        [bool]
        ${UpdateDistributionPoints},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMEndpointProtectionPoint
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='ByName')]
        [string]
        ${SiteCode},

        [bool]
        ${LicenseAgreed},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${ProtectionService},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SiteServer')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMEnrollmentPoint
{
    [CmdletBinding(DefaultParameterSetName='EnrollmentPointByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='EnrollmentPoint')]
        [Parameter(ParameterSetName='EnrollmentPointByValue')]
        [Alias('IISWebsite')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${WebsiteName},

        [Parameter(ParameterSetName='EnrollmentPoint')]
        [Parameter(ParameterSetName='EnrollmentPointByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${WebApplicationName},

        [Parameter(ParameterSetName='EnrollmentPoint')]
        [Parameter(ParameterSetName='EnrollmentPointByValue')]
        [ValidateNotNullOrEmpty()]
        [int]
        ${PortNumber},

        [Parameter(ParameterSetName='EnrollmentPoint', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='EnrollmentPoint')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='EnrollmentPoint')]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='EnrollmentPointByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SiteServer')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMEnrollmentProxyPoint
{
    [CmdletBinding(DefaultParameterSetName='EnrollmentProxyPointByValue', ConfirmImpact='Medium')]
    param
    (
        [Alias('IISWebsite')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${WebsiteName},

        [Alias('Port')]
        [ValidateNotNullOrEmpty()]
        [ValidateRange(1, 65535)]
        [int]
        ${PortNumber},

        [Alias('EnrollmentPoint')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Enrollment Server')]
        [System.Object]
        ${ServiceHost},

        [Parameter(ParameterSetName='EnrollmentProxyPoint', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='EnrollmentProxyPoint')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='EnrollmentProxyPointByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SiteServer')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMFallbackStatusPoint
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='ByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateRange(100, 100000)]
        [int]
        ${StateMessageNum},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ThrottleIntervalSeconds','ThrottleInterval')]
        [ValidateRange(60, 86400)]
        [int]
        ${ThrottleSec},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateRange(1, 1440)]
        [int]
        ${ThrottleMins},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SiteServer')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMGooglePlayDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('ContentLocation')]
        [string]
        ${Url},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentTypeName},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMIntuneSubscription
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [System.Drawing.Color]
        ${ColorScheme},

        [string]
        ${CompanyLogoPath},

        [string]
        ${CompanyLogoThemedPath},

        [Parameter(Mandatory=$true)]
        [string]
        ${CompanyName},

        [switch]
        ${CompanyNameWithLogo},

        [string]
        ${ContactAdditional},

        [string]
        ${ContactEmail},

        [string]
        ${ContactName},

        [string]
        ${ContactPhoneNumber},

        [Parameter(Mandatory=$true)]
        [Alias('Credentials','Credential')]
        [pscredential]
        ${IntuneCredential},

        [ValidateRange(1, 15)]
        [int]
        ${MaximumUserDevice},

        [switch]
        ${MultifactorEnabled},

        [switch]
        ${OnPremOnly},

        [string]
        ${PrivacyUrl},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [string]
        ${SupportSiteName},

        [string]
        ${SupportUrl},

        [Parameter(Mandatory=$true)]
        [Alias('Collection')]
        [PSTypeName('IResultObject#SMS_Collection;CollectionType=1')]
        [System.Object]
        ${UserCollection},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMIosAppStoreDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('ContentLocation')]
        [string]
        ${Url},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentTypeName},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Add-CMAppleAppStoreDeploymentType Add-CMIosDeepLinkDeploymentType -Value Add-CMIosAppStoreDeploymentType Add-CMIosAppStoreDeploymentType

function Add-CMIosDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentTypeName},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Parameter(Mandatory=$true)]
        [Alias('InstallationFileLocation')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ContentLocation},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Add-CMIpaDeploymentType -Value Add-CMIosDeploymentType

function Add-CMMacDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [Alias('AddDetectionClauses')]
        [System.Object[]]
        ${AddDetectionClause},

        [Alias('GroupDetectionClausesByLogicalName')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${GroupDetectionClauses},

        [Alias('DetectionClauseConnectors')]
        [ValidateNotNullOrEmpty()]
        [hashtable[]]
        ${DetectionClauseConnector},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentTypeName},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Parameter(Mandatory=$true)]
        [Alias('InstallationFileLocation')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ContentLocation},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMManagementPoint
{
    [CmdletBinding(DefaultParameterSetName='ByValueNoReplica', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByNameNoReplica', Mandatory=$true, Position=0)]
        [Parameter(ParameterSetName='ByNameReplica', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='ByNameNoReplica')]
        [Parameter(ParameterSetName='ByNameReplica')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='ByNameNoReplica')]
        [Parameter(ParameterSetName='ByNameReplica')]
        [Parameter(ParameterSetName='ByValueNoReplica')]
        [Parameter(ParameterSetName='ByValueReplica')]
        [switch]
        ${EnableSsl},

        [Parameter(ParameterSetName='ByNameNoReplica')]
        [Parameter(ParameterSetName='ByNameReplica')]
        [Parameter(ParameterSetName='ByValueNoReplica')]
        [Parameter(ParameterSetName='ByValueReplica')]
        [switch]
        ${EnableCloudGateway},

        [Parameter(ParameterSetName='ByNameNoReplica')]
        [Parameter(ParameterSetName='ByNameReplica')]
        [Parameter(ParameterSetName='ByValueNoReplica')]
        [Parameter(ParameterSetName='ByValueReplica')]
        [Alias('ClientCommunicationType')]
        [ValidateSet('Http','Https')]
        [System.Object]
        ${CommunicationType},

        [Parameter(ParameterSetName='ByNameNoReplica')]
        [Parameter(ParameterSetName='ByNameReplica')]
        [Parameter(ParameterSetName='ByValueNoReplica')]
        [Parameter(ParameterSetName='ByValueReplica')]
        [ValidateSet('Internet','Intranet','InternetAndIntranet')]
        [System.Object]
        ${ClientConnectionType},

        [Parameter(ParameterSetName='ByNameNoReplica')]
        [Parameter(ParameterSetName='ByNameReplica')]
        [Parameter(ParameterSetName='ByValueNoReplica')]
        [Parameter(ParameterSetName='ByValueReplica')]
        [switch]
        ${AllowDevice},

        [Parameter(ParameterSetName='ByNameNoReplica')]
        [Parameter(ParameterSetName='ByNameReplica')]
        [Parameter(ParameterSetName='ByValueNoReplica')]
        [Parameter(ParameterSetName='ByValueReplica')]
        [switch]
        ${GenerateAlert},

        [Parameter(ParameterSetName='ByNameReplica', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueReplica', Mandatory=$true)]
        [Alias('SqlServerFqdnName')]
        [string]
        ${SqlServerFqdn},

        [Parameter(ParameterSetName='ByNameReplica')]
        [Parameter(ParameterSetName='ByValueReplica')]
        [string]
        ${SqlServerInstanceName},

        [Parameter(ParameterSetName='ByNameReplica', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueReplica', Mandatory=$true)]
        [ValidateLength(1, 63)]
        [string]
        ${DatabaseName},

        [Parameter(ParameterSetName='ByNameNoReplica')]
        [Parameter(ParameterSetName='ByNameReplica')]
        [Parameter(ParameterSetName='ByValueNoReplica')]
        [Parameter(ParameterSetName='ByValueReplica')]
        [Alias('UserName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConnectionAccountUserName},

        [Parameter(ParameterSetName='ByValueReplica', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueNoReplica', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('SiteServer')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMMdmEnrollmentManager
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('Ids')]
        [int[]]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('User','EnrollmentManager','Users','EnrollmentManagers')]
        [PSTypeName('IResultObject#SMS_CollectionMember;ResourceType=4')]
        [System.Object[]]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Add-CMIntuneDeviceEnrollmentManager -Value Add-CMMdmEnrollmentManager

function Add-CMMobileMsiDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 512)]
        [string]
        ${InstallCommand},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentTypeName},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Parameter(Mandatory=$true)]
        [Alias('InstallationFileLocation')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ContentLocation},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMMsiDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByAppIdDetectionClause', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppNameDetectionClause', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValueDetectionClause', Mandatory=$true)]
        [Alias('AddDetectionClauses')]
        [System.Object[]]
        ${AddDetectionClause},

        [Parameter(ParameterSetName='ByAppIdDetectionClause')]
        [Parameter(ParameterSetName='ByAppNameDetectionClause')]
        [Parameter(ParameterSetName='ByAppValueDetectionClause')]
        [Alias('GroupDetectionClausesByLogicalName')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${GroupDetectionClauses},

        [Parameter(ParameterSetName='ByAppIdDetectionClause')]
        [Parameter(ParameterSetName='ByAppNameDetectionClause')]
        [Parameter(ParameterSetName='ByAppValueDetectionClause')]
        [Alias('DetectionClauseConnectors')]
        [ValidateNotNullOrEmpty()]
        [hashtable[]]
        ${DetectionClauseConnector},

        [Parameter(ParameterSetName='ByAppIdDetectionClause', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppIdScript', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppNameDetectionClause', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppNameScript', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppValueDetectionClause', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByAppValueScript', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByAppIdDetectionClause')]
        [Parameter(ParameterSetName='ByAppNameDetectionClause')]
        [Parameter(ParameterSetName='ByAppValueDetectionClause')]
        [Parameter(ParameterSetName='ByAppIdScript')]
        [Parameter(ParameterSetName='ByAppNameScript')]
        [Parameter(ParameterSetName='ByAppValueScript')]
        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [Alias('InstallationFileLocation')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ContentLocation},

        [Parameter(ParameterSetName='ByAppIdDetectionClause', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppNameDetectionClause', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValueDetectionClause', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppIdScript', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppNameScript', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValueScript', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppId')]
        [Parameter(ParameterSetName='ByAppName')]
        [Parameter(ParameterSetName='ByAppValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentTypeName},

        [Alias('PersistContentInClientCache')]
        [switch]
        ${CacheContent},

        [Alias('EnableContentLocationFallback','AllowClientsToUseFallbackSourceLocationForContent')]
        [switch]
        ${ContentFallback},

        [Alias('AllowClientsToShareContentOnSameSubnet')]
        [switch]
        ${EnableBranchCache},

        [Alias('EstimatedInstallationTimeMinutes','EstimatedInstallationTimeMins','EstimatedRunTimeMinutes')]
        [ValidateRange(0, 32767)]
        [int]
        ${EstimatedRuntimeMins},

        [Alias('Force32BitInstaller')]
        [switch]
        ${Force32Bit},

        [Parameter(ParameterSetName='ByAppIdScript')]
        [Parameter(ParameterSetName='ByAppNameScript')]
        [Parameter(ParameterSetName='ByAppValueScript')]
        [Alias('Force32BitDetectionScript')]
        [switch]
        ${ForceScriptDetection32Bit},

        [Parameter(ParameterSetName='ByAppIdDetectionClause', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppNameDetectionClause', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValueDetectionClause', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppIdScript', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppNameScript', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValueScript', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppId')]
        [Parameter(ParameterSetName='ByAppName')]
        [Parameter(ParameterSetName='ByAppValue')]
        [Alias('InstallationProgram')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 1024)]
        [string]
        ${InstallCommand},

        [Alias('InstallationStartIn','InstallFolder')]
        [ValidateLength(0, 512)]
        [string]
        ${InstallWorkingDirectory},

        [System.Object]
        ${LogonRequirementType},

        [Alias('MaximumAllowedRunTimeMinutes','MaximumAllowedRunTimeMins','MaximumRunTimeMinutes')]
        [ValidateRange(15, 720)]
        [int]
        ${MaximumRuntimeMins},

        [Parameter(ParameterSetName='ByAppId')]
        [Parameter(ParameterSetName='ByAppName')]
        [Parameter(ParameterSetName='ByAppValue')]
        [string]
        ${ProductCode},

        [Alias('RequiresUserInteraction')]
        [switch]
        ${RequireUserInteraction},

        [Parameter(ParameterSetName='ByAppIdScript', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppNameScript', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValueScript', Mandatory=$true)]
        [Alias('ScriptType')]
        [System.Object]
        ${ScriptLanguage},

        [Parameter(ParameterSetName='ByAppIdScript')]
        [Parameter(ParameterSetName='ByAppNameScript')]
        [Parameter(ParameterSetName='ByAppValueScript')]
        [Alias('ScriptContent')]
        [string]
        ${ScriptText},

        [Parameter(ParameterSetName='ByAppIdScript')]
        [Parameter(ParameterSetName='ByAppNameScript')]
        [Parameter(ParameterSetName='ByAppValueScript')]
        [string]
        ${ScriptFile},

        [ValidateSet('DoNothing','Download')]
        [System.Object]
        ${SlowNetworkDeploymentMode},

        [Alias('UninstallationProgram')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 1024)]
        [string]
        ${UninstallCommand},

        [Alias('UninstallationStartIn','UninstallFolder')]
        [string]
        ${UninstallWorkingDirectory},

        [Alias('InstallationProgramVisibility')]
        [System.Object]
        ${UserInteractionMode},

        [string]
        ${SourceUpdateProductCode},

        [System.Object]
        ${InstallationBehaviorType},

        [ValidateSet('BasedOnExitCode','NoAction','ForceReboot','ProgramReboot')]
        [System.Object]
        ${RebootBehavior},

        [string]
        ${UninstallContentLocation},

        [System.Object]
        ${UninstallOption},

        [System.Object[]]
        ${AddRequirement},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMMulticastServicePoint
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [System.Object]
        ${ClientTransferRate},

        [string]
        ${EndIPAddress},

        [ValidateRange(2, 65535)]
        [int]
        ${EndUdpPort},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SiteServer')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${InputObject},

        [Alias('MinimumSessionSize')]
        [ValidateRange(1, 99)]
        [int]
        ${MinimumClientCount},

        [Alias('MulticastMaximumClientCount')]
        [ValidateRange(1, 10000)]
        [int]
        ${MaximumClientCount},

        [Alias('SessionStartDelayMinutes')]
        [ValidateRange(1, 99)]
        [int]
        ${SessionStartDelayMins},

        [Parameter(ParameterSetName='ByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [string]
        ${StartIPAddress},

        [ValidateRange(1, 65534)]
        [int]
        ${StartUdpPort},

        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMObjectSecurityScope
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('SecurityScopeId')]
        [string]
        ${Id},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object[]]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [Alias('SecurityScopeName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0)]
        [Alias('SecurityScope','SecuredCategory','Scopes','SecurityScopes','SecuredCategories')]
        [PSTypeName('IResultObject#SMS_SecuredCategory')]
        [System.Object[]]
        ${Scope},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMReportingServicePoint
{
    [CmdletBinding(DefaultParameterSetName='ReportingServicePointByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ReportingServicePoint')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderName},

        [Parameter(ParameterSetName='ReportingServicePoint')]
        [Parameter(ParameterSetName='ReportingServicePointByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ReportServerInstance},

        [Parameter(ParameterSetName='ReportingServicePoint', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='ReportingServicePoint')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='ReportingServicePoint')]
        [Parameter(ParameterSetName='ReportingServicePointByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DatabaseServerName},

        [Parameter(ParameterSetName='ReportingServicePoint')]
        [Parameter(ParameterSetName='ReportingServicePointByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DatabaseName},

        [Parameter(ParameterSetName='ReportingServicePoint', Mandatory=$true)]
        [Parameter(ParameterSetName='ReportingServicePointByValue', Mandatory=$true)]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='ReportingServicePointByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SiteServer')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMScriptDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppNameScript', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [string]
        ${ProductCode},

        [Alias('InstallationFileLocation')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ContentLocation},

        [Parameter(Mandatory=$true)]
        [string]
        ${DeploymentTypeName},

        [Parameter(Mandatory=$true)]
        [Alias('InstallationProgram')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 1024)]
        [string]
        ${InstallCommand},

        [Parameter(ParameterSetName='ByAppIdDetectionClause', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppNameDetectionClause', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValueDetectionClause', Mandatory=$true)]
        [Alias('AddDetectionClauses')]
        [System.Object[]]
        ${AddDetectionClause},

        [Parameter(ParameterSetName='ByAppIdDetectionClause')]
        [Parameter(ParameterSetName='ByAppNameDetectionClause')]
        [Parameter(ParameterSetName='ByAppValueDetectionClause')]
        [Alias('GroupDetectionClausesByLogicalName')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${GroupDetectionClauses},

        [Parameter(ParameterSetName='ByAppIdDetectionClause')]
        [Parameter(ParameterSetName='ByAppNameDetectionClause')]
        [Parameter(ParameterSetName='ByAppValueDetectionClause')]
        [Alias('DetectionClauseConnectors')]
        [ValidateNotNullOrEmpty()]
        [hashtable[]]
        ${DetectionClauseConnector},

        [Parameter(ParameterSetName='ByAppIdDetectionClause', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppIdScript', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppNameDetectionClause', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppNameScript', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppValueDetectionClause', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByAppValueScript', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [Alias('PersistContentInClientCache')]
        [switch]
        ${CacheContent},

        [Alias('EnableContentLocationFallback','AllowClientsToUseFallbackSourceLocationForContent')]
        [switch]
        ${ContentFallback},

        [Alias('AllowClientsToShareContentOnSameSubnet')]
        [switch]
        ${EnableBranchCache},

        [Alias('EstimatedInstallationTimeMinutes','EstimatedInstallationTimeMins','EstimatedRunTimeMinutes')]
        [ValidateRange(0, 32767)]
        [int]
        ${EstimatedRuntimeMins},

        [Alias('Force32BitInstaller')]
        [switch]
        ${Force32Bit},

        [Parameter(ParameterSetName='ByAppIdScript')]
        [Parameter(ParameterSetName='ByAppNameScript')]
        [Parameter(ParameterSetName='ByAppValueScript')]
        [Alias('Force32BitDetectionScript')]
        [switch]
        ${ForceScriptDetection32Bit},

        [Alias('InstallationStartIn','InstallFolder')]
        [ValidateLength(0, 512)]
        [string]
        ${InstallWorkingDirectory},

        [System.Object]
        ${LogonRequirementType},

        [Alias('MaximumAllowedRunTimeMinutes','MaximumAllowedRunTimeMins','MaximumRunTimeMinutes')]
        [ValidateRange(15, 720)]
        [int]
        ${MaximumRuntimeMins},

        [Alias('RequiresUserInteraction')]
        [switch]
        ${RequireUserInteraction},

        [Parameter(ParameterSetName='ByAppIdScript', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppNameScript', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValueScript', Mandatory=$true)]
        [Alias('ScriptType')]
        [System.Object]
        ${ScriptLanguage},

        [Parameter(ParameterSetName='ByAppIdScript')]
        [Parameter(ParameterSetName='ByAppNameScript')]
        [Parameter(ParameterSetName='ByAppValueScript')]
        [Alias('ScriptContent')]
        [string]
        ${ScriptText},

        [Parameter(ParameterSetName='ByAppIdScript')]
        [Parameter(ParameterSetName='ByAppNameScript')]
        [Parameter(ParameterSetName='ByAppValueScript')]
        [string]
        ${ScriptFile},

        [ValidateSet('DoNothing','Download')]
        [System.Object]
        ${SlowNetworkDeploymentMode},

        [Alias('UninstallationProgram')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 1024)]
        [string]
        ${UninstallCommand},

        [Alias('UninstallationStartIn','UninstallFolder')]
        [string]
        ${UninstallWorkingDirectory},

        [Alias('InstallationProgramVisibility')]
        [System.Object]
        ${UserInteractionMode},

        [string]
        ${SourceUpdateProductCode},

        [System.Object]
        ${InstallationBehaviorType},

        [ValidateSet('BasedOnExitCode','NoAction','ForceReboot','ProgramReboot')]
        [System.Object]
        ${RebootBehavior},

        [string]
        ${UninstallContentLocation},

        [System.Object]
        ${UninstallOption},

        [System.Object[]]
        ${AddRequirement},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMSecurityRoleToAdministrativeUser
{
    [CmdletBinding(DefaultParameterSetName='AddRoleToAdminByName_Name', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='AddRoleToAdminById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddRoleToAdminById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddRoleToAdminById_Object', Mandatory=$true)]
        [string]
        ${RoleId},

        [Parameter(ParameterSetName='AddRoleToAdminByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddRoleToAdminByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddRoleToAdminByName_Object', Mandatory=$true)]
        [string]
        ${RoleName},

        [Parameter(ParameterSetName='AddRoleToAdminByObject_Id', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddRoleToAdminByObject_Name', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddRoleToAdminByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Role')]
        [PSTypeName('IResultObject#SMS_Role')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='AddRoleToAdminById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddRoleToAdminByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddRoleToAdminByObject_Id', Mandatory=$true)]
        [int]
        ${AdministrativeUserId},

        [Parameter(ParameterSetName='AddRoleToAdminById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddRoleToAdminByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddRoleToAdminByObject_Name', Mandatory=$true)]
        [string]
        ${AdministrativeUserName},

        [Parameter(ParameterSetName='AddRoleToAdminById_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddRoleToAdminByName_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddRoleToAdminByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Admin')]
        [System.Object]
        ${AdministrativeUser},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMSecurityScopeToAdministrativeUser
{
    [CmdletBinding(DefaultParameterSetName='AddScopeToAdminByName_Name', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='AddScopeToAdminById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddScopeToAdminById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddScopeToAdminById_Object', Mandatory=$true)]
        [string]
        ${SecurityScopeId},

        [Parameter(ParameterSetName='AddScopeToAdminByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddScopeToAdminByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddScopeToAdminByName_Object', Mandatory=$true)]
        [string]
        ${SecurityScopeName},

        [Parameter(ParameterSetName='AddScopeToAdminByObject_Id', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddScopeToAdminByObject_Name', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddScopeToAdminByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SecuredCategory')]
        [System.Object]
        ${SecurityScope},

        [Parameter(ParameterSetName='AddScopeToAdminById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddScopeToAdminByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='AddScopeToAdminByObject_Id', Mandatory=$true)]
        [int]
        ${AdministrativeUserId},

        [Parameter(ParameterSetName='AddScopeToAdminById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddScopeToAdminByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='AddScopeToAdminByObject_Name', Mandatory=$true)]
        [string]
        ${AdministrativeUserName},

        [Parameter(ParameterSetName='AddScopeToAdminById_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddScopeToAdminByName_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='AddScopeToAdminByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Admin')]
        [System.Object]
        ${AdministrativeUser},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMServiceConnectionPoint
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [System.Object]
        ${Mode},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SiteServer')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMSoftwareUpdatePoint
{
    [CmdletBinding(DefaultParameterSetName='SumPByValueWithWsus', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SumPByValueWithWsus', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SumPWithWsus')]
        [Parameter(ParameterSetName='SumPByValueWithWsus')]
        [ValidateNotNullOrEmpty()]
        [int]
        ${WsusIisPort},

        [Parameter(ParameterSetName='SumPWithWsus')]
        [Parameter(ParameterSetName='SumPByValueWithWsus')]
        [ValidateNotNullOrEmpty()]
        [int]
        ${WsusIisSslPort},

        [Parameter(ParameterSetName='SumPWithWsus', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SumPWithWsus')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SumPWithWsus')]
        [Parameter(ParameterSetName='SumPByValueWithWsus')]
        [System.Object]
        ${ClientConnectionType},

        [Parameter(ParameterSetName='SumPWithWsus')]
        [Parameter(ParameterSetName='SumPByValueWithWsus')]
        [switch]
        ${EnableCloudGateway},

        [Parameter(ParameterSetName='SumPWithWsus')]
        [Parameter(ParameterSetName='SumPByValueWithWsus')]
        [Alias('SslWsus')]
        [bool]
        ${WsusSsl},

        [Parameter(ParameterSetName='SumPWithWsus')]
        [Parameter(ParameterSetName='SumPByValueWithWsus')]
        [bool]
        ${UseProxy},

        [Parameter(ParameterSetName='SumPWithWsus')]
        [Parameter(ParameterSetName='SumPByValueWithWsus')]
        [bool]
        ${UseProxyForAutoDeploymentRule},

        [Parameter(ParameterSetName='SumPWithWsus')]
        [Parameter(ParameterSetName='SumPByValueWithWsus')]
        [switch]
        ${AnonymousWsusAccess},

        [Parameter(ParameterSetName='SumPWithWsus')]
        [Parameter(ParameterSetName='SumPByValueWithWsus')]
        [Alias('UserName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConnectionAccountUserName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMSoftwareUpdateToGroup
{
    [CmdletBinding(DefaultParameterSetName='ById_Id', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='ById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='ById_Object', Mandatory=$true)]
        [Alias('SoftwareUpdateIds')]
        [string[]]
        ${SoftwareUpdateId},

        [Parameter(ParameterSetName='ByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='ByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='ByName_Object', Mandatory=$true)]
        [Alias('SoftwareUpdateNames')]
        [string[]]
        ${SoftwareUpdateName},

        [Parameter(ParameterSetName='ByObject_Id', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByObject_Name', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SoftwareUpdates')]
        [PSTypeName('IResultObject#SMS_SoftwareUpdate')]
        [System.Object[]]
        ${SoftwareUpdate},

        [Parameter(ParameterSetName='ById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='ByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='ByObject_Id', Mandatory=$true)]
        [string]
        ${SoftwareUpdateGroupId},

        [Parameter(ParameterSetName='ById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='ByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='ByObject_Name', Mandatory=$true)]
        [string]
        ${SoftwareUpdateGroupName},

        [Parameter(ParameterSetName='ById_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByName_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AuthorizationList')]
        [System.Object]
        ${SoftwareUpdateGroup},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMStateMigrationPoint
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='ByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValue', Mandatory=$true)]
        [Alias('StorageFolders')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${StorageFolder},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${DeleteImmediately},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${TimeDeleteAfter},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${TimeUnit},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${EnableRestoreOnlyMode},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${AllowFallbackSourceLocationForContent},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${BoundaryGroupName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SiteServer')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMTaskSequenceStep
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValue', Mandatory=$true)]
        [Alias('Steps')]
        [PSTypeName('IResultObject#SMS_TaskSequence_Step')]
        [System.Object[]]
        ${Step},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('InsertStepsStartIndex')]
        [ValidateRange(0, 2147483647)]
        [uint32]
        ${InsertStepStartIndex},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMUserAffinityToDevice
{
    [CmdletBinding(DefaultParameterSetName='AddUserAffinityByDeviceName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='AddUserAffinityByDeviceName', Mandatory=$true)]
        [Alias('ResourceName')]
        [string[]]
        ${DeviceName},

        [Parameter(ParameterSetName='AddUserAffinityByDeviceId', Mandatory=$true)]
        [Alias('ResourceId')]
        [int[]]
        ${DeviceId},

        [Parameter(ParameterSetName='AddUserAffinityByDeviceName')]
        [Parameter(ParameterSetName='AddUserAffinityByDeviceId')]
        [Alias('UserIds')]
        [ValidateNotNullOrEmpty()]
        [int[]]
        ${UserId},

        [Parameter(ParameterSetName='AddUserAffinityByDeviceName')]
        [Parameter(ParameterSetName='AddUserAffinityByDeviceId')]
        [Alias('UserNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${UserName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMUserCollectionDirectMembershipRule
{
    [CmdletBinding(DefaultParameterSetName='ByCollectionValueAndResourceValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByCollectionIdAndResourceId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByCollectionIdAndResourceValue', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='ByCollectionNameAndResourceId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByCollectionNameAndResourceValue', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='ByCollectionValueAndResourceId', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByCollectionValueAndResourceValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Collection')]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByCollectionIdAndResourceId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByCollectionNameAndResourceId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByCollectionValueAndResourceId', Mandatory=$true)]
        [Alias('ResourceIds')]
        [int[]]
        ${ResourceId},

        [Parameter(ParameterSetName='ByCollectionIdAndResourceValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByCollectionNameAndResourceValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByCollectionValueAndResourceValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Resources')]
        [System.Object[]]
        ${Resource},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMUserCollectionQueryMembershipRule
{
    [CmdletBinding(DefaultParameterSetName='ByCollectionValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByCollectionId', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='ByCollectionName', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='ByCollectionValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${Collection},

        [Parameter(Mandatory=$true)]
        [string]
        ${RuleName},

        [Parameter(Mandatory=$true)]
        [string]
        ${QueryExpression},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMWebApplicationDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('ContentLocation')]
        [string]
        ${Url},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentTypeName},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Add-CMWindowsAppxDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [ValidateSet('DoNothing','Download')]
        [System.Object]
        ${SlowNetworkDeploymentMode},

        [switch]
        ${TriggerVpn},

        [Alias('EnableContentLocationFallback','AllowClientsToUseFallbackSourceLocationForContent')]
        [switch]
        ${ContentFallback},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentTypeName},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Parameter(Mandatory=$true)]
        [Alias('InstallationFileLocation')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ContentLocation},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Add-CMAppxDeploymentType -Value Add-CMWindowsAppxDeploymentType

function Add-CMWindowsPhoneDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentTypeName},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Parameter(Mandatory=$true)]
        [Alias('InstallationFileLocation')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ContentLocation},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Add-CMWindowsPhone8DeploymentType Add-CMXapDeploymentType -Value Add-CMWindowsPhoneDeploymentType Add-CMWindowsPhoneDeploymentType

function Add-CMWindowsPhoneStoreDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('ContentLocation')]
        [string]
        ${Url},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentTypeName},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Add-CMWindowsPhone8DeeplinkDeploymentType Add-CMWindowsPhone8StoreDeploymentType -Value Add-CMWindowsPhoneStoreDeploymentType Add-CMWindowsPhoneStoreDeploymentType

function Add-CMWindowsStoreDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('ContentLocation')]
        [string]
        ${Url},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentTypeName},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Add-CMWindowsStoreDeeplinkDeploymentType -Value Add-CMWindowsStoreDeploymentType

function Approve-CMApprovalRequest
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('Application','Name')]
        [string[]]
        ${ApplicationName},

        [Alias('Comments')]
        [string]
        ${Comment},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CIUniqueId')]
        [string[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByGuid', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RequestGuid},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_UserApplicationRequest')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${User},

        [System.Object]
        ${InstallActionBehavior},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Approve-CMDevice
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceName},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('ResourceId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceId},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_CombinedDeviceResources')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Approve-CMScript
{
    [CmdletBinding(ConfirmImpact='None')]
    param
    (
        [Parameter(ParameterSetName='ByScript', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Scripts')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByScriptId', Mandatory=$true)]
        [string]
        ${ScriptGuid},

        [string]
        ${Comment},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Approve-CMUserDeviceAffinityRequest
{
    [CmdletBinding(DefaultParameterSetName='SearchByNameMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserId},

        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceName},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceId},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserDeviceAffinityRequestId},

        [Parameter(ParameterSetName='SearchByNameMandatory', ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory', ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_UserMachineRelationship')]
        [System.Object]
        ${UserDeviceAffinityRequest},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Block-CMCertificate
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('SmsId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Certificate')]
        [PSTypeName('IResultObject#SMS_Certificate')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Block-CMConflictingRecord
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('SmsId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('AgentName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ConflictingRecord')]
        [PSTypeName('IResultObject#SMS_PendingRegistrationRecord')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Block-CMDevice
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceName},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('ResourceId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceId},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Clear-CMClientOperation
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ClientOperationStatus')]
        [System.Object]
        ${ClientOperation},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Clear-CMComponentStatusMessageCount
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByName', Mandatory=$true)]
        [string]
        ${ComponentName},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('MachineName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ComputerName},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Mandatory=$true)]
        [System.Object]
        ${Severity},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Clear-CMMigrationData
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='CleanupMigrationDataBySiteCode', Mandatory=$true)]
        [Alias('SiteCode')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SourceSiteCode},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Clear-CMOperatingSystemImageUpdateSchedule
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Low')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('OperatingSystemImageId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('OperatingSystemImageName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('OperatingSystemImage','ServicingSchedule')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Clear-CMOperatingSystemUpgradeUpdateSchedule
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Low')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('OperatingSystemImageId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('OperatingSystemImageName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('OperatingSystemImage','ServicingSchedule')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Clear-CMOperatingSystemUpgradePackageUpdateSchedule -Value Clear-CMOperatingSystemUpgradeUpdateSchedule

function Clear-CMPxeDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('CollectionName','DeviceCollectionNames','CollectionNames')]
        [string[]]
        ${DeviceCollectionName},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CollectionId','DeviceCollectionIds','CollectionIds')]
        [string[]]
        ${DeviceCollectionId},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Collection')]
        [PSTypeName('IResultObject#SMS_Collection;CollectionType=2')]
        [System.Object]
        ${DeviceCollection},

        [Parameter(ParameterSetName='SearchByNameMandatory_Device', Mandatory=$true)]
        [Alias('DeviceNames')]
        [string[]]
        ${DeviceName},

        [Parameter(ParameterSetName='SearchByIdMandatory_Device', Mandatory=$true)]
        [Alias('ResourceIds')]
        [int[]]
        ${ResourceId},

        [Parameter(ParameterSetName='SearchByValueMandatory_Device', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${Device},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Clear-CMSiteStatusMessageCount
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByName', Mandatory=$true)]
        [System.Object]
        ${Severity},

        [Parameter(ParameterSetName='SearchByName', Mandatory=$true)]
        [string]
        ${ComputerName},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Convert-CMApplication
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('IResultObject','Application','ProviderApplicationObject')]
        [psobject]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Convert-CMDeploymentType
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('IResultObject','DeploymentType','ProviderDeploymentTypeObject')]
        [psobject]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Convert-CMSchedule
{
    [CmdletBinding(DefaultParameterSetName='ByToken')]
    param
    (
        [Parameter(ParameterSetName='ByString', Mandatory=$true, Position=0)]
        [string[]]
        ${ScheduleString},

        [Parameter(ParameterSetName='ByToken', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('ScheduleToken')]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object[]]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function ConvertFrom-CMApplication
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function ConvertFrom-CMConfigurationItem
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [System.Object]
        ${ConfigurationItem},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function ConvertFrom-CMIResultObject
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function ConvertTo-CMApplication
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application','DeploymentType')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function ConvertTo-CMConfigurationItem
{
    [CmdletBinding(DefaultParameterSetName='ByObjectValue')]
    param
    (
        [Parameter(ParameterSetName='ByStringValue', Mandatory=$true)]
        [string]
        ${DigestText},

        [Parameter(ParameterSetName='ByObjectValue', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function ConvertTo-CMIResultObject
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [System.Management.ManagementBaseObject]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Copy-CMCollection
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('CollectionId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('CollectionName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Collection')]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${InputObject},

        [Alias('NewCollectionName')]
        [ValidateLength(1, 255)]
        [string]
        ${NewName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Copy-CMConfigurationPolicy
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Low')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('ConfigurationPolicy')]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(Mandatory=$true, Position=1)]
        [ValidateLength(1, 255)]
        [string]
        ${NewName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Copy-CMClientAuthCertificateProfileConfigurationItem Copy-CMClientCertificateProfileConfigurationItem Copy-CMRemoteConnectionProfileConfigurationItem Copy-CMRootCertificateProfileConfigurationItem Copy-CMTrustedRootCertificateProfileConfigurationItem Copy-CMUserDataAndProfileConfigurationItem Copy-CMVpnProfileConfigurationItem Copy-CMWirelessProfileConfigurationItem -Value Copy-CMConfigurationPolicy Copy-CMConfigurationPolicy Copy-CMConfigurationPolicy Copy-CMConfigurationPolicy Copy-CMConfigurationPolicy Copy-CMConfigurationPolicy Copy-CMConfigurationPolicy Copy-CMConfigurationPolicy

function Copy-CMSecurityRole
{
    [CmdletBinding(DefaultParameterSetName='CopyFromId', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='CopyFromValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Role')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='CopyFromId', Mandatory=$true)]
        [Alias('CopiedFromId')]
        [string]
        ${SourceRoleId},

        [Parameter(ParameterSetName='CopyFromId', Mandatory=$true)]
        [Parameter(ParameterSetName='CopyFromName', Mandatory=$true)]
        [Parameter(ParameterSetName='CopyFromValue', Mandatory=$true)]
        [Alias('RoleName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='CopyFromId')]
        [Parameter(ParameterSetName='CopyFromName')]
        [Parameter(ParameterSetName='CopyFromValue')]
        [Alias('RoleDescription')]
        [string]
        ${Description},

        [Parameter(ParameterSetName='CopyFromName', Mandatory=$true)]
        [string]
        ${SourceRoleName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Copy-CMTaskSequence
{
    [CmdletBinding(DefaultParameterSetName='SearchById', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchById', Mandatory=$true)]
        [Alias('PackageId','TaskSequencePackageId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName', Mandatory=$true)]
        [Alias('TaskSequenceName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Deny-CMApprovalRequest
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CIUniqueId')]
        [string[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('Application','Name')]
        [string[]]
        ${ApplicationName},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${User},

        [Parameter(ParameterSetName='SearchByGuid', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RequestGuid},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_UserApplicationRequest')]
        [System.Object]
        ${InputObject},

        [Alias('Comments')]
        [string]
        ${Comment},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Deny-CMScript
{
    [CmdletBinding(ConfirmImpact='None')]
    param
    (
        [Parameter(ParameterSetName='ByScript', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Scripts')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByScriptId', Mandatory=$true)]
        [string]
        ${ScriptGuid},

        [string]
        ${Comment},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Deny-CMUserDeviceAffinityRequest
{
    [CmdletBinding(DefaultParameterSetName='SearchByNameMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserId},

        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceName},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceId},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserDeviceAffinityRequestId},

        [Parameter(ParameterSetName='SearchByNameMandatory', ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory', ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_UserMachineRelationship')]
        [System.Object]
        ${UserDeviceAffinityRequest},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Disable-CMAlert
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Alert')]
        [PSTypeName('IResultObject#SMS_AlertBase')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Disable-CMBaseline
{
    [CmdletBinding(DefaultParameterSetName='SearchByIdMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationBaselineInfo')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Disable-CMDriver
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CIId','CI_ID')]
        [ValidateNotNullOrEmpty()]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Driver')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Disable-CMProgram
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdAndNameMandatory', Mandatory=$true)]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='SearchByNameAndNameMandatory', Mandatory=$true)]
        [string]
        ${PackageName},

        [Parameter(ParameterSetName='SearchByIdAndNameMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameAndNameMandatory', Mandatory=$true)]
        [string]
        ${ProgramName},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Program')]
        [PSTypeName('IResultObject#SMS_Program')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Disable-CMSoftwareMeteringRule
{
    [CmdletBinding(DefaultParameterSetName='SearchByIdMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('RuleId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${ProductName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_MeteredProductRule')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Disable-CMSoftwareUpdateAutoDeploymentRule
{
    [CmdletBinding(DefaultParameterSetName='SearchByIdMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('AutoDeploymentId')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_AutoDeployment')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Disable-CMStatusFilterRule
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SCPropertyList')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByName', Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Disable-CMTaskSequence
{
    [CmdletBinding(DefaultParameterSetName='SearchByIdMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId','Id')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${TaskSequencePackageId},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Disconnect-CMTrackedObject
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByAll', Mandatory=$true)]
        [switch]
        ${All},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('InputObjects')]
        [System.IDisposable[]]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Enable-CMAlert
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Alert')]
        [PSTypeName('IResultObject#SMS_AlertBase')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Enable-CMBaseline
{
    [CmdletBinding(DefaultParameterSetName='SearchByIdMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationBaselineInfo')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Enable-CMDriver
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CIId','CI_ID')]
        [ValidateNotNullOrEmpty()]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Driver')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Enable-CMProgram
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdAndNameMandatory', Mandatory=$true)]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='SearchByNameAndNameMandatory', Mandatory=$true)]
        [string]
        ${PackageName},

        [Parameter(ParameterSetName='SearchByIdAndNameMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameAndNameMandatory', Mandatory=$true)]
        [string]
        ${ProgramName},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Program')]
        [PSTypeName('IResultObject#SMS_Program')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Enable-CMSiteFeature
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_CM_UpdateFeatures')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Enable-CMSoftwareMeteringRule
{
    [CmdletBinding(DefaultParameterSetName='SearchByIdMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('RuleId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${ProductName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_MeteredProductRule')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Enable-CMSoftwareUpdateAutoDeploymentRule
{
    [CmdletBinding(DefaultParameterSetName='SearchByIdMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('AutoDeploymentId')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_AutoDeployment')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Enable-CMStatusFilterRule
{
    [CmdletBinding(DefaultParameterSetName='SearchByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SCPropertyList')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByName', Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Enable-CMTaskSequence
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId','Id')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${TaskSequencePackageId},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Export-CMAntimalwarePolicy
{
    [CmdletBinding(DefaultParameterSetName='ExportByNameMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ExportByIdMandatory', Mandatory=$true)]
        [Alias('SettingsId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='ExportByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AntiMalwareSettings')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ExportByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ExportByNameMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='ExportByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='ExportByValueMandatory', Mandatory=$true)]
        [Alias('ExportFilePath')]
        [string]
        ${Path},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Export-CMApplication
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [string]
        ${Path},

        [switch]
        ${IgnoreRelated},

        [switch]
        ${OmitContent},

        [string]
        ${Comment},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Export-CMBaseline
{
    [CmdletBinding(DefaultParameterSetName='SearchByNameMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationBaselineInfo')]
        [System.Object]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [string]
        ${Path},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Export-CMCollection
{
    [CmdletBinding(DefaultParameterSetName='SearchByNameMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true)]
        [string]
        ${ExportFilePath},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [string]
        ${ExportComment},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Export-CMDeviceCollection Export-CMUserCollection -Value Export-CMCollection Export-CMCollection

function Export-CMConfigurationItem
{
    [CmdletBinding(DefaultParameterSetName='SearchByNameMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationItemLatest')]
        [System.Object]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [string]
        ${Path},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Export-CMDriverPackage
{
    [CmdletBinding(DefaultParameterSetName='SearchPackageByNameMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_DriverPackage')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchPackageByIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchPackageByNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchPackageByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchPackageByNameMandatory', Mandatory=$true)]
        [string]
        ${ExportFilePath},

        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Parameter(ParameterSetName='SearchPackageByIdMandatory')]
        [Parameter(ParameterSetName='SearchPackageByNameMandatory')]
        [Alias('ExportAssociateDrivers')]
        [bool]
        ${WithDependence},

        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Parameter(ParameterSetName='SearchPackageByIdMandatory')]
        [Parameter(ParameterSetName='SearchPackageByNameMandatory')]
        [Alias('ExportAllContent')]
        [bool]
        ${WithContent},

        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Parameter(ParameterSetName='SearchPackageByIdMandatory')]
        [Parameter(ParameterSetName='SearchPackageByNameMandatory')]
        [Alias('Comments')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Comment},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Export-CMPackage
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchPackageByIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchPackageByNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchPackageByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchPackageByNameMandatory', Mandatory=$true)]
        [Alias('ExportFilePath')]
        [string]
        ${FileName},

        [Parameter(ParameterSetName='SearchByValue')]
        [Parameter(ParameterSetName='SearchPackageByIdMandatory')]
        [Parameter(ParameterSetName='SearchPackageByNameMandatory')]
        [bool]
        ${WithDependence},

        [Parameter(ParameterSetName='SearchByValue')]
        [Parameter(ParameterSetName='SearchPackageByIdMandatory')]
        [Parameter(ParameterSetName='SearchPackageByNameMandatory')]
        [bool]
        ${WithContent},

        [Parameter(ParameterSetName='SearchByValue')]
        [Parameter(ParameterSetName='SearchPackageByIdMandatory')]
        [Parameter(ParameterSetName='SearchPackageByNameMandatory')]
        [Alias('Comments')]
        [string]
        ${Comment},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Export-CMQuery
{
    [CmdletBinding(DefaultParameterSetName='SearchByNameMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('QueryId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Query')]
        [PSTypeName('IResultObject#SMS_Query')]
        [System.Object]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [string]
        ${ExportFilePath},

        [string]
        ${Comment},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Export-CMSecurityRole
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('ExportFilePath')]
        [string]
        ${Path},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${RoleName},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [string]
        ${RoleId},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Role')]
        [PSTypeName('IResultObject#SMS_Role')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Export-CMTaskSequence
{
    [CmdletBinding(DefaultParameterSetName='SearchPackageByNameMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchPackageByIdMandatory', Mandatory=$true)]
        [Alias('PackageId','Id')]
        [string]
        ${TaskSequencePackageId},

        [Parameter(ParameterSetName='SearchPackageByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchPackageByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchPackageByNameMandatory', Mandatory=$true)]
        [string]
        ${ExportFilePath},

        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Parameter(ParameterSetName='SearchPackageByIdMandatory')]
        [Parameter(ParameterSetName='SearchPackageByNameMandatory')]
        [bool]
        ${WithDependence},

        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Parameter(ParameterSetName='SearchPackageByIdMandatory')]
        [Parameter(ParameterSetName='SearchPackageByNameMandatory')]
        [bool]
        ${WithContent},

        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Parameter(ParameterSetName='SearchPackageByIdMandatory')]
        [Parameter(ParameterSetName='SearchPackageByNameMandatory')]
        [Alias('Comments')]
        [string]
        ${Comment},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Export-CMWindowsEnrollmentProfile
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${EncryptPackage},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Profile')]
        [PSTypeName('IResultObject#SMS_MDMBulkEnrollmentProfiles')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [Alias('ProfileName')]
        [string]
        ${Name},

        [Parameter(Mandatory=$true, Position=1)]
        [Alias('FilePath')]
        [string]
        ${Path},

        [int]
        ${ValidityDays},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMAadConditionalAccessPolicy
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('ExchangeOnline','SharepointOnline','SkypeForBusiness','CrmOnline')]
        [System.Object]
        ${ServicePrincipalType},

        [ValidateNotNullOrEmpty()]
        [string]
        ${AccountId},

        [ValidateNotNullOrEmpty()]
        [string]
        ${AuthorityId},

        [ValidateNotNullOrEmpty()]
        [string]
        ${IntuneClientId},

        [ValidateNotNullOrEmpty()]
        [string]
        ${IntuneResourceId},

        [Alias('Credentials','Credential')]
        [pscredential]
        ${UserCredential},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMAccessAccount
{
    [CmdletBinding(DefaultParameterSetName='SearchByApplicationName')]
    param
    (
        [Parameter(ParameterSetName='SearchByApplicationName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='SearchByApplicationId', Mandatory=$true)]
        [string]
        ${ApplicationId},

        [Parameter(ParameterSetName='SearchByBootImageName', Mandatory=$true)]
        [string]
        ${BootImageName},

        [Parameter(ParameterSetName='SearchByBootImageId', Mandatory=$true)]
        [string]
        ${BootImageId},

        [Parameter(ParameterSetName='SearchByDriverPackageName', Mandatory=$true)]
        [string]
        ${DriverPackageName},

        [Parameter(ParameterSetName='SearchByDriverPackageId', Mandatory=$true)]
        [string]
        ${DriverPackageId},

        [Parameter(ParameterSetName='SearchByOSImageName', Mandatory=$true)]
        [string]
        ${OperatingSystemImageName},

        [Parameter(ParameterSetName='SearchByOSImageId', Mandatory=$true)]
        [string]
        ${OperatingSystemImageId},

        [Parameter(ParameterSetName='SearchByOSInstallerName', Mandatory=$true)]
        [string]
        ${OperatingSystemInstallerName},

        [Parameter(ParameterSetName='SearchByOSInstallerId', Mandatory=$true)]
        [string]
        ${OperatingSystemInstallerId},

        [Parameter(ParameterSetName='SearchByPackageName', Mandatory=$true)]
        [string]
        ${PackageName},

        [Parameter(ParameterSetName='SearchByPackageId', Mandatory=$true)]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='SearchBySoftwareUpdateDeploymentPackageName', Mandatory=$true)]
        [string]
        ${SoftwareUpdateDeploymentPackageName},

        [Parameter(ParameterSetName='SearchBySoftwareUpdateDeploymentPackageId', Mandatory=$true)]
        [string]
        ${SoftwareUpdateDeploymentPackageId},

        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('DriverPackage','Application','OperatingSystemImage','OperatingSystemInstaller','Package','SoftwareUpdateDeploymentPackage','BootImage')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMAccessLicense
{
    [CmdletBinding(DefaultParameterSetName='ByName')]
    param
    (
        [Parameter(ParameterSetName='ByCount', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValue', Mandatory=$true)]
        [ValidateSet('ConfigMgr_2012_CoreServer','ConfigMgr_2012_CoreClient','ConfigMgr_2012_EndpointClient')]
        [string]
        ${LicenseName},

        [Parameter(ParameterSetName='ByCount', Mandatory=$true)]
        [switch]
        ${Count},

        [Parameter(ParameterSetName='ByName')]
        [switch]
        ${License},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMAccount
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position=0)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMActiveDirectoryForest
{
    [CmdletBinding(DefaultParameterSetName='SearchByFQDN')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('ForestId')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByFQDN')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ForestFqdn},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMActiveDirectorySite
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('SiteId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('ADSiteName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByForestName', Mandatory=$true)]
        [string[]]
        ${ForestFqdn},

        [Parameter(ParameterSetName='SearchByForestId', Mandatory=$true)]
        [string[]]
        ${ForestId},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMAdministrativeUser
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('DisplayName','LogonName','UserName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('AdminId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Alias('RoleNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RoleName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMAlert
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${TypeInstanceId},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [int]
        ${TypeId},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMAlertSubscription
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMAntimalwarePolicy
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('SettingsId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${Policy},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMApplication
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('LocalizedDisplayName','ApplicationName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CIId','CI_ID')]
        [ValidateNotNullOrEmpty()]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByModelName', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ModelName},

        [Parameter(ParameterSetName='SearchByDeploymentType', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeploymentType')]
        [PSTypeName('IResultObject#SMS_DeploymentType')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Fast},

        [switch]
        ${ShowHidden},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMApplicationCatalogWebServicePoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Alias('AllSites')]
        [switch]
        ${AllSite},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMApplicationCatalogWebsitePoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Alias('AllSites')]
        [switch]
        ${AllSite},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMApplicationDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('ApplicationName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchById')]
        [Alias('CI_ID','ApplicationID')]
        [int]
        ${SmsObjectId},

        [Parameter(ParameterSetName='SearchByDeploymentId')]
        [Alias('AssignmentUniqueID','ApplicationDeploymentID')]
        [string]
        ${DeploymentId},

        [Parameter(ParameterSetName='SearchByValue', ValueFromPipeline=$true)]
        [Alias('Application')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${InputObject},

        [switch]
        ${Summary},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMApplicationDeploymentStatus
{
    [CmdletBinding()]
    param
    (
        [System.Object]
        ${StatusType},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application','Deployment','Assignment')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMApplicationRevisionHistory
{
    [CmdletBinding(DefaultParameterSetName='SearchBySingleNameMandatory')]
    param
    (
        [Parameter(ParameterSetName='SearchBySingleNameMandatory', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchBySingleIdMandatory', Mandatory=$true)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchBySingleNameMandatory')]
        [Parameter(ParameterSetName='SearchBySingleIdMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [uint32]
        ${Revision},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMApprovalRequest
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchById', Mandatory=$true)]
        [Alias('CIUniqueId')]
        [string[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('Application')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${ApplicationName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${User},

        [Parameter(ParameterSetName='SearchByModelName', Mandatory=$true)]
        [string]
        ${ModelName},

        [Parameter(ParameterSetName='SearchByGuid', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RequestGuid},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [ValidateSet('Unknown','Requested','Canceled','Denied','Approved')]
        [System.Object]
        ${CurrentState},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMAppVVirtualEnvironment
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchById', Mandatory=$true)]
        [Alias('CIId','CI_ID')]
        [ValidateNotNullOrEmpty()]
        [int[]]
        ${Id},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMAssetIntelligenceCatalogItem
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [string]
        ${CategoryName},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CategoryId')]
        [string]
        ${Id},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMAssetIntelligenceProxy
{
    [CmdletBinding()]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMAssetIntelligenceSynchronizationPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Alias('AllSites')]
        [switch]
        ${AllSite},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMAutoDeploymentRuleDeployment
{
    [CmdletBinding(DefaultParameterSetName='ByName')]
    param
    (
        [Parameter(ParameterSetName='ByName', Position=0)]
        [Alias('AutoDeploymentName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ById', Mandatory=$true, Position=0)]
        [Alias('AutoDeploymentID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('AutoDeploymentRule')]
        [PSTypeName('IResultObject#SMS_AutoDeployment')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Get-CMSoftwareUpdateAutoDeploymentRuleDeployment -Value Get-CMAutoDeploymentRuleDeployment

function Get-CMBaseline
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByParentBaselineIdMandatory', Mandatory=$true)]
        [int]
        ${ParentBaselineId},

        [Parameter(ParameterSetName='SearchByParentBaselineNameMandatory', Mandatory=$true)]
        [string]
        ${ParentBaselineName},

        [Parameter(ParameterSetName='SearchByParentBaseline', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationBaselineInfo')]
        [System.Object]
        ${ParentBaseline},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMBaselineDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('BaselineName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchById')]
        [Alias('CI_ID','BaselineID')]
        [int]
        ${SmsObjectId},

        [Parameter(ParameterSetName='SearchByDeploymentId')]
        [Alias('AssignmentUniqueID','BaselineDeploymentID')]
        [string]
        ${DeploymentId},

        [Parameter(ParameterSetName='SearchByValue', ValueFromPipeline=$true)]
        [Alias('Baseline')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ConfigurationBaselineInfo')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Summary},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMBaselineDeploymentStatus
{
    [CmdletBinding(DefaultParameterSetName='ByValue')]
    param
    (
        [System.Object]
        ${StatusType},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Baseline','Assignment','Deployment')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMBaselineSummarizationSchedule
{
    [CmdletBinding()]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMBaselineXMLDefinition
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationBaselineInfo')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMBootImage
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMBoundary
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('Id')]
        [uint32]
        ${BoundaryId},

        [Parameter(ParameterSetName='SearchByBoundaryGroupIdMandatory', Mandatory=$true)]
        [uint32]
        ${BoundaryGroupId},

        [Parameter(ParameterSetName='SearchByBoundaryGroupNameMandatory', Mandatory=$true)]
        [string]
        ${BoundaryGroupName},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('DisplayName','Name')]
        [AllowEmptyString()]
        [string]
        ${BoundaryName},

        [Parameter(ParameterSetName='SearchByBoundaryGroup', Mandatory=$true)]
        [Alias('BoundaryGroup')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_BoundaryGroup')]
        [System.Object]
        ${BoundaryGroupInputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMBoundaryGroup
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('GroupId')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMBoundaryGroupRelationship
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchById')]
        [int]
        ${SourceGroupId},

        [Parameter(ParameterSetName='SearchById')]
        [int]
        ${DestinationGroupId},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SourceGroupName},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DestinationGroupName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMBoundaryGroupSiteSystem
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('GroupId')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${GroupName},

        [Parameter(ParameterSetName='ByValue', ValueFromPipeline=$true)]
        [Alias('BoundaryGroup')]
        [PSTypeName('IResultObject#SMS_BoundaryGroup')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMCategory
{
    [CmdletBinding(DefaultParameterSetName='GetCategoryByName')]
    param
    (
        [Parameter(ParameterSetName='GetCategoryByName')]
        [Alias('LocalizedCategoryInstanceName','CategoryName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='GetCategoryById', Mandatory=$true)]
        [Alias('CategoryInstanceUniqueid','CategoryId')]
        [string[]]
        ${Id},

        [Parameter(ParameterSetName='GetCategoryByName')]
        [System.Object]
        ${CategoryType},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMCertificate
{
    [CmdletBinding()]
    param
    (
        [Alias('SmsId')]
        [string]
        ${Id},

        [string]
        ${Thumbprint},

        [System.Object]
        ${CertificateType},

        [System.Object]
        ${KeyType},

        [switch]
        ${Fast},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMCertificateRegistrationPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Alias('AllSites')]
        [switch]
        ${AllSite},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMClientCertificatePfx
{
    [CmdletBinding()]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Thumbprint},

        [Parameter(ValueFromPipeline=$true)]
        [Alias('CertificateProfilePfx')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_PfxCertificateSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMClientHealthSummary
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Collection')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Collection;CollectionType=2')]
        [System.Object]
        ${InputObject},

        [datetime]
        ${StartDate},

        [datetime]
        ${EndDate},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMClientOperation
{
    [CmdletBinding()]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Get-CMClientOperations -Value Get-CMClientOperation

function Get-CMClientPushInstallation
{
    [CmdletBinding()]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMClientSetting
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByName')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [System.Object]
        ${Setting},

        [Parameter(ParameterSetName='SearchByName')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Alias('Type')]
        [System.Object]
        ${SettingType},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('SettingsId')]
        [string]
        ${Id},

        [switch]
        ${Raw},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMClientStatusSetting
{
    [CmdletBinding()]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMClientStatusUpdateSchedule
{
    [CmdletBinding()]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMCloudDistributionPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByGroupName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('AzureServiceId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByGroupName', Mandatory=$true)]
        [string]
        ${DistributionPointGroupName},

        [Parameter(ParameterSetName='SearchByGroupId', Mandatory=$true)]
        [string]
        ${DistributionPointGroupId},

        [Parameter(ParameterSetName='SearchByGroup', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_DistributionPointGroup')]
        [System.Object]
        ${DistributionPointGroup},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMCloudManagementGateway
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('AzureServiceId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMCloudManagementGatewayConnectionPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Alias('AllSites')]
        [switch]
        ${AllSite},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMCollection
{
    [CmdletBinding(DefaultParameterSetName='ByName')]
    param
    (
        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('CollectionId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='ByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ByDPGroupName', Mandatory=$true)]
        [string]
        ${DistributionPointGroupName},

        [Parameter(ParameterSetName='ByDPGroupId', Mandatory=$true)]
        [string]
        ${DistributionPointGroupId},

        [Parameter(ParameterSetName='ByDPGroup', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_DistributionPointGroup')]
        [System.Object]
        ${DistributionPointGroup},

        [ValidateSet('User','Device')]
        [System.Object]
        ${CollectionType},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMCollectionMember
{
    [CmdletBinding(DefaultParameterSetName='ByCollectionName')]
    param
    (
        [Parameter(ParameterSetName='ByCollectionName', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='ByCollectionId', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='ByCollection', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Collection')]
        [System.Object]
        ${InputObject},

        [Alias('ResourceName')]
        [string]
        ${Name},

        [string]
        ${SmsId},

        [int]
        ${ResourceId},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMCollectionMembershipEvaluationComponent
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='SearchByNameOrSiteCode')]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByNameOrSiteCode')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMCollectionMembershipRule
{
    [CmdletBinding(DefaultParameterSetName='ByName')]
    param
    (
        [ValidateSet('User','Device')]
        [System.Object]
        ${CollectionType},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Collection')]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [string]
        ${RuleClassName},

        [Parameter(Mandatory=$true)]
        [Alias('SearchCriteria')]
        [System.Object]
        ${ChildSearchCriteria},

        [Parameter(ValueFromRemainingArguments=$true)]
        [System.Object]
        ${ExtraArguments},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMCollectionSetting
{
    [CmdletBinding(DefaultParameterSetName='ByValue')]
    param
    (
        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${CollectionName},

        [ValidateSet('User','Device')]
        [System.Object]
        ${CollectionType},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Collection')]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMComplianceRule
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='ById', Mandatory=$true, Position=0)]
        [int]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [string]
        ${RuleName},

        [string]
        ${PropertyPath},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMComplianceSetting
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='ById', Mandatory=$true, Position=0)]
        [int]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [string]
        ${SettingName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMComponentStatusMessage
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('Component')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ComponentName},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('MachineName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ComputerName},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName')]
        [System.Object]
        ${Severity},

        [Parameter(ParameterSetName='SearchByName', Mandatory=$true)]
        [Alias('ViewingPeriod')]
        [datetime]
        ${StartTime},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMComponentStatusSetting
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ComponentName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMComputerAssociation
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('RestoreName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DestinationComputer},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('SourceName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SourceComputer},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MigrationId},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMConditionalAccessPolicy
{
    [CmdletBinding(DefaultParameterSetName='ByValue')]
    param
    (
        [Parameter(ParameterSetName='ByValue')]
        [Alias('TargetedCollections')]
        [PSTypeName('IResultObject#SMS_Collection;CollectionType=1')]
        [System.Object[]]
        ${TargetedCollection},

        [Parameter(ParameterSetName='ByValue')]
        [Alias('ExecludedCollections')]
        [PSTypeName('IResultObject#SMS_Collection;CollectionType=1')]
        [System.Object[]]
        ${ExcludedCollection},

        [Parameter(ParameterSetName='ByName')]
        [Alias('TargetedCollectionNames')]
        [string[]]
        ${TargetedCollectionName},

        [Parameter(ParameterSetName='ByName')]
        [Alias('ExecludedCollectionNames')]
        [string[]]
        ${ExcludedCollectionName},

        [Parameter(ParameterSetName='ById')]
        [Alias('TargetedCollectionIds')]
        [string[]]
        ${TargetedCollectionId},

        [Parameter(ParameterSetName='ById')]
        [Alias('ExecludedCollectionIds')]
        [string[]]
        ${ExcludedCollectionId},

        [bool]
        ${DefaultRuleOverride},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Get-CMOnPremConditionalAccessPolicy -Value Get-CMConditionalAccessPolicy

function Get-CMConfigurationItem
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${Fast},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMConfigurationItemHistory
{
    [CmdletBinding(DefaultParameterSetName='SearchByNameMandatoryNoWildcards')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByNameMandatoryNoWildcards', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByNameMandatoryNoWildcards')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [int]
        ${Revision},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMConfigurationItemXMLDefinition
{
    [CmdletBinding(DefaultParameterSetName='SearchByNameMandatory')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMConfigurationPlatform
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchById', Mandatory=$true, Position=0)]
        [Alias('CI_ID')]
        [int]
        ${Id},

        [System.Object]
        ${PlatformOption},

        [bool]
        ${IsSupported},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMConfigurationPolicy
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchById', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${AsXml},

        [Parameter(ParameterSetName='SearchByValue', Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy')]
        [System.Object]
        ${InputObject},

        [Alias('CategoryInstanceTypes')]
        [string[]]
        ${CategoryInstanceType},

        [switch]
        ${Fast},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMConfigurationPolicyDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('ConfigurationPolicyName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchById')]
        [Alias('CI_ID','ConfigurationPolicyID')]
        [int]
        ${SmsObjectId},

        [Parameter(ParameterSetName='SearchByDeploymentId')]
        [Alias('AssignmentUniqueID','ConfigurationPolicyDeploymentID')]
        [string]
        ${DeploymentId},

        [Parameter(ParameterSetName='SearchByValue', ValueFromPipeline=$true)]
        [Alias('ConfigurationPolicy')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Summary},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMConflictingRecord
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('Smsid')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('AgentName')]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMConnectionManager
{
    [CmdletBinding()]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMCorpOwnedDevice
{
    [CmdletBinding(DefaultParameterSetName='ByName')]
    param
    (
        [Parameter(ParameterSetName='ByName')]
        [Alias('DeviceName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ById')]
        [Alias('UniqueId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ById')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_MDMCorpEnrollmentProfiles')]
        [System.Object]
        ${RequestEnrollmentProfile},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDatabaseProperty
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteCode')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDatabaseReplicationLinkProperty
{
    [CmdletBinding(DefaultParameterSetName='SearchBySiteMandatory')]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteMandatory', Mandatory=$true)]
        [Alias('Site1')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ParentSiteCode},

        [Parameter(ParameterSetName='SearchBySiteMandatory', Mandatory=$true)]
        [Alias('Site2')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ChildSiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDatabaseReplicationStatus
{
    [CmdletBinding(DefaultParameterSetName='SearchBySite')]
    param
    (
        [Parameter(ParameterSetName='SearchBySite')]
        [Alias('Site2')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ChildSiteCode},

        [Parameter(ParameterSetName='SearchBySite')]
        [Alias('Site1')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ParentSiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDataWarehouseServicePoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Alias('AllSites')]
        [switch]
        ${AllSite},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDefaultBoundaryGroup
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [int]
        ${GroupId},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory', Mandatory=$true)]
        [Alias('DefaultSiteCode')]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${DeploymentId},

        [Parameter(ParameterSetName='SearchByName')]
        [System.Object]
        ${FeatureType},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ProgramName},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SoftwareName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDeploymentPackage
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentPackageName},

        [Parameter(ParameterSetName='SearchByName', Mandatory=$true)]
        [string]
        ${DistributionPointName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDeploymentStatusDetails
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CIId','CI_ID')]
        [ValidateNotNullOrEmpty()]
        [int]
        ${DeploymentTypeId},

        [Parameter(ParameterSetName='SearchByName')]
        [Parameter(ParameterSetName='SearchByDTValue')]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentTypeName},

        [Parameter(ParameterSetName='SearchByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='SearchByDTValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDeploymentTypeDependency
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Group')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDeploymentTypeDependencyGroup
{
    [CmdletBinding()]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${GroupName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${GroupId},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeploymentType')]
        [PSTypeName('IResultObject#SMS_DeploymentType')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDeploymentTypeSupersedence
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SupersedingDeploymentType')]
        [PSTypeName('IResultObject#SMS_DeploymentType')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDetectedMalware
{
    [CmdletBinding(DefaultParameterSetName='ByName')]
    param
    (
        [Parameter(ParameterSetName='ByCollection')]
        [Parameter(ParameterSetName='ByCollectionName')]
        [Parameter(ParameterSetName='ByCollectionId')]
        [Parameter(ParameterSetName='ByName')]
        [Alias('Name')]
        [string]
        ${ThreatName},

        [Parameter(ParameterSetName='ByThreatId', Mandatory=$true)]
        [string]
        ${ThreatId},

        [Parameter(ParameterSetName='ByCollection', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${Collection},

        [Parameter(ParameterSetName='ByCollectionName', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='ByCollectionId', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='ByCollection')]
        [Parameter(ParameterSetName='ByCollectionName')]
        [Parameter(ParameterSetName='ByCollectionId')]
        [Parameter(ParameterSetName='ByName')]
        [ValidateNotNull()]
        [System.Object]
        ${ThreatCategory},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDevice
{
    [CmdletBinding(DefaultParameterSetName='ByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatoryForViewInfectedClients')]
        [Parameter(ParameterSetName='SearchByNameMandatoryForViewInfectedClients')]
        [Parameter(ParameterSetName='SearchByValueMandatoryForViewInfectedClients')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${Collection},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('Id','DeviceId')]
        [int]
        ${ResourceId},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Parameter(ParameterSetName='ByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByNameMandatoryForViewInfectedClients', Mandatory=$true)]
        [string]
        ${ThreatName},

        [Parameter(ParameterSetName='SearchByIdMandatoryForViewInfectedClients', Mandatory=$true)]
        [Alias('ThreatNameId')]
        [string]
        ${ThreatId},

        [Parameter(ParameterSetName='SearchByValueMandatoryForViewInfectedClients', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Threat')]
        [PSTypeName('IResultObject#SMS_TopThreatSummary')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Fast},

        [Alias('CollectionMemberInstance')]
        [switch]
        ${CollectionMember},

        [Alias('ResourceInstance')]
        [switch]
        ${Resource},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDeviceActionState
{
    [CmdletBinding(DefaultParameterSetName='ByName')]
    param
    (
        [Parameter(Position=1)]
        [ValidateSet('Lock','PinReset','BypassActivationLock','RequestNewActivationLockCode')]
        [System.Object]
        ${Action},

        [Parameter(ParameterSetName='ById', Mandatory=$true, Position=0)]
        [Alias('ResourceId')]
        [ValidateNotNullOrEmpty()]
        [System.Nullable[int]]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Device')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Position=0)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${Fast},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Get-CMDeviceAction -Value Get-CMDeviceActionState

function Get-CMDeviceCategory
{
    [CmdletBinding(DefaultParameterSetName='ByName')]
    param
    (
        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('CategoryId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='ByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDeviceCollectionVariable
{
    [CmdletBinding(DefaultParameterSetName='SearchByNameMandatory')]
    param
    (
        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${Collection},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [string]
        ${VariableName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDeviceVariable
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory')]
    param
    (
        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Device')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${ResourceId},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${DeviceName},

        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [string]
        ${VariableName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDiscoveryMethod
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='SearchDiscoveryMethodsByName')]
        [System.Object]
        ${Name},

        [Parameter(ParameterSetName='SearchDiscoveryMethodsByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDistributionPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByGroupName', Mandatory=$true)]
        [string]
        ${DistributionPointGroupName},

        [Parameter(ParameterSetName='SearchByGroupId', Mandatory=$true)]
        [string]
        ${DistributionPointGroupId},

        [Parameter(ParameterSetName='SearchByGroup', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_DistributionPointGroup')]
        [System.Object]
        ${DistributionPointGroup},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Alias('AllSites')]
        [switch]
        ${AllSite},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDistributionPointDriveInfo
{
    [CmdletBinding(DefaultParameterSetName='BySiteCode')]
    param
    (
        [Parameter(ParameterSetName='BySiteCode', Position=0)]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='ByValue', ValueFromPipeline=$true)]
        [Alias('DistributionPoint')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Distribution Point')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDistributionPointGroup
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('GroupId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDistributionPointInfo
{
    [CmdletBinding(DefaultParameterSetName='ByName')]
    param
    (
        [Parameter(ParameterSetName='ByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='ByName')]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='ByValue', ValueFromPipeline=$true)]
        [Alias('DistributionPoint')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Distribution Point')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDistributionStatus
{
    [CmdletBinding(DefaultParameterSetName='SearchById')]
    param
    (
        [Parameter(ParameterSetName='SearchById')]
        [Alias('PackageId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDriver
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CIId','DriverId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('LocalizedDisplayName','DriverName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByDriverPackageIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [string]
        ${DriverPackageId},

        [Parameter(ParameterSetName='SearchByDriverPackageNameMandatory', Mandatory=$true)]
        [Alias('PackageName')]
        [string]
        ${DriverPackageName},

        [Parameter(ParameterSetName='SearchByDriverPackage', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DriverPackage')]
        [PSTypeName('IResultObject#SMS_DriverPackage')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMDriverPackage
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMEmailNotificationComponent
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='SearchByNameOrSiteCode')]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByNameOrSiteCode')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMEndpointProtectionPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Alias('AllSites')]
        [switch]
        ${AllSite},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMEndpointProtectionSummarizationSchedule
{
    [CmdletBinding()]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMEnrollmentPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Alias('AllSites')]
        [switch]
        ${AllSite},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMEnrollmentProxyPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Alias('AllSites')]
        [switch]
        ${AllSite},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMExchangeServer
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteCode')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchBySiteCode')]
        [Alias('Address')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ExchangeServerUrl},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMFallbackStatusPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Alias('AllSites')]
        [switch]
        ${AllSite},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMFileReplicationRoute
{
    [CmdletBinding(DefaultParameterSetName='SearchBySiteCode')]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteCode')]
        [Alias('SiteCode')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SourceSiteCode},

        [Parameter(ParameterSetName='SearchBySiteCode')]
        [Alias('DesSiteCode')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DestinationSiteCode},

        [Parameter(ParameterSetName='SearchBySiteName')]
        [Alias('SiteName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SourceSiteName},

        [Parameter(ParameterSetName='SearchBySiteName')]
        [Alias('DesSiteName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DestinationSiteName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMGlobalCondition
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CIId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [switch]
        ${AsDcmSdkObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMHardwareRequirement
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Product},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMHierarchySetting
{
    [CmdletBinding()]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMInitialModifiableSecuredCategory
{
    [CmdletBinding(DefaultParameterSetName='SearchById')]
    param
    (
        [Parameter(ParameterSetName='SearchById')]
        [Alias('CategoryId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchById')]
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ObjectTypeId},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('CategoryName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMIntuneSubscription
{
    [CmdletBinding()]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMInventoryClass
{
    [CmdletBinding()]
    param
    (
        [Alias('SMSClassID')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Alias('ClassName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [string]
        ${GroupName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMIosEnrollmentProfile
{
    [CmdletBinding(DefaultParameterSetName='ByName')]
    param
    (
        [Parameter(ParameterSetName='ByName')]
        [Alias('ProfileName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ById')]
        [Alias('ProfileId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMIPSubnet
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('SubnetId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('ADSubnetName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMMaintenanceWindow
{
    [CmdletBinding(DefaultParameterSetName='ByValue')]
    param
    (
        [Parameter(ParameterSetName='ByCollectionId', Mandatory=$true, Position=0)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='ByCollectionName', Mandatory=$true, Position=0)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Collection','Site')]
        [System.Object]
        ${InputObject},

        [Alias('Name')]
        [string]
        ${MaintenanceWindowName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMMalwareThreatCategory
{
    [CmdletBinding(DefaultParameterSetName='ByName')]
    param
    (
        [Parameter(ParameterSetName='ByName')]
        [Alias('LocalizedName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [int]
        ${Id},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMManagementPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Alias('AllSites')]
        [switch]
        ${AllSite},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMManagementPointComponent
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('Name')]
        [string]
        ${SiteSystemServerName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMMdmEnrollmentManager
{
    [CmdletBinding(DefaultParameterSetName='ByName')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true)]
        [Alias('Ids','ResourceId','ResourceIds')]
        [int[]]
        ${Id},

        [Parameter(ParameterSetName='ByName')]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Get-CMIntuneDeviceEnrollmentManager -Value Get-CMMdmEnrollmentManager

function Get-CMMigrationCollection
{
    [CmdletBinding(DefaultParameterSetName='SearchById')]
    param
    (
        [Parameter(ParameterSetName='SearchById')]
        [Alias('CollectionEntityId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('CollectionName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMMigrationEntity
{
    [CmdletBinding(DefaultParameterSetName='SearchById')]
    param
    (
        [Parameter(ParameterSetName='SearchById')]
        [Alias('EntityId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('EntityName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByOthers')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Type},

        [Parameter(ParameterSetName='SearchByOthers')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${IsActive},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMMigrationEntityDependency
{
    [CmdletBinding(DefaultParameterSetName='SearchById')]
    param
    (
        [Parameter(ParameterSetName='SearchById')]
        [Alias('EntityId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByType')]
        [Alias('DependencyType')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Type},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMMigrationJob
{
    [CmdletBinding(DefaultParameterSetName='ByName')]
    param
    (
        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('MigrationJobId')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='ByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMMigrationSource
{
    [CmdletBinding()]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMMulticastServicePoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Alias('AllSites')]
        [switch]
        ${AllSite},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMObjectLockDetails
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMObjectSecurityScope
{
    [CmdletBinding(DefaultParameterSetName='FilterByName')]
    param
    (
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='FilterByName')]
        [Alias('CategoryName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='FilterById')]
        [Alias('CategoryId')]
        [string]
        ${Id},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMOperatingSystemImage
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMOperatingSystemImageUpdateSchedule
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ImagePackage')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMOperatingSystemInstaller
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Get-CMOperatingSystemUpgradePackage -Value Get-CMOperatingSystemInstaller

function Get-CMOperatingSystemUpgradeUpdateSchedule
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_OperatingSystemInstallPackage')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Get-CMOperatingSystemUpgradePackageUpdateSchedule -Value Get-CMOperatingSystemUpgradeUpdateSchedule

function Get-CMPackage
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${Fast},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMPackageDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('PackageName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ProgramName},

        [Parameter(ParameterSetName='SearchById')]
        [Alias('SmsObjectId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='SearchByDeploymentId')]
        [Alias('AdvertisementID','PackageDeploymentID')]
        [string]
        ${DeploymentId},

        [Parameter(ParameterSetName='SearchByValue', ValueFromPipeline=$true)]
        [Alias('Package')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Summary},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMPackageDeploymentStatus
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('PackageName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByDeploymentId', Mandatory=$true)]
        [Alias('Id')]
        [string]
        ${DeploymentId},

        [Parameter(ParameterSetName='SearchByPackageId', Mandatory=$true)]
        [string]
        ${PackageId},

        [System.Object]
        ${StatusType},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Package','Advertisement','Deployment')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Get-CMDeploymentStatus -Value Get-CMPackageDeploymentStatus

function Get-CMPowerManagementSchema
{
    [CmdletBinding(DefaultParameterSetName='Peak')]
    param
    (
        [string]
        ${Name},

        [Parameter(ParameterSetName='Peak', Mandatory=$true)]
        [switch]
        ${Peak},

        [Parameter(ParameterSetName='NonPeak', Mandatory=$true)]
        [switch]
        ${NonPeak},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMProgram
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object]
        ${Package},

        [Parameter(ParameterSetName='SearchById', Mandatory=$true)]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${PackageName},

        [Parameter(ParameterSetName='SearchById')]
        [Parameter(ParameterSetName='SearchByName')]
        [Parameter(ParameterSetName='SearchByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ProgramName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMQuery
{
    [CmdletBinding(DefaultParameterSetName='ByName')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='ByName')]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMQueryResultMaximum
{
    [CmdletBinding()]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMReportingServicePoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Alias('AllSites')]
        [switch]
        ${AllSite},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMResource
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position=0)]
        [Alias('Id')]
        [int]
        ${ResourceId},

        [switch]
        ${Fast},

        [System.Object]
        ${ResourceType},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMResultantCollection
{
    [CmdletBinding(DefaultParameterSetName='SearchById')]
    param
    (
        [Parameter(ParameterSetName='SearchById', Mandatory=$true, Position=0)]
        [uint32]
        ${ResourceId},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Resource','Device','User')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMResultantDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchById')]
    param
    (
        [Parameter(ParameterSetName='SearchById', Mandatory=$true, Position=0)]
        [uint32]
        ${ResourceId},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Resource','Device','User')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMResultantSettings
{
    [CmdletBinding(DefaultParameterSetName='ByName')]
    param
    (
        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('DeviceName','UserName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('ResourceId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Device','User')]
        [System.Object]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${SettingsType},

        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Setting},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMScript
{
    [CmdletBinding()]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${Author},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ScriptName},

        [switch]
        ${Fast},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSecurityRole
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('RoleName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('RoleId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSecurityScope
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('CategoryName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CategoryId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMServiceConnectionPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Alias('AllSites')]
        [switch]
        ${AllSite},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSite
{
    [CmdletBinding(DefaultParameterSetName='SearchByNameOrSiteCode')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameOrSiteCode', Position=0)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByNameOrSiteCode')]
        [Alias('SiteName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSiteComponent
{
    [CmdletBinding()]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${ComponentName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSiteDefinition
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSiteFeature
{
    [CmdletBinding()]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${Prerelease},

        [switch]
        ${Production},

        [switch]
        ${Fast},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSiteInstallStatus
{
    [CmdletBinding(DefaultParameterSetName='SearchBySiteCode')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('SiteInstallId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchBySiteCode')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSiteMaintenanceTask
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('ItemName','MaintenanceTaskName','TaskName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSiteRole
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Alias('AllSites')]
        [switch]
        ${AllSite},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RoleName},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSiteStatusMessage
{
    [CmdletBinding()]
    param
    (
        [Alias('ComputerNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${ComputerName},

        [Alias('Severities')]
        [ValidateSet('All','Error','Information','Warning')]
        [System.Object[]]
        ${Severity},

        [Alias('SiteCodes')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${SiteCode},

        [Alias('ViewingPeriod')]
        [datetime]
        ${StartDateTime},

        [Alias('MessageIds')]
        [int[]]
        ${MessageId},

        [Alias('ModuleName','Modules','ModuleNames')]
        [string[]]
        ${Module},

        [Alias('ComponentName','Components','ComponentNames')]
        [string[]]
        ${Component},

        [hashtable]
        ${FilterHashtable},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSiteSummaryTask
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('SummaryTaskName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${TaskName},

        [Parameter(ParameterSetName='SearchById', Position=0)]
        [Alias('SummaryTaskId')]
        [int]
        ${Id},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSiteSystemServer
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Alias('AllSites')]
        [switch]
        ${AllSite},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSiteUpdate
{
    [CmdletBinding()]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${Fast},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSiteUpdateHistory
{
    [CmdletBinding()]
    param
    (
        [Alias('DateReleased')]
        [datetime]
        ${StartDate},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSiteUpdateInstallStatus
{
    [CmdletBinding()]
    param
    (
        [switch]
        ${Complete},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_CM_UpdatePackages')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('PackageName')]
        [string]
        ${Name},

        [ValidateSet('All','Download','Installation','Prerequisite','Simple','InstallationAll','PostInstallation','Replication')]
        [System.Object]
        ${Step},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSoftwareDistributionComponent
{
    [CmdletBinding(DefaultParameterSetName='SearchBySiteOrName')]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteOrName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchBySiteOrName')]
        [string[]]
        ${SiteSystemServerName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSoftwareInventory
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('CommonName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('SoftwareKey')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSoftwareMeteringRule
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('RuleId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [string]
        ${ProductName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSoftwareMeteringSetting
{
    [CmdletBinding()]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSoftwareUpdate
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByName')]
        [datetime]
        ${DatePostedMin},

        [Parameter(ParameterSetName='SearchByName')]
        [datetime]
        ${DatePostedMax},

        [Parameter(ParameterSetName='SearchByName')]
        [datetime]
        ${DateRevisedMin},

        [Parameter(ParameterSetName='SearchByName')]
        [datetime]
        ${DateRevisedMax},

        [Parameter(ParameterSetName='SearchByName')]
        [System.Object]
        ${Severity},

        [Parameter(ParameterSetName='SearchByName')]
        [bool]
        ${IsDeployed},

        [Parameter(ParameterSetName='SearchByName')]
        [bool]
        ${IsContentProvisioned},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('EulaExists')]
        [bool]
        ${EulaExist},

        [Parameter(ParameterSetName='SearchByName')]
        [bool]
        ${IsExpired},

        [Parameter(ParameterSetName='SearchByName')]
        [bool]
        ${IsOfflineServiceable},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('CategoryNames')]
        [string[]]
        ${CategoryName},

        [Parameter(ParameterSetName='SearchByName')]
        [bool]
        ${IsSuperseded},

        [Parameter(ParameterSetName='SearchByName')]
        [bool]
        ${IsLatest},

        [Parameter(ParameterSetName='SearchByName')]
        [bool]
        ${IsUserDefined},

        [Parameter(ParameterSetName='SearchByName', ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_UpdateCategoryInstance')]
        [System.Object[]]
        ${Category},

        [Parameter(ParameterSetName='SearchByUpdateGroupIdMandatory', Mandatory=$true)]
        [string[]]
        ${UpdateGroupId},

        [Parameter(ParameterSetName='SearchByUpdateGroupNameMandatory', Mandatory=$true)]
        [string[]]
        ${UpdateGroupName},

        [Parameter(ParameterSetName='SearchByName')]
        [string]
        ${ArticleId},

        [Parameter(ParameterSetName='SearchByName')]
        [string]
        ${BulletinId},

        [Parameter(ParameterSetName='SearchByUpdateGroup', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AuthorizationList')]
        [System.Object]
        ${UpdateGroup},

        [Parameter(ParameterSetName='SearchByName')]
        [switch]
        ${OnlyExpired},

        [Parameter(ParameterSetName='SearchById', Mandatory=$true)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('IncludeUpgrades')]
        [switch]
        ${IncludeUpgrade},

        [switch]
        ${Fast},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSoftwareUpdateAutoDeploymentRule
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('AutoDeploymentId')]
        [ValidateNotNullOrEmpty()]
        [int[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [System.Nullable[bool]]
        ${IsServicingPlan},

        [switch]
        ${Fast},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Get-CMAutoDeploymentRule -Value Get-CMSoftwareUpdateAutoDeploymentRule

function Get-CMSoftwareUpdateBasedClientInstallation
{
    [CmdletBinding()]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSoftwareUpdateCategory
{
    [CmdletBinding(DefaultParameterSetName='ByName')]
    param
    (
        [Parameter(ParameterSetName='ByName')]
        [Alias('LocalizedCategoryInstanceName','CategoryName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('CategoryInstanceID')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='ByName')]
        [Alias('CategoryTypeName')]
        [string]
        ${TypeName},

        [Parameter(ParameterSetName='ByUniqueId', Mandatory=$true)]
        [Alias('CategoryInstance_UniqueID')]
        [string]
        ${UniqueId},

        [switch]
        ${Fast},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSoftwareUpdateDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('SoftwareUpdateName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchById')]
        [Alias('CI_ID','SoftwareUpdateID')]
        [int]
        ${SmsObjectId},

        [Parameter(ParameterSetName='SearchByDeploymentId')]
        [Alias('AssignmentUniqueID','SoftwareUpdateDeploymentID')]
        [string]
        ${DeploymentId},

        [Parameter(ParameterSetName='SearchByValue', ValueFromPipeline=$true)]
        [Alias('SoftwareUpdate')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SoftwareUpdate')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Summary},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSoftwareUpdateDeploymentPackage
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSoftwareUpdateDeploymentStatus
{
    [CmdletBinding(DefaultParameterSetName='ByValue')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SoftwareUpdate','Assignment','Deployment')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSoftwareUpdateGroup
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CIId','CI_ID')]
        [ValidateNotNullOrEmpty()]
        [int[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSoftwareUpdateLicense
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SoftwareUpdate')]
        [System.Object]
        ${InputObject},

        [System.Object]
        ${EulaAcceptance},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSoftwareUpdatePoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Alias('AllSites')]
        [switch]
        ${AllSite},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSoftwareUpdatePointComponent
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='SearchByNameOrSiteCode')]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByNameOrSiteCode')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByNameOrSiteCode')]
        [switch]
        ${WsusSyncManager},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSoftwareUpdateSummarizationSchedule
{
    [CmdletBinding()]
    param
    (
        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSoftwareUpdateSyncStatus
{
    [CmdletBinding()]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMStateMigrationPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByName', Position=0)]
        [Alias('Name','ServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Alias('AllSites')]
        [switch]
        ${AllSite},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMStatusFilterRule
{
    [CmdletBinding()]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMStatusMessageQuery
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('QueryId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [string]
        ${Name},

        [Alias('ShowMessages')]
        [switch]
        ${ShowMessage},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMStatusReportingComponent
{
    [CmdletBinding()]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMStatusSummarizer
{
    [CmdletBinding(DefaultParameterSetName='SearchBySiteCodeMandatory')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameOrSiteCode')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByNameOrSiteCode')]
        [Alias('SiteName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory', Mandatory=$true)]
        [System.Object]
        ${StatusSummarizerType},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMSupportedPlatform
{
    [CmdletBinding()]
    param
    (
        [switch]
        ${Fast},

        [Alias('OSMaxVersion')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MaxVersion},

        [Alias('OSMinVersion')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MinVersion},

        [Alias('DisplayText')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Alias('OSPlatform')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Platform},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Get-CMSupportedPlatforms -Value Get-CMSupportedPlatform

function Get-CMTaskSequence
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId','Id')]
        [string]
        ${TaskSequencePackageId},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMTaskSequenceDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('TaskSequenceName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchById')]
        [Alias('SmsObjectId','TaskSequencePackageID')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='SearchByDeploymentId')]
        [Alias('AdvertisementID','TaskSequenceDeploymentID')]
        [string]
        ${DeploymentId},

        [Parameter(ParameterSetName='SearchByValue', ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Summary},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMTaskSequenceGroup
{
    [CmdletBinding(DefaultParameterSetName='ByValue')]
    param
    (
        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMTaskSequenceStep
{
    [CmdletBinding(DefaultParameterSetName='ByValue')]
    param
    (
        [string]
        ${ActionClassName},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMTaskSequenceStepCondition
{
    [CmdletBinding(DefaultParameterSetName='ByValue')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequenceStep')]
        [PSTypeName('IResultObject#SMS_TaskSequence_Step')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMTrackedObject
{
    [CmdletBinding()]
    param
    (
        [Parameter(ValueFromPipeline=$true)]
        [System.IDisposable]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMTrustedRootCertificate
{
    [CmdletBinding()]
    param
    (
        [Alias('CertificationAuthorityServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CAServerName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMTSStepConditionFile
{
    [CmdletBinding(DefaultParameterSetName='ByValue')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequenceStep')]
        [PSTypeName('IResultObject#SMS_TaskSequence_Step')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Get-CMTaskSequenceStepConditionFile -Value Get-CMTSStepConditionFile

function Get-CMTSStepConditionFolder
{
    [CmdletBinding(DefaultParameterSetName='ByValue')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequenceStep')]
        [PSTypeName('IResultObject#SMS_TaskSequence_Step')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Get-CMTaskSequenceStepConditionFolder -Value Get-CMTSStepConditionFolder

function Get-CMTSStepConditionIfStatement
{
    [CmdletBinding(DefaultParameterSetName='ByValue')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequenceStep')]
        [PSTypeName('IResultObject#SMS_TaskSequence_Step')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Get-CMTaskSequenceStepConditionIfStatement -Value Get-CMTSStepConditionIfStatement

function Get-CMTSStepConditionOperatingSystem
{
    [CmdletBinding(DefaultParameterSetName='ByValue')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequenceStep')]
        [PSTypeName('IResultObject#SMS_TaskSequence_Step')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Get-CMTaskSequenceStepConditionOperatingSystem -Value Get-CMTSStepConditionOperatingSystem

function Get-CMTSStepConditionQueryWmi
{
    [CmdletBinding(DefaultParameterSetName='ByValue')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequenceStep')]
        [PSTypeName('IResultObject#SMS_TaskSequence_Step')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Get-CMTaskSequenceStepConditionQueryWMI -Value Get-CMTSStepConditionQueryWMI

function Get-CMTSStepConditionRegistry
{
    [CmdletBinding(DefaultParameterSetName='ByValue')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequenceStep')]
        [PSTypeName('IResultObject#SMS_TaskSequence_Step')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Get-CMTaskSequenceStepConditionRegistry -Value Get-CMTSStepConditionRegistry

function Get-CMTSStepConditionSoftware
{
    [CmdletBinding(DefaultParameterSetName='ByValue')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequenceStep')]
        [PSTypeName('IResultObject#SMS_TaskSequence_Step')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Get-CMTaskSequenceStepConditionSoftware -Value Get-CMTSStepConditionSoftware

function Get-CMTSStepConditionVariable
{
    [CmdletBinding(DefaultParameterSetName='ByValue')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequenceStep')]
        [PSTypeName('IResultObject#SMS_TaskSequence_Step')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Get-CMTaskSequenceStepConditionVariable -Value Get-CMTSStepConditionVariable

function Get-CMUpdateGroupDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('UpdateGroupName','SoftwareUpdateGroupName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchById')]
        [Alias('CI_ID','UpdateGroupID','SoftwareUpdateGroupID')]
        [int]
        ${SmsObjectId},

        [Parameter(ParameterSetName='SearchByDeploymentId')]
        [Alias('AssignmentUniqueID','UpdateGroupDeploymentID','SoftwareUpdateGroupDeploymentID')]
        [string]
        ${DeploymentId},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('UpdateGroupDeploymentName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentName},

        [Parameter(ParameterSetName='SearchByValue', ValueFromPipeline=$true)]
        [Alias('UpdateGroup','SoftwareUpdateGroup')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_AuthorizationList')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Summary},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMUser
{
    [CmdletBinding(DefaultParameterSetName='ByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Collection')]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('Id','UserId')]
        [int]
        ${ResourceId},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMUserDeviceAffinity
{
    [CmdletBinding(DefaultParameterSetName='SearchByUserNameMandatory')]
    param
    (
        [Parameter(ParameterSetName='SearchByUserNameMandatory', Mandatory=$true)]
        [Alias('UniqueUserName')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${UserName},

        [Parameter(ParameterSetName='SearchByDeviceNameMandatory', Mandatory=$true)]
        [Alias('ResourceName')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${DeviceName},

        [Parameter(ParameterSetName='SearchByDeviceIdMandatory', Mandatory=$true)]
        [Alias('ResourceId')]
        [ValidateNotNullOrEmpty()]
        [int[]]
        ${DeviceId},

        [Parameter(ParameterSetName='SearchByUserIdMandatory', Mandatory=$true)]
        [int[]]
        ${UserId},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMUserDeviceAffinityRequest
{
    [CmdletBinding(DefaultParameterSetName='SearchByNameMandatory')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserId},

        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceName},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceId},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMVhd
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [string[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMWindowsEnrollmentProfile
{
    [CmdletBinding()]
    param
    (
        [Parameter(Position=0)]
        [Alias('ProfileName')]
        [string]
        ${Name},

        [System.Object]
        ${Authority},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMWindowsEnrollmentProfilePackage
{
    [CmdletBinding(DefaultParameterSetName='ByName')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Profile')]
        [PSTypeName('IResultObject#SMS_MDMBulkEnrollmentProfiles')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByName')]
        [string]
        ${ProfileName},

        [Alias('PackageName')]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Get-CMWinPEOptionalComponentInfo
{
    [CmdletBinding(DefaultParameterSetName='SearchByName')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchById', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UniqueId},

        [Parameter(ParameterSetName='SearchByName', Mandatory=$true)]
        [ValidateSet('X64','X86')]
        [string]
        ${Architecture},

        [Parameter(ParameterSetName='SearchByName')]
        [uint32]
        ${LanguageId},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Import-CMAntimalwarePolicy
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${PassThru},

        [Parameter(Mandatory=$true, Position=0)]
        [Alias('ImportFilePath')]
        [string]
        ${Path},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Import-CMApplication
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${FilePath},

        [System.Object]
        ${ImportActionType},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Import-CMBaseline
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ImportByFileName', Mandatory=$true)]
        [string[]]
        ${FileName},

        [Parameter(ParameterSetName='ImportByFileName')]
        [switch]
        ${DuplicateWhileImporting},

        [Parameter(ParameterSetName='ImportByFileName')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Import-CMCertificate
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByFile', Mandatory=$true, Position=0)]
        [string]
        ${Path},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [X509Certificate]
        ${X509Certificate},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Import-CMClientCertificatePfx
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('CertificatePath')]
        [string]
        ${Path},

        [Parameter(Mandatory=$true)]
        [string]
        ${UserName},

        [securestring]
        ${Password},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_PfxCertificateSettings')]
        [System.Object]
        ${CertificateProfilePfx},

        [switch]
        ${PassThru},

        [switch]
        ${ForSmimeEncryption},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Import-CMCollection
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true, Position=0)]
        [Alias('Path')]
        [string]
        ${ImportFilePath},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Import-CMDeviceCollection Import-CMUserCollection -Value Import-CMCollection Import-CMCollection

function Import-CMComputerInformation
{
    [CmdletBinding(DefaultParameterSetName='ImportSingleComputer', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ImportSingleComputer')]
        [Parameter(ParameterSetName='ImportComputerByUsingFile')]
        [Alias('CollectionNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${CollectionName},

        [Parameter(ParameterSetName='ImportSingleComputer', Mandatory=$true)]
        [string]
        ${ComputerName},

        [Parameter(ParameterSetName='ImportComputerByUsingFile')]
        [Alias('EnableColumnHeadings')]
        [bool]
        ${EnableColumnHeading},

        [Parameter(ParameterSetName='ImportComputerByUsingFile', Mandatory=$true)]
        [string]
        ${FileName},

        [Parameter(ParameterSetName='ImportSingleComputer')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MacAddress},

        [Parameter(ParameterSetName='ImportSingleComputer')]
        [Alias('SMBIOSID')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SMBiosGuid},

        [Parameter(ParameterSetName='ImportSingleComputer')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SourceComputerName},

        [Parameter(ParameterSetName='ImportComputerByUsingFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${VariableName},

        [Parameter(ParameterSetName='ImportSingleComputer')]
        [Alias('WtgUniqueKey')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${WindowsToGoUniqueKey},

        [Parameter(ParameterSetName='ImportSingleComputer')]
        [Parameter(ParameterSetName='ImportComputerByUsingFile')]
        [Alias('CollectionIds')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${CollectionId},

        [Parameter(ParameterSetName='ImportSingleComputer', ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ImportComputerByUsingFile', ValueFromPipeline=$true)]
        [Alias('Collection','Collections')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object[]]
        ${InputObject},

        [Parameter(ParameterSetName='ImportSingleComputer')]
        [Alias('UserNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${UserName},

        [Parameter(ParameterSetName='ImportSingleComputer')]
        [System.Object]
        ${UserAccountMigrationBehavior},

        [Parameter(ParameterSetName='ImportSingleComputer')]
        [switch]
        ${MergeIfExist},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Import-CMConfigurationItem
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ImportByFileName', Mandatory=$true)]
        [string[]]
        ${FileName},

        [Parameter(ParameterSetName='ImportByFileName')]
        [ValidateNotNullOrEmpty()]
        [switch]
        ${DuplicateWhileImporting},

        [Parameter(ParameterSetName='ImportByFileName')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Import-CMDriver
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('UncFileLocation','Location')]
        [string]
        ${Path},

        [switch]
        ${ImportFolder},

        [System.Object]
        ${ImportDuplicateDriverOption},

        [bool]
        ${EnableAndAllowInstall},

        [Alias('AdministrativeCategories')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_CategoryInstance')]
        [System.Object[]]
        ${AdministrativeCategory},

        [Alias('SupportedPlatformNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${SupportedPlatformName},

        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Alias('DriverPackages')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_DriverPackage')]
        [System.Object[]]
        ${DriverPackage},

        [Alias('UpdateDistributionPointsforDriverPackage')]
        [bool]
        ${UpdateDriverPackageDistributionPoint},

        [Alias('BootImagePackages')]
        [PSTypeName('IResultObject#SMS_BootImagePackage')]
        [System.Object[]]
        ${BootImagePackage},

        [Alias('UpdateDistributionPointsForBootImagePackage','UpdateBootImageDistributionPoints')]
        [bool]
        ${UpdateBootImageDistributionPoint},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Import-CMDriverPackage
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ImportFilePath},

        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${ImportActionType},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Import-CMPackage
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ImportFilePath},

        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${ImportActionType},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Import-CMQuery
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true, Position=0)]
        [Alias('Path')]
        [string]
        ${ImportFilePath},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Import-CMSecurityRole
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('OverwrittenExisted')]
        [bool]
        ${Overwrite},

        [Parameter(Mandatory=$true)]
        [Alias('RolesXml','Path','FileName')]
        [string]
        ${XmlFileName},

        [ValidateLength(1, 256)]
        [string]
        ${NewRoleName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Import-CMSoftwareLicense
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ImportSoftwareLicense', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MlsFilePath},

        [Parameter(ParameterSetName='ImportSoftwareLicense', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${ImportType},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Import-CMTaskSequence
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${IgnoreDependency},

        [System.Object]
        ${ImportActionType},

        [Parameter(Mandatory=$true)]
        [Alias('ImportFilePath')]
        [string]
        ${Path},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Import-CMUserDeviceAffinity
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ImportByFileName')]
        [Alias('EnableColumnHeadings')]
        [bool]
        ${EnableColumnHeading},

        [Parameter(ParameterSetName='ImportByFileName', Mandatory=$true)]
        [ValidateLength(1, 256)]
        [string]
        ${FileName},

        [Alias('MappingOrders')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${MappingOrder},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Import-CMWirelessProfileConfigurationItem
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [string]
        ${Description},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(Mandatory=$true)]
        [Alias('WifiProfileXmlPath')]
        [string]
        ${Path},

        [System.Object]
        ${Severity},

        [Parameter(Mandatory=$true)]
        [Alias('SupportedPlatforms')]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Install-CMClient
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Collection','Device')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByDeviceNameMandatory', Mandatory=$true)]
        [string]
        ${DeviceName},

        [Parameter(ParameterSetName='SearchByDeviceIdMandatory', Mandatory=$true)]
        [string]
        ${DeviceId},

        [Parameter(ParameterSetName='SearchByDeviceIdMandatory')]
        [Parameter(ParameterSetName='SearchByDeviceNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [bool]
        ${IncludeDomainController},

        [Parameter(ParameterSetName='SearchByDeviceIdMandatory')]
        [Parameter(ParameterSetName='SearchByDeviceNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [bool]
        ${AlwaysInstallClient},

        [Parameter(ParameterSetName='SearchByDeviceIdMandatory')]
        [Parameter(ParameterSetName='SearchByDeviceNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [bool]
        ${ForceReinstall},

        [Parameter(ParameterSetName='SearchByDeviceIdMandatory')]
        [Parameter(ParameterSetName='SearchByDeviceNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Install-CMSiteUpdate
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_CM_UpdatePackages')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${SkipPrerequisiteCheck},

        [switch]
        ${PassThru},

        [Alias('PreproductionClientCollection')]
        [PSTypeName('IResultObject#SMS_Collection;CollectionType=2')]
        [System.Object]
        ${PreproductionCollection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMAnalyzePackage
{
    [CmdletBinding(DefaultParameterSetName='SearchByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('IDs','PackageID','PackageIDs')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('Names','PackageName','PackageNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Name},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true)]
        [Alias('Packages')]
        [PSTypeName('IResultObject#SMS_Package')]
        [ValidateNotNull()]
        [System.Object[]]
        ${Package},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMBaselineSummarization
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMClientAction
{
    [CmdletBinding(DefaultParameterSetName='SearchByDeviceValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByDeviceNameMandatory', Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${DeviceName},

        [Parameter(ParameterSetName='SearchByDeviceIdMandatory', Mandatory=$true)]
        [Alias('ResourceId')]
        [string]
        ${DeviceId},

        [Parameter(ParameterSetName='SearchByDeviceValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${Device},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('DeviceCollectionName')]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('DeviceCollectionId')]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeviceCollection')]
        [PSTypeName('IResultObject#SMS_Collection;CollectionType=2')]
        [System.Object]
        ${Collection},

        [Parameter(ParameterSetName='SearchByDeviceNameMandatory')]
        [Parameter(ParameterSetName='SearchByDeviceIdMandatory')]
        [Parameter(ParameterSetName='SearchByDeviceValueMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [ValidateSet('RequestMachinePolicyNow','RequestUsersPolicyNow')]
        [System.Object]
        ${NotificationType},

        [Parameter(ParameterSetName='SearchByDeviceNameMandatory')]
        [Parameter(ParameterSetName='SearchByDeviceIdMandatory')]
        [Parameter(ParameterSetName='SearchByDeviceValueMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [System.Object]
        ${ActionType},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Invoke-CMClientNotification -Value Invoke-CMClientAction

function Invoke-CMClientOperationSummarization
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMCollectionUpdate
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Invoke-CMDeviceCollectionUpdate Invoke-CMUserCollectionUpdate -Value Invoke-CMCollectionUpdate Invoke-CMCollectionUpdate

function Invoke-CMContentRedistribution
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByDP')]
        [Parameter(ParameterSetName='SearchByValue')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${DistributionPointName},

        [Parameter(ParameterSetName='SearchByDP')]
        [Parameter(ParameterSetName='SearchByValue')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${DistributionPointGroupName},

        [Parameter(ParameterSetName='SearchByDPName')]
        [Parameter(ParameterSetName='SearchByValue')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${DistributionPoint},

        [Parameter(ParameterSetName='SearchByDPName')]
        [Parameter(ParameterSetName='SearchByValue')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${DistributionPointGroup},

        [Parameter(ParameterSetName='SearchByValue', ValueFromPipeline=$true)]
        [Alias('Application','Package','BootImage','DeploymentPackage','SoftwareUpdatePackage','DriverPackage','ImagePackage','OperatingSystemInstaller','TaskSequence')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMContentValidation
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory_Application', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application','Package','BootImage','DeploymentPackage','SoftwareUpdatePackage','DriverPackage','ImagePackage','OperatingSystemInstaller','TaskSequence')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByIdMandatory_Application', Mandatory=$true)]
        [string[]]
        ${ApplicationId},

        [Parameter(ParameterSetName='SearchByNameMandatory_Application', Mandatory=$true)]
        [string[]]
        ${ApplicationName},

        [Parameter(ParameterSetName='SearchByIdMandatory_BootImage', Mandatory=$true)]
        [Alias('BootImageIds')]
        [string[]]
        ${BootImageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_BootImage', Mandatory=$true)]
        [Alias('BootImageNames')]
        [string[]]
        ${BootImageName},

        [string[]]
        ${CollectionName},

        [Parameter(ParameterSetName='SearchByIdMandatory_DeploymentPackage', Mandatory=$true)]
        [Alias('DeploymentPackageIds')]
        [string[]]
        ${DeploymentPackageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_DeploymentPackage', Mandatory=$true)]
        [Alias('DeploymentPackageNames')]
        [string[]]
        ${DeploymentPackageName},

        [Parameter(ParameterSetName='SearchByIdMandatory_Application')]
        [Parameter(ParameterSetName='SearchByNameMandatory_Application')]
        [Parameter(ParameterSetName='SearchByValueMandatory_Application')]
        [Alias('DisableDetectAssociatedContentDependencies')]
        [switch]
        ${DisableContentDependencyDetection},

        [string[]]
        ${DistributionPointGroupName},

        [string[]]
        ${DistributionPointName},

        [Parameter(ParameterSetName='SearchByIdMandatory_DriverPackage', Mandatory=$true)]
        [Alias('DriverPackageIds')]
        [string[]]
        ${DriverPackageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_DriverPackage', Mandatory=$true)]
        [Alias('DriverPackageNames')]
        [string[]]
        ${DriverPackageName},

        [Parameter(ParameterSetName='SearchByValueMandatory_OperatingSystemImage', Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_ImagePackage')]
        [System.Object]
        ${OperatingSystemImage},

        [Parameter(ParameterSetName='SearchByIdMandatory_OperatingSystemImage', Mandatory=$true)]
        [Alias('OperatingSystemImageIds')]
        [string[]]
        ${OperatingSystemImageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_OperatingSystemImage', Mandatory=$true)]
        [Alias('OperatingSystemImageNames')]
        [string[]]
        ${OperatingSystemImageName},

        [Parameter(ParameterSetName='SearchByIdMandatory_OperatingSystemInstaller', Mandatory=$true)]
        [Alias('OperatingSystemInstallerIds')]
        [string[]]
        ${OperatingSystemInstallerId},

        [Parameter(ParameterSetName='SearchByNameMandatory_OperatingSystemInstaller', Mandatory=$true)]
        [Alias('OperatingSystemImageInstallerNames')]
        [string[]]
        ${OperatingSystemInstallerName},

        [Parameter(ParameterSetName='SearchByIdMandatory_Package', Mandatory=$true)]
        [Alias('PackageIds')]
        [string[]]
        ${PackageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_Package', Mandatory=$true)]
        [Alias('PackageNames')]
        [string[]]
        ${PackageName},

        [Parameter(ParameterSetName='SearchByIdMandatory_TaskSequence', Mandatory=$true)]
        [Alias('TaskSequenceIds')]
        [string[]]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='SearchByNameMandatory_TaskSequence', Mandatory=$true)]
        [Alias('TaskSequenceNames')]
        [string[]]
        ${TaskSequenceName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMConvertPackage
{
    [CmdletBinding(DefaultParameterSetName='SearchByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('IDs','PackageID','PackageIDs')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('Names','PackageName','PackageNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Name},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true)]
        [Alias('Packages')]
        [PSTypeName('IResultObject#SMS_Package')]
        [ValidateNotNull()]
        [System.Object[]]
        ${Package},

        [switch]
        ${AutoAnalyze},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMDeploymentSummarization
{
    [CmdletBinding(DefaultParameterSetName='SearchByCollectionIdMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${DeploymentId},

        [Parameter(ParameterSetName='SearchByCollectionIdMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='SearchByCollectionNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SoftwareName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Collection','DeploymentSummary')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMDeviceAction
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ById', Mandatory=$true, Position=0)]
        [Alias('ResourceId')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Device')]
        [PSTypeName('IResultObject#SMS_CollectionMember;ResourceType=5')]
        [System.Object]
        ${InputObject},

        [Parameter(Mandatory=$true, Position=1)]
        [ValidateSet('Lock','PinReset','BypassActivationLock','RequestNewActivationLockCode')]
        [System.Object]
        ${Action},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMDeviceRetire
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('DeviceName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('DeviceId','ResourceId')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Device')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${Cancel},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMDeviceWipe
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('DeviceName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('ResourceId','DeviceId')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Device')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${Cancel},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMEndpointProtectionScan
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByDeviceNameMandatory', Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${DeviceName},

        [Parameter(ParameterSetName='SearchByDeviceIdMandatory', Mandatory=$true)]
        [Alias('ResourceID')]
        [string]
        ${DeviceId},

        [Parameter(ParameterSetName='SearchByDeviceValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_CombinedDeviceResources')]
        [System.Object]
        ${Device},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${DeviceCollectionName},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${DeviceCollectionId},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${DeviceCollection},

        [Parameter(ParameterSetName='SearchByDeviceNameMandatory')]
        [Parameter(ParameterSetName='SearchByDeviceIdMandatory')]
        [Parameter(ParameterSetName='SearchByDeviceValueMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [System.Object]
        ${ScanType},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMEndpointProtectionSummarization
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMForestDiscovery
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMGroupDiscovery
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMPromotePreProductionClient
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMQuery
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Query')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('QueryId')]
        [string]
        ${Id},

        [string]
        ${LimitToCollectionId},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMRemoteControl
{
    [CmdletBinding(DefaultParameterSetName='InvokeDeviceByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='InvokeSiteStatusByNameMandatory', Mandatory=$true)]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='InvokeSiteStatusByNameMandatory')]
        [Alias('Role')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemRole},

        [Parameter(ParameterSetName='InvokeSiteStatusByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='InvokeDeviceByNameMandatory', Mandatory=$true)]
        [string]
        ${DeviceName},

        [Parameter(ParameterSetName='InvokeDeviceByIdMandatory', Mandatory=$true)]
        [string]
        ${DeviceId},

        [Parameter(ParameterSetName='InvokeDeviceByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Device','SiteStatus')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMReport
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SrsServerName},

        [Parameter(Mandatory=$true)]
        [string]
        ${ReportPath},

        [ValidateNotNullOrEmpty()]
        [hashtable]
        ${ReportParameter},

        [ValidateNotNullOrEmpty()]
        [string]
        ${OutputFormat},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMScript
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${Collection},

        [string]
        ${CollectionId},

        [string]
        ${CollectionName},

        [Alias('Devices')]
        [System.Object[]]
        ${Device},

        [Parameter(ParameterSetName='ByInputObject', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Scripts')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [Parameter(ParameterSetName='ByGuid', Mandatory=$true)]
        [string]
        ${ScriptGuid},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMSecondarySiteUpgrade
{
    [CmdletBinding(DefaultParameterSetName='SearchBySiteCodeMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory', Mandatory=$true)]
        [Alias('SiteCode')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SecondarySiteCode},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SecondarySiteName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Site;Type=2')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMSitePromotePreproductionClient
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMSiteUpdateCheck
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMSiteUpdateDownload
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_CM_UpdatePackages')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMSiteUpdatePrerequisiteCheck
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_CM_UpdatePackages')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMSoftwareUpdateAutoDeploymentRule
{
    [CmdletBinding(DefaultParameterSetName='SearchByIdMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('AutoDeploymentId')]
        [int[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AutoDeployment')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMSoftwareUpdateSummarization
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMSystemDiscovery
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMUserDiscovery
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMWmiMethod
{
    [CmdletBinding(DefaultParameterSetName='ByClass', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByInstance', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Instance')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByClass', Mandatory=$true, Position=0)]
        [string]
        ${ClassName},

        [Parameter(Mandatory=$true)]
        [string]
        ${MethodName},

        [Alias('Parameters')]
        [hashtable]
        ${Parameter},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Invoke-CMWmiQuery
{
    [CmdletBinding(DefaultParameterSetName='ByWql', ConfirmImpact='Low')]
    param
    (
        [Parameter(ParameterSetName='BySearch', Mandatory=$true)]
        [System.Object]
        ${Search},

        [Parameter(ParameterSetName='BySearch', Mandatory=$true)]
        [string]
        ${ClassName},

        [Alias('Options')]
        [System.Object]
        ${Option},

        [Parameter(ParameterSetName='ByWql', Mandatory=$true, Position=0)]
        [string]
        ${Query},

        [hashtable]
        ${Context},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Lock-CMObject
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [System.Object[]]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Merge-CMAntimalwarePolicy
{
    [CmdletBinding(DefaultParameterSetName='MergePolicyById', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='MergePolicyById', Mandatory=$true)]
        [string]
        ${BasePolicyId},

        [Parameter(ParameterSetName='MergePolicyById', Mandatory=$true)]
        [string[]]
        ${OtherPolicyId},

        [Parameter(ParameterSetName='MergePolicyByName', Mandatory=$true)]
        [string]
        ${BasePolicyName},

        [Parameter(ParameterSetName='MergePolicyByName', Mandatory=$true)]
        [string[]]
        ${OtherPolicyName},

        [Parameter(ParameterSetName='MergePolicyById', Mandatory=$true)]
        [Parameter(ParameterSetName='MergePolicyByName', Mandatory=$true)]
        [string]
        ${NewPolicyName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Merge-CMConflictingRecord
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchById', Mandatory=$true)]
        [Alias('Smsid')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByName', Mandatory=$true)]
        [Alias('AgentName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_PendingRegistrationRecord')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchBySiteCode', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Move-CMObject
{
    [CmdletBinding(DefaultParameterSetName='SearchByObjectMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByObjectMandatory', Mandatory=$true)]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='SearchByObjectMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object[]]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('InstanceKey')]
        [string[]]
        ${ObjectId},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMAccessAccount
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByApplicationName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='SearchByApplicationId', Mandatory=$true)]
        [string]
        ${ApplicationId},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Application','BootImage','DriverPackage','OperatingSystemImage','OperatingSystemInstaller','Package','SoftwareUpdateDeploymentPackage')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByBootImageName', Mandatory=$true)]
        [string]
        ${BootImageName},

        [Parameter(ParameterSetName='SearchByBootImageId', Mandatory=$true)]
        [string]
        ${BootImageId},

        [Parameter(ParameterSetName='SearchByDriverPackageName', Mandatory=$true)]
        [string]
        ${DriverPackageName},

        [Parameter(ParameterSetName='SearchByDriverPackageId', Mandatory=$true)]
        [string]
        ${DriverPackageId},

        [Parameter(ParameterSetName='SearchByOSImageName', Mandatory=$true)]
        [string]
        ${OperatingSystemImageName},

        [Parameter(ParameterSetName='SearchByOSImageId', Mandatory=$true)]
        [string]
        ${OperatingSystemImageId},

        [Parameter(ParameterSetName='SearchByOSInstallerName', Mandatory=$true)]
        [string]
        ${OperatingSystemInstallerName},

        [Parameter(ParameterSetName='SearchByOSInstallerId', Mandatory=$true)]
        [string]
        ${OperatingSystemInstallerId},

        [Parameter(ParameterSetName='SearchByPackageName', Mandatory=$true)]
        [string]
        ${PackageName},

        [Parameter(ParameterSetName='SearchByPackageId', Mandatory=$true)]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='SearchBySoftwareUpdateDeploymentPackageName', Mandatory=$true)]
        [string]
        ${SoftwareUpdateDeploymentPackageName},

        [Parameter(ParameterSetName='SearchBySoftwareUpdateDeploymentPackageId', Mandatory=$true)]
        [string]
        ${SoftwareUpdateDeploymentPackageId},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${AccountType},

        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${Access},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMAccount
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [securestring]
        ${Password},

        [Parameter(Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${UserName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMActiveDirectoryForest
{
    [CmdletBinding(DefaultParameterSetName='New', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [string]
        ${ForestFqdn},

        [Parameter(ParameterSetName='New')]
        [string]
        ${Description},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${EnableDiscovery},

        [string]
        ${UserName},

        [securestring]
        ${Password},

        [Parameter(ParameterSetName='New')]
        [string]
        ${PublishingPath},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMADGroupDiscoveryScope
{
    [CmdletBinding(DefaultParameterSetName='NewGroup')]
    param
    (
        [Alias('UserName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DiscoveryAccountUserName},

        [Parameter(ParameterSetName='NewGroup')]
        [Alias('DCName')]
        [string]
        ${DomainControllerServerName},

        [Parameter(ParameterSetName='NewGroup', Mandatory=$true)]
        [Alias('GroupDNs')]
        [string[]]
        ${GroupDN},

        [Parameter(ParameterSetName='NewLocation', Mandatory=$true)]
        [string]
        ${LdapLocation},

        [Parameter(Mandatory=$true, Position=0)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='NewLocation')]
        [bool]
        ${RecursiveSearch},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMAdministrativeUser
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('LogonName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [string[]]
        ${RoleName},

        [Parameter(ParameterSetName='New')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${SecurityScopeName},

        [Parameter(ParameterSetName='New')]
        [string[]]
        ${CollectionName},

        [Parameter(ParameterSetName='Advanced', Mandatory=$true)]
        [Alias('Permissions')]
        [ValidateNotNull()]
        [PSTypeName('IResultObject#SMS_APermission')]
        [System.Object[]]
        ${Permission},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMAdministrativeUserPermission
{
    [CmdletBinding(DefaultParameterSetName='ByValue')]
    param
    (
        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [string]
        ${RoleId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${RoleName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Role')]
        [PSTypeName('IResultObject#SMS_Role')]
        [System.Object]
        ${InputObject},

        [Alias('SecurityScopeIds')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${SecurityScopeId},

        [Alias('SecurityScopeNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${SecurityScopeName},

        [Alias('SecurityScopes')]
        [ValidateNotNull()]
        [PSTypeName('IResultObject#SMS_SecuredCategory')]
        [System.Object[]]
        ${SecurityScope},

        [Alias('CollectionIds')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${CollectionId},

        [Alias('CollectionNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${CollectionName},

        [Alias('Collections')]
        [ValidateNotNull()]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object[]]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMAdvancedThreatProtectionPolicy
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 200)]
        [string]
        ${Name},

        [ValidateLength(1, 1500)]
        [string]
        ${Description},

        [Parameter(Mandatory=$true)]
        [ValidateSet('Onboarding','Offboarding')]
        [System.Object]
        ${PolicyType},

        [Parameter(Mandatory=$true)]
        [Alias('ConfigurationFileLocation')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [ValidateSet('None','All')]
        [System.Object]
        ${SampleSharingType},

        [ValidateSet('Normal','Expedited')]
        [System.Object]
        ${TelemetryReportingFrequencyType},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMAlertSubscription
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [Alias('AlertIds')]
        [int[]]
        ${AlertId},

        [Parameter(Mandatory=$true)]
        [Alias('EmailAddresses','EmailAddress','AddEmailAddresses')]
        [string[]]
        ${AddEmailAddress},

        [int]
        ${LocaleId},

        [switch]
        ${RequireValidLocaleId},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMAntimalwarePolicy
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='New')]
        [string]
        ${Description},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${Policy},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMAntimalwarePolicyDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByAntimalwarePolicyName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByAntimalwarePolicyName', Mandatory=$true)]
        [Alias('AntimalwarePolicyName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByAntimalwarePolicyId', Mandatory=$true)]
        [Alias('AntimalwarePolicyId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByAntimalwarePolicyValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('AntimalwarePolicy')]
        [PSTypeName('IResultObject#SMS_AntimalwareSettings')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMApnsCertificateRequest
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('Credential')]
        [pscredential]
        ${IntuneCredential},

        [Alias('ApnsCertificateRequestPath','Path')]
        [string]
        ${OutputPath},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMApplication
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [string]
        ${Description},

        [Alias('Manufacturer')]
        [string]
        ${Publisher},

        [string]
        ${SoftwareVersion},

        [string]
        ${OptionalReference},

        [datetime]
        ${ReleaseDate},

        [bool]
        ${AutoInstall},

        [Alias('AddOwners')]
        [string[]]
        ${AddOwner},

        [Alias('AddSupportContacts')]
        [string[]]
        ${AddSupportContact},

        [string]
        ${Owner},

        [string]
        ${SupportContact},

        [Alias('LocalizedApplicationName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${LocalizedName},

        [string]
        ${UserDocumentation},

        [string]
        ${LinkText},

        [Alias('LocalizedApplicationDescription')]
        [string]
        ${LocalizedDescription},

        [Alias('Keywords')]
        [string[]]
        ${Keyword},

        [string]
        ${PrivacyUrl},

        [bool]
        ${IsFeatured},

        [ValidateNotNullOrEmpty()]
        [string]
        ${IconLocationFile},

        [Alias('DisplaySupersedencesInApplicationCatalog')]
        [bool]
        ${DisplaySupersedenceInApplicationCatalog},

        [Alias('AppCatalogs')]
        [System.Object[]]
        ${AppCatalog},

        [int]
        ${DefaultLanguageId},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMApplicationDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName','ApplicationName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID','ApplicationId')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Application')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${InputObject},

        [Alias('AppRequiresApproval')]
        [bool]
        ${ApprovalRequired},

        [System.Object]
        ${DeployAction},

        [System.Object]
        ${DeployPurpose},

        [bool]
        ${EnableMomAlert},

        [ValidateRange(0, 99)]
        [int]
        ${FailParameterValue},

        [bool]
        ${OverrideServiceWindow},

        [datetime]
        ${PostponeDateTime},

        [bool]
        ${PreDeploy},

        [Alias('RaiseMomAlertsOnFailure')]
        [bool]
        ${GenerateScomAlertOnFailure},

        [bool]
        ${RebootOutsideServiceWindow},

        [ValidateRange(0, 100)]
        [int]
        ${SuccessParameterValue},

        [System.Object]
        ${TimeBaseOn},

        [System.Object]
        ${UserNotification},

        [Alias('DisableDetectAssociatedContentDependencies')]
        [switch]
        ${DisableContentDependencyDetection},

        [bool]
        ${UpdateSupersedence},

        [switch]
        ${Simulation},

        [bool]
        ${EnableSoftDeadline},

        [bool]
        ${ReplaceToastNotificationWithDialog},

        [switch]
        ${DistributeContent},

        [string]
        ${DistributeCollectionName},

        [string]
        ${DistributionPointGroupName},

        [string]
        ${DistributionPointName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Comment},

        [datetime]
        ${AvailableDateTime},

        [datetime]
        ${DeadlineDateTime},

        [bool]
        ${UseMeteredNetwork},

        [bool]
        ${PersistOnWriteFilterDevice},

        [bool]
        ${SendWakeupPacket},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMApplicationDisplayInfo
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [int]
        ${LanguageId},

        [Parameter(Mandatory=$true)]
        [Alias('LocalizedName')]
        [string]
        ${Title},

        [string]
        ${UserDocumentation},

        [string]
        ${LinkText},

        [Alias('LocalizedDescription')]
        [string]
        ${Description},

        [string[]]
        ${Keyword},

        [string]
        ${PrivacyUrl},

        [ValidateNotNullOrEmpty()]
        [string]
        ${IconLocationFile},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMAppCatalog -Value New-CMApplicationDisplayInfo

function New-CMAppVVirtualEnvironment
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='New')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Description},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${ApplicationGroup},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMAssetIntelligenceCatalogItem
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [string]
        ${CategoryName},

        [Parameter(ParameterSetName='New')]
        [string]
        ${Description},

        [Parameter(ParameterSetName='New')]
        [int]
        ${LanguageId},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [System.Object]
        ${Type},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMAutoDeploymentRuleDeployment
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [Alias('AutoDeploymentName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ById', Mandatory=$true, Position=0)]
        [Alias('AutoDeploymentID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('AutoDeploymentRule')]
        [PSTypeName('IResultObject#SMS_AutoDeployment')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Collection;CollectionType=2')]
        [System.Object]
        ${Collection},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [Alias('Enable','EnabledAfterCreate','EnableAfterCreate')]
        [bool]
        ${EnableDeployment},

        [Alias('EnableWakeOnLan')]
        [bool]
        ${SendWakeupPacket},

        [System.Object]
        ${VerboseLevel},

        [bool]
        ${UseUtc},

        [bool]
        ${AvailableImmediately},

        [int]
        ${AvailableTime},

        [System.Object]
        ${AvailableTimeUnit},

        [bool]
        ${DeadlineImmediately},

        [int]
        ${DeadlineTime},

        [System.Object]
        ${DeadlineTimeUnit},

        [System.Object]
        ${UserNotification},

        [bool]
        ${AllowSoftwareInstallationOutsideMaintenanceWindow},

        [bool]
        ${AllowRestart},

        [bool]
        ${SuppressRestartServer},

        [bool]
        ${SuppressRestartWorkstation},

        [bool]
        ${WriteFilterHandling},

        [bool]
        ${GenerateSuccessAlert},

        [ValidateRange(0, 99)]
        [int]
        ${SuccessPercentage},

        [int]
        ${AlertTime},

        [System.Object]
        ${AlertTimeUnit},

        [Alias('DisableOperationManager')]
        [bool]
        ${DisableOperationsManager},

        [Alias('GenerateOperationManagerAlert')]
        [bool]
        ${GenerateOperationsManagerAlert},

        [bool]
        ${NoInstallOnRemote},

        [bool]
        ${NoInstallOnUnprotected},

        [bool]
        ${UseBranchCache},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMSoftwareUpdateAutoDeploymentRuleDeployment -Value New-CMAutoDeploymentRuleDeployment

function New-CMBaseline
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 255)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='New')]
        [Alias('LocalizedDescription')]
        [ValidateLength(0, 512)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='New')]
        [Alias('LocalizedCategoryInstanceNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Category},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMBaselineDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID','BaselineId')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName','BaselineName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Baseline')]
        [PSTypeName('IResultObject#SMS_ConfigurationBaselineInfo')]
        [System.Object]
        ${InputObject},

        [bool]
        ${EnableEnforcement},

        [bool]
        ${OverrideServiceWindow},

        [bool]
        ${GenerateAlert},

        [ValidateRange(0, 100)]
        [int]
        ${ParameterValue},

        [datetime]
        ${PostponeDateTime},

        [bool]
        ${MonitoredByScom},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMBootableMedia
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [switch]
        ${AllowUacPrompt},

        [switch]
        ${AllowUnattended},

        [switch]
        ${AllowUnknownMachine},

        [Parameter(Mandatory=$true)]
        [Alias('BootImagePackage')]
        [PSTypeName('IResultObject#SMS_BootImagePackage')]
        [System.Object]
        ${BootImage},

        [datetime]
        ${CertificateExpireTime},

        [securestring]
        ${CertificatePassword},

        [string]
        ${CertificatePath},

        [datetime]
        ${CertificateStartTime},

        [Parameter(Mandatory=$true)]
        [Alias('DistributionPoints')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Distribution Point')]
        [System.Object[]]
        ${DistributionPoint},

        [switch]
        ${Force},

        [switch]
        ${FormatMedia},

        [Parameter(Mandatory=$true)]
        [Alias('ManagementPoints')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Management Point')]
        [System.Object[]]
        ${ManagementPoint},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${MediaMode},

        [ValidateNotNullOrEmpty()]
        [securestring]
        ${MediaPassword},

        [Parameter(Mandatory=$true)]
        [ValidateSet('Usb','CdDvd')]
        [System.Object]
        ${MediaType},

        [Parameter(Mandatory=$true)]
        [Alias('MediaPath','OutputPath','DriveName')]
        [string]
        ${Path},

        [Alias('TemporaryDirectory','StagingArea')]
        [string]
        ${TemporaryFolder},

        [Alias('PreExecCommandLine')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${PrestartCommand},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object]
        ${PrestartPackage},

        [System.Object]
        ${UserDeviceAffinity},

        [Alias('TaskSequenceVariables','Variables')]
        [hashtable]
        ${Variable},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMBootImage
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [Alias('ImagePath')]
        [string]
        ${Path},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [Alias('ImageIndex')]
        [int]
        ${Index},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='New')]
        [string]
        ${Version},

        [Parameter(ParameterSetName='New')]
        [string]
        ${Description},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMBoundary
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Alias('DisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(Mandatory=$true)]
        [Alias('BoundaryType')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Type},

        [Parameter(Mandatory=$true)]
        [string]
        ${Value},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMBoundaryGroup
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [string]
        ${Description},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DefaultSiteCode},

        [Alias('AddSiteSystemServers')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${AddSiteSystemServer},

        [Alias('AddSiteSystemServerNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddSiteSystemServerName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMBoundaryGroupRelationship
{
    [CmdletBinding(DefaultParameterSetName='NameMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='IdMandatory', Mandatory=$true)]
        [int]
        ${SourceGroupId},

        [Parameter(ParameterSetName='IdMandatory', Mandatory=$true)]
        [int]
        ${DestinationGroupId},

        [Parameter(ParameterSetName='NameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SourceGroupName},

        [Parameter(ParameterSetName='NameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DestinationGroupName},

        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_BoundaryGroup')]
        [System.Object]
        ${SourceGroup},

        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true)]
        [System.Object]
        ${DestinationGroup},

        [ValidateRange(-1, 2147483647)]
        [int]
        ${FallbackDPMinutes},

        [ValidateRange(-1, 2147483647)]
        [int]
        ${FallbackMPMinutes},

        [ValidateRange(-1, 2147483647)]
        [int]
        ${FallbackSmpMinutes},

        [ValidateRange(-1, 2147483647)]
        [int]
        ${FallbackSupMinutes},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMCaptureMedia
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [switch]
        ${AllowUacPrompt},

        [Parameter(Mandatory=$true)]
        [Alias('BootImagePackage')]
        [PSTypeName('IResultObject#SMS_BootImagePackage')]
        [System.Object]
        ${BootImage},

        [Parameter(Mandatory=$true)]
        [Alias('DistributionPoints')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Distribution Point')]
        [System.Object[]]
        ${DistributionPoint},

        [switch]
        ${Force},

        [switch]
        ${FormatMedia},

        [Parameter(Mandatory=$true)]
        [ValidateSet('Usb','CdDvd')]
        [System.Object]
        ${MediaType},

        [Parameter(Mandatory=$true)]
        [Alias('MediaPath','OutputPath','DriveName')]
        [string]
        ${Path},

        [Alias('TemporaryDirectory','StagingArea')]
        [string]
        ${TemporaryFolder},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMCategory
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='NewCategory', Mandatory=$true)]
        [Alias('LocalizedCategoryInstanceName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='NewCategory', Mandatory=$true)]
        [ValidateSet('AppCategories','BaselineCategories','CatalogCategories','DriverCategories','UserCategories')]
        [System.Object]
        ${CategoryType},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMCertificateProfilePfx
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [string]
        ${Description},

        [System.Object]
        ${KeyStorageProvider},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(Mandatory=$true)]
        [Alias('SupportedPlatforms')]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMCertificateProfileScep
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [bool]
        ${AllowCertificateOnAnyDevice},

        [ValidateSet('Machine','User')]
        [System.Object]
        ${CertificateStore},

        [Parameter(Mandatory=$true)]
        [string]
        ${CertificateTemplateName},

        [Parameter(Mandatory=$true)]
        [ValidateRange(1, 1825)]
        [int]
        ${CertificateValidityDays},

        [string]
        ${Description},

        [Parameter(Mandatory=$true)]
        [Alias('Ekus')]
        [hashtable]
        ${Eku},

        [ValidateRange(1, 99)]
        [int]
        ${EnrollmentRenewThresholdPct},

        [ValidateRange(0, 10)]
        [int]
        ${EnrollmentRetryCount},

        [ValidateRange(1, 20)]
        [int]
        ${EnrollmentRetryDelayMins},

        [Parameter(Mandatory=$true)]
        [Alias('HashAlgorithms')]
        [ValidateSet('SHA1','SHA2','SHA3')]
        [System.Object]
        ${HashAlgorithm},

        [ValidateSet('1024','2048','4096')]
        [int]
        ${KeySize},

        [System.Object]
        ${KeyStorageProvider},

        [Parameter(Mandatory=$true)]
        [ValidateSet('KeyEncipherment','DigitalSignature')]
        [System.Security.Cryptography.X509Certificates.X509KeyUsageFlags]
        ${KeyUsage},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${RequireMultifactor},

        [Parameter(Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_TrustedRootCertificateSettings')]
        [System.Object]
        ${RootCertificate},

        [Parameter(Mandatory=$true)]
        [Alias('SanTypes')]
        [System.Object]
        ${SanType},

        [Alias('ScepServerUrls')]
        [string[]]
        ${ScepServerUrl},

        [Alias('SubjectTypes')]
        [System.Object]
        ${SubjectType},

        [Parameter(Mandatory=$true)]
        [Alias('SupportedPlatforms')]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMCertificateProfileTrustedRootCA
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [string]
        ${Description},

        [Alias('Store')]
        [System.Object]
        ${DestinationStore},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(Mandatory=$true)]
        [Alias('CertificatePath')]
        [string]
        ${Path},

        [Parameter(Mandatory=$true)]
        [Alias('SupportedPlatforms')]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMClientCertificateProfileConfigurationItem
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DesiredConfigurationDigestPath},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMClientAuthCertificateProfileConfigurationItem -Value New-CMClientCertificateProfileConfigurationItem

function New-CMClientSetting
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='New')]
        [string]
        ${Description},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Type},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMClientSettingDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByClientSettingName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByClientSettingName', Mandatory=$true)]
        [Alias('ClientSettingName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByClientSettingId', Mandatory=$true)]
        [Alias('ClientSettingId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByClientSettingValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ClientSetting')]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMCloudDistributionPoint
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='NewCloudDistributionPoint', Mandatory=$true)]
        [string]
        ${SubscriptionId},

        [Parameter(ParameterSetName='NewCloudDistributionPoint')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='NewCloudDistributionPoint', Mandatory=$true)]
        [Alias('ManagementCertificate')]
        [string]
        ${ManagementCertificatePath},

        [Parameter(ParameterSetName='NewCloudDistributionPoint')]
        [string]
        ${Description},

        [Parameter(ParameterSetName='NewCloudDistributionPoint', Mandatory=$true)]
        [string]
        ${ServiceCName},

        [Parameter(ParameterSetName='NewCloudDistributionPoint', Mandatory=$true)]
        [Alias('ServiceCertificate')]
        [string]
        ${ServiceCertificatePath},

        [Parameter(ParameterSetName='NewCloudDistributionPoint')]
        [ValidateRange(1, 2147483647)]
        [int]
        ${StorageQuotaGB},

        [Parameter(ParameterSetName='NewCloudDistributionPoint')]
        [ValidateRange(1, 100)]
        [int]
        ${StorageWarningThreshold},

        [Parameter(ParameterSetName='NewCloudDistributionPoint')]
        [ValidateRange(1, 100)]
        [int]
        ${StorageCriticalThreshold},

        [Parameter(ParameterSetName='NewCloudDistributionPoint')]
        [ValidateRange(1, 2147483647)]
        [int]
        ${TrafficOutGB},

        [Parameter(ParameterSetName='NewCloudDistributionPoint')]
        [ValidateRange(1, 100)]
        [int]
        ${TrafficWarningThreshold},

        [Parameter(ParameterSetName='NewCloudDistributionPoint')]
        [ValidateRange(1, 100)]
        [int]
        ${TrafficCriticalThreshold},

        [Parameter(ParameterSetName='NewCloudDistributionPoint')]
        [securestring]
        ${ManagementCertificatePassword},

        [Parameter(ParameterSetName='NewCloudDistributionPoint')]
        [securestring]
        ${ServiceCertificatePassword},

        [Parameter(ParameterSetName='NewCloudDistributionPoint', Mandatory=$true)]
        [System.Object]
        ${Region},

        [Parameter(ParameterSetName='NewCloudDistributionPoint')]
        [ValidateSet('AzurePublicCloud','AzureUSGovernmentCloud')]
        [System.Object]
        ${EnvironmentSetting},

        [Parameter(ParameterSetName='NewCloudDistributionPoint')]
        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMCloudManagementGateway
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${SubscriptionId},

        [bool]
        ${GovernmentSubscription},

        [Parameter(Mandatory=$true)]
        [Alias('ManagementCertificate')]
        [string]
        ${ManagementCertificatePath},

        [string]
        ${Description},

        [Parameter(Mandatory=$true)]
        [string]
        ${ServiceCName},

        [Parameter(Mandatory=$true)]
        [Alias('ServiceCertificate')]
        [string]
        ${ServiceCertificatePath},

        [Parameter(Mandatory=$true)]
        [Alias('RootCertificate')]
        [string]
        ${RootCertificatePath},

        [ValidateRange(1, 2147483647)]
        [int]
        ${TrafficOutGB},

        [ValidateRange(1, 100)]
        [int]
        ${TrafficWarningPct},

        [ValidateRange(1, 100)]
        [int]
        ${TrafficCriticalPct},

        [securestring]
        ${ManagementCertificatePassword},

        [securestring]
        ${ServiceCertificatePassword},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${Region},

        [ValidateRange(1, 16)]
        [int]
        ${VMInstanceCount},

        [bool]
        ${CheckClientCertRevocation},

        [ValidateSet('AzurePublicCloud','AzureUSGovernmentCloud')]
        [System.Object]
        ${EnvironmentSetting},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMCollection
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('User','Device')]
        [System.Object]
        ${CollectionType},

        [string]
        ${Comment},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('LimitingCollection')]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('LimitToCollectionId')]
        [string]
        ${LimitingCollectionId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('LimitToCollectionName')]
        [string]
        ${LimitingCollectionName},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${RefreshSchedule},

        [System.Object]
        ${RefreshType},

        [Alias('DeviceCollectionVariablePrecedence')]
        [ValidateRange(1, 9)]
        [int]
        ${VariablePriority},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMCoManagementPolicy
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CoManagementPolicyName},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [bool]
        ${AutoEnroll},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${CAWorkloadEnabled},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${RAWorkloadEnabled},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${WufbWorkloadEnabled},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${EPWorkloadEnabled},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${DCWorkloadEnabled},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${ClientAppsWorkloadEnabled},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${O365WorkloadEnabled},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMComplianceRuleAssembly
{
    [CmdletBinding(DefaultParameterSetName='AssemblyToken', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='AssemblyCulture', Mandatory=$true)]
        [switch]
        ${Culture},

        [Parameter(ParameterSetName='AssemblyToken', Mandatory=$true)]
        [switch]
        ${PublicKeyToken},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${ExpressionOperator},

        [switch]
        ${ReportNoncompliance},

        [Parameter(Mandatory=$true)]
        [string]
        ${RuleName},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Setting')]
        [System.Object]
        ${InputObject},

        [Alias('ExpectedValues')]
        [string[]]
        ${ExpectedValue},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMComplianceRuleExistential
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [System.Object]
        ${Existence},

        [ValidateSet('IsEquals','NotEquals','GreaterThan','GreaterEquals','LessThan','LessEquals','Between','OneOf','NoneOf')]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(Mandatory=$true)]
        [string]
        ${RuleName},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Setting')]
        [System.Object]
        ${InputObject},

        [Alias('ExpectedValues')]
        [string[]]
        ${ExpectedValue},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMComplianceRuleFileFolderAttribute
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [bool]
        ${Archive},

        [bool]
        ${Compressed},

        [bool]
        ${Encrypted},

        [bool]
        ${Hidden},

        [bool]
        ${ReadOnly},

        [bool]
        ${System},

        [switch]
        ${ReportNoncompliance},

        [Parameter(Mandatory=$true)]
        [string]
        ${RuleName},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Setting')]
        [System.Object]
        ${InputObject},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMComplianceRuleFileFolderDate
{
    [CmdletBinding(DefaultParameterSetName='ByCreation', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByCreation', Mandatory=$true)]
        [switch]
        ${Creation},

        [Parameter(Mandatory=$true)]
        [Alias('ExpectedValues','ExpectedDate','ExpectedDates')]
        [datetime[]]
        ${ExpectedValue},

        [Parameter(Mandatory=$true)]
        [ValidateSet('IsEquals','NotEquals','GreaterThan','LessThan','Between','GreaterEquals','LessEquals','OneOf','NoneOf')]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(ParameterSetName='ByModification', Mandatory=$true)]
        [switch]
        ${Modification},

        [switch]
        ${ReportNoncompliance},

        [Parameter(Mandatory=$true)]
        [string]
        ${RuleName},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Setting')]
        [System.Object]
        ${InputObject},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMComplianceRuleFileFolderPermission
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('ExpectedPermissions')]
        [System.Object[]]
        ${ExpectedPermission},

        [Parameter(Mandatory=$true)]
        [hashtable]
        ${ExpectedUserAccess},

        [bool]
        ${IsExclusive},

        [switch]
        ${ReportNoncompliance},

        [Parameter(Mandatory=$true)]
        [string]
        ${RuleName},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Setting')]
        [System.Object]
        ${InputObject},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMComplianceRuleFileFolderSimple
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('Company','ProductName','SHA1Hash')]
        [System.Object]
        ${PropertyType},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${ExpressionOperator},

        [switch]
        ${ReportNoncompliance},

        [Parameter(Mandatory=$true)]
        [string]
        ${RuleName},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Setting')]
        [System.Object]
        ${InputObject},

        [Alias('ExpectedValues')]
        [string[]]
        ${ExpectedValue},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMComplianceRuleFileFolderSize
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('ExpectedValues','ExpectedSize','ExpectedSizes')]
        [long[]]
        ${ExpectedValue},

        [Parameter(Mandatory=$true)]
        [ValidateSet('IsEquals','NotEquals','GreaterThan','LessThan','Between','GreaterEquals','LessEquals','OneOf','NoneOf')]
        [System.Object]
        ${ExpressionOperator},

        [switch]
        ${ReportNoncompliance},

        [Parameter(Mandatory=$true)]
        [string]
        ${RuleName},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Setting')]
        [System.Object]
        ${InputObject},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMComplianceRuleRegistryKeyPermission
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('ExpectedPermissions')]
        [System.Object[]]
        ${ExpectedPermission},

        [Parameter(Mandatory=$true)]
        [hashtable]
        ${ExpectedUserAccess},

        [bool]
        ${IsExclusive},

        [switch]
        ${ReportNoncompliance},

        [Parameter(Mandatory=$true)]
        [string]
        ${RuleName},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Setting')]
        [System.Object]
        ${InputObject},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMComplianceRuleValue
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [AllowNull()]
        [string[]]
        ${ExpectedValue},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${ExpressionOperator},

        [switch]
        ${Remediate},

        [switch]
        ${ReportNoncompliance},

        [Parameter(Mandatory=$true)]
        [string]
        ${RuleName},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Setting')]
        [System.Object]
        ${InputObject},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMComplianceRuleVersion
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('ExpectedVersion','ExpectedValues','ExpectedVersions')]
        [ValidateNotNullOrEmpty()]
        [version[]]
        ${ExpectedValue},

        [Parameter(Mandatory=$true)]
        [ValidateSet('IsEquals','NotEquals','GreaterThan','LessThan','Between','GreaterEquals','LessEquals','OneOf','NoneOf')]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Setting')]
        [System.Object]
        ${InputObject},

        [switch]
        ${ReportNoncompliance},

        [Parameter(Mandatory=$true)]
        [string]
        ${RuleName},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMComputerAssociation
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='NewComputerAssociation', Mandatory=$true)]
        [Alias('RestoreName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DestinationComputer},

        [Parameter(ParameterSetName='NewComputerAssociation', Mandatory=$true)]
        [Alias('SourceName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SourceComputer},

        [Parameter(ParameterSetName='NewComputerAssociation')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${MigrationBehavior},

        [Parameter(ParameterSetName='NewComputerAssociation')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${MigrationUserName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMConditionalAccessPolicy
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${DefaultRuleOverride},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true)]
        [Alias('TargetedCollections')]
        [PSTypeName('IResultObject#SMS_Collection;CollectionType=1')]
        [System.Object[]]
        ${TargetedCollection},

        [Parameter(ParameterSetName='ByValue')]
        [Alias('ExcludedCollections')]
        [PSTypeName('IResultObject#SMS_Collection;CollectionType=1')]
        [System.Object[]]
        ${ExcludedCollection},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('TargetedCollectionIds')]
        [string[]]
        ${TargetedCollectionId},

        [Parameter(ParameterSetName='ById')]
        [Alias('ExcludedCollectionIds')]
        [string[]]
        ${ExcludedCollectionId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('TargetedCollectionNames')]
        [string[]]
        ${TargetedCollectionName},

        [Parameter(ParameterSetName='ByName')]
        [Alias('ExcludedCollectionNames')]
        [string[]]
        ${ExcludedCollectionName},

        [string]
        ${NotificationText},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMOnPremConditionalAccessPolicy -Value New-CMConditionalAccessPolicy

function New-CMConfigurationItem
{
    [CmdletBinding(DefaultParameterSetName='NewChild', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 255)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='New')]
        [Parameter(ParameterSetName='NewChild')]
        [Alias('LocalizedDescription')]
        [ValidateLength(0, 512)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='New')]
        [Parameter(ParameterSetName='NewChild')]
        [Alias('LocalizedCategoryInstanceNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Category},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [System.Object]
        ${CreationType},

        [Parameter(ParameterSetName='NewChild', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${ParentConfigurationItem},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMConfigurationPolicyDeployment
{
    [CmdletBinding(DefaultParameterSetName='DeployFWPolicyByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='DeployUSMPolicyByNameMandatory', Mandatory=$true)]
        [string]
        ${UserDataAndProfileName},

        [Parameter(ParameterSetName='DeployUSMPolicyByIdMandatory', Mandatory=$true)]
        [string]
        ${UserDataAndProfileId},

        [Parameter(ParameterSetName='DeployUSMPolicyByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_UserStateManagementSettings')]
        [System.Object]
        ${UserDataAndProfile},

        [Parameter(ParameterSetName='DeployFWPolicyByNameMandatory', Mandatory=$true)]
        [string]
        ${FirewallPolicyName},

        [Parameter(ParameterSetName='DeployFWPolicyByIdMandatory', Mandatory=$true)]
        [string]
        ${FirewallPolicyId},

        [Parameter(ParameterSetName='DeployFWPolicyByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_FirewallSettings')]
        [System.Object]
        ${FirewallPolicy},

        [Parameter(ParameterSetName='DeployCoMgmtPolicyByNameMandatory', Mandatory=$true)]
        [string]
        ${CoManagementPolicyName},

        [Parameter(ParameterSetName='DeployCoMgmtPolicyByIdMandatory', Mandatory=$true)]
        [string]
        ${CoManagementPolicyId},

        [Parameter(ParameterSetName='DeployCoMgmtPolicyByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy')]
        [System.Object]
        ${CoManagementPolicy},

        [Parameter(ParameterSetName='DeployRCPolicyByNameMandatory', Mandatory=$true)]
        [string]
        ${RemoteConnectionProfileName},

        [Parameter(ParameterSetName='DeployRCPolicyByIdMandatory', Mandatory=$true)]
        [string]
        ${RemoteConnectionProfileId},

        [Parameter(ParameterSetName='DeployRCPolicyByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_RemoteConnectionSettings')]
        [System.Object]
        ${RemoteConnectionProfile},

        [Parameter(ParameterSetName='DeployCommonPolicyByNameMandatory', Mandatory=$true)]
        [string]
        ${CommonProfileName},

        [Parameter(ParameterSetName='DeployCommonPolicyByIdMandatory', Mandatory=$true)]
        [string]
        ${CommonProfileId},

        [Parameter(ParameterSetName='DeployCommonPolicyByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy')]
        [System.Object]
        ${CommonProfile},

        [Parameter(ParameterSetName='DeployUSMPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByValueMandatory')]
        [bool]
        ${EnableEnforcement},

        [Parameter(ParameterSetName='DeployUSMPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByValueMandatory')]
        [bool]
        ${OverrideServiceWindow},

        [Parameter(ParameterSetName='DeployUSMPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployCommonPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployCommonPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployCommonPolicyByValueMandatory')]
        [bool]
        ${GenerateAlert},

        [Parameter(ParameterSetName='DeployUSMPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployCommonPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployCommonPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployCommonPolicyByValueMandatory')]
        [ValidateRange(0, 100)]
        [int]
        ${ParameterValue},

        [Parameter(ParameterSetName='DeployUSMPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployCommonPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployCommonPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployCommonPolicyByValueMandatory')]
        [datetime]
        ${PostponeDateTime},

        [Parameter(ParameterSetName='DeployUSMPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployCommonPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployCommonPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployCommonPolicyByValueMandatory')]
        [bool]
        ${MonitoredByScom},

        [Parameter(ParameterSetName='DeployUSMPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployFWPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployFWPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployFWPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployCommonPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployCommonPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployCommonPolicyByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMDeploymentTypeDependencyGroup
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${GroupName},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ParentDeploymentType','DependingDeploymentType')]
        [PSTypeName('IResultObject#SMS_DeploymentType')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMDepTokenRequest
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('Credential')]
        [pscredential]
        ${IntuneCredential},

        [Alias('Path')]
        [string]
        ${OutputPath},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMDetectionClauseDirectory
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${DirectoryName},

        [Parameter(ParameterSetName='Value', Mandatory=$true)]
        [ValidateSet('DateCreated','DateModified')]
        [System.Object]
        ${PropertyType},

        [Parameter(ParameterSetName='Value', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${ExpectedValue},

        [Parameter(ParameterSetName='Value', Mandatory=$true)]
        [ValidateSet('IsEquals','NotEquals','GreaterThan','GreaterEquals','LessThan','LessEquals','Between','OneOf','NoneOf')]
        [System.Object]
        ${ExpressionOperator},

        [switch]
        ${Is64Bit},

        [Parameter(Mandatory=$true)]
        [string]
        ${Path},

        [Parameter(ParameterSetName='Existence', Mandatory=$true)]
        [switch]
        ${Existence},

        [Parameter(ParameterSetName='Value', Mandatory=$true)]
        [Alias('ValueRule')]
        [switch]
        ${Value},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMDetectionClauseFile
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${FileName},

        [Parameter(ParameterSetName='Value', Mandatory=$true)]
        [ValidateSet('DateCreated','DateModified','Version','Size')]
        [System.Object]
        ${PropertyType},

        [Parameter(ParameterSetName='Value', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${ExpectedValue},

        [Parameter(ParameterSetName='Value', Mandatory=$true)]
        [ValidateSet('IsEquals','NotEquals','GreaterThan','GreaterEquals','LessThan','LessEquals','Between','OneOf','NoneOf')]
        [System.Object]
        ${ExpressionOperator},

        [switch]
        ${Is64Bit},

        [Parameter(Mandatory=$true)]
        [string]
        ${Path},

        [Parameter(ParameterSetName='Existence', Mandatory=$true)]
        [switch]
        ${Existence},

        [Parameter(ParameterSetName='Value', Mandatory=$true)]
        [Alias('ValueRule')]
        [switch]
        ${Value},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMDetectionClauseMacBundle
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${BundleId},

        [Parameter(Mandatory=$true)]
        [ValidateSet('IsEquals','GreaterEquals','GreaterThan','LessEquals','LessThan')]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(Mandatory=$true)]
        [ValidateSet('Version','String')]
        [System.Object]
        ${PropertyType},

        [switch]
        ${Value},

        [Parameter(Mandatory=$true)]
        [string]
        ${ExpectedValue},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMDetectionClauseMacPackage
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('IsEquals','GreaterEquals','GreaterThan','LessEquals','LessThan')]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(Mandatory=$true)]
        [string]
        ${PackageId},

        [Parameter(Mandatory=$true)]
        [string]
        ${ExpectedValue},

        [switch]
        ${Value},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMDetectionClauseRegistryKey
{
    [CmdletBinding()]
    param
    (
        [switch]
        ${Existence},

        [Parameter(Mandatory=$true)]
        [Alias('RegistryHive')]
        [System.Object]
        ${Hive},

        [switch]
        ${Is64Bit},

        [Parameter(Mandatory=$true)]
        [Alias('RegistryKey')]
        [ValidateLength(0, 260)]
        [string]
        ${KeyName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMDetectionClauseRegistryKeyValue
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='Value', Mandatory=$true)]
        [ValidateSet('IsEquals','NotEquals','GreaterThan','GreaterEquals','LessThan','LessEquals','Between','OneOf','NoneOf','BeginsWith','EndsWith','NotEndsWith','Contains','NotContains')]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(Mandatory=$true)]
        [Alias('RegistryHive')]
        [System.Object]
        ${Hive},

        [switch]
        ${Is64Bit},

        [Parameter(Mandatory=$true)]
        [Alias('RegistryKey')]
        [ValidateLength(0, 260)]
        [string]
        ${KeyName},

        [Parameter(Mandatory=$true)]
        [ValidateSet('Version','Integer','String')]
        [System.Object]
        ${PropertyType},

        [Parameter(Mandatory=$true)]
        [Alias('RegistryValueName')]
        [AllowNull()]
        [string]
        ${ValueName},

        [Parameter(ParameterSetName='Existence', Mandatory=$true)]
        [switch]
        ${Existence},

        [Parameter(ParameterSetName='Value', Mandatory=$true)]
        [AllowNull()]
        [string[]]
        ${ExpectedValue},

        [Parameter(ParameterSetName='Value', Mandatory=$true)]
        [Alias('ValueRule')]
        [switch]
        ${Value},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMDetectionClauseWindowsInstaller
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='Value', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ExpectedValue},

        [Parameter(ParameterSetName='Value', Mandatory=$true)]
        [ValidateSet('IsEquals','NotEquals','GreaterEquals','GreaterThan','LessEquals','LessThan')]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(Mandatory=$true)]
        [guid]
        ${ProductCode},

        [Parameter(ParameterSetName='Value')]
        [ValidateSet('ProductVersion')]
        [System.Object]
        ${PropertyType},

        [Parameter(ParameterSetName='Existence', Mandatory=$true)]
        [switch]
        ${Existence},

        [Parameter(ParameterSetName='Value', Mandatory=$true)]
        [Alias('ValueRule')]
        [switch]
        ${Value},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMDeviceCategory
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateLength(1, 80)]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMDeviceCollectionVariable
{
    [CmdletBinding(DefaultParameterSetName='NewByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='NewByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Collection')]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='NewByIdMandatory', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='NewByNameMandatory', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='NewByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='NewByNameMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='NewByValueMandatory', Mandatory=$true)]
        [string]
        ${VariableName},

        [Parameter(ParameterSetName='NewByIdMandatory')]
        [Parameter(ParameterSetName='NewByNameMandatory')]
        [Parameter(ParameterSetName='NewByValueMandatory')]
        [Alias('VariableValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Value},

        [Parameter(ParameterSetName='NewByIdMandatory')]
        [Parameter(ParameterSetName='NewByNameMandatory')]
        [Parameter(ParameterSetName='NewByValueMandatory')]
        [bool]
        ${IsMask},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMDeviceVariable
{
    [CmdletBinding(DefaultParameterSetName='NewByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='NewByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Device')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='NewByIdMandatory', Mandatory=$true)]
        [string]
        ${DeviceId},

        [Parameter(ParameterSetName='NewByNameMandatory', Mandatory=$true)]
        [string]
        ${DeviceName},

        [Parameter(ParameterSetName='NewByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='NewByNameMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='NewByValueMandatory', Mandatory=$true)]
        [string]
        ${VariableName},

        [Parameter(ParameterSetName='NewByIdMandatory')]
        [Parameter(ParameterSetName='NewByNameMandatory')]
        [Parameter(ParameterSetName='NewByValueMandatory')]
        [string]
        ${VariableValue},

        [Parameter(ParameterSetName='NewByIdMandatory')]
        [Parameter(ParameterSetName='NewByNameMandatory')]
        [Parameter(ParameterSetName='NewByValueMandatory')]
        [bool]
        ${IsMask},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMDistributionPointGroup
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='New')]
        [string]
        ${Description},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMDriverPackage
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [Alias('PackageSourcePath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Path},

        [Parameter(ParameterSetName='New')]
        [string]
        ${Description},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMEmailProfile
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [ValidateSet('domain','ntdomain')]
        [string]
        ${AccountDomainActiveDirectory},

        [string]
        ${AccountDomainCustom},

        [Parameter(Mandatory=$true)]
        [string]
        ${AccountName},

        [ValidateSet('mail','sAMAccountName','userPrincipalName')]
        [string]
        ${AccountUserNameType},

        [switch]
        ${AllowMessageMove},

        [switch]
        ${AllowThirdPartyApplication},

        [string]
        ${Description},

        [switch]
        ${DoNotUseSsl},

        [ValidateSet('mail','userPrincipalName')]
        [string]
        ${EmailAddressType},

        [switch]
        ${EnableSmime},

        [Parameter(Mandatory=$true)]
        [string]
        ${ExchangeHost},

        [System.Object]
        ${IdentityCertificate},

        [System.Nullable[System.Object]]
        ${MailSyncDays},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [System.Object]
        ${SigningCertificate},

        [Parameter(Mandatory=$true)]
        [Alias('SupportedPlatforms')]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Alias('SyncContentTypes')]
        [System.Object]
        ${SyncContentType},

        [switch]
        ${SynchronizeRecentlyUsed},

        [System.Nullable[System.Object]]
        ${SyncSchedule},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMEmbeddedObjectInstance
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${ClassName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMEmbeddedProperty
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${PropertyName},

        [int]
        ${Value},

        [string]
        ${Value1},

        [string]
        ${Value2},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMEmbeddedPropertyList
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${PropertyListName},

        [Alias('Values')]
        [System.Object[]]
        ${Value},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMExchangeClientAccessServer
{
    [CmdletBinding(ConfirmImpact='None')]
    param
    (
        [Parameter(ParameterSetName='NewExchangeClientAccessServer', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ExchangeClientAccessServerName},

        [Parameter(ParameterSetName='NewExchangeClientAccessServer', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ActiveDirectorySiteName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMExchangeConnectorAccessRule
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [string]
        ${RuleName},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [System.Object]
        ${AccessLevel},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [System.Object]
        ${Device},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMExchangeServerConnectorAccessRule -Value New-CMExchangeConnectorAccessRule

function New-CMExchangeConnectorApplicationSetting
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='New')]
        [ValidateNotNullOrEmpty()]
        [bool]
        ${UnsignedInstall},

        [Parameter(ParameterSetName='New')]
        [ValidateNotNullOrEmpty()]
        [bool]
        ${UnsignedApplication},

        [Parameter(ParameterSetName='New')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${BlockedApplication},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMExchangeServerConnectorApplicationSetting -Value New-CMExchangeConnectorApplicationSetting

function New-CMExchangeConnectorEmailManagementSetting
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='New')]
        [bool]
        ${AllowHtmlEmail},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${ConsumerEmail},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${EmailAttachmentPolicy},

        [Parameter(ParameterSetName='New')]
        [Alias('MaximumCalenderAge')]
        [System.Object]
        ${MaximumCalendarAge},

        [Parameter(ParameterSetName='New')]
        [System.Object]
        ${MaximumEmailAge},

        [Parameter(ParameterSetName='New')]
        [ValidateRange(0, 2097151)]
        [int]
        ${MaximumSizeAttachment},

        [Parameter(ParameterSetName='New')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaximumSizeHtmlEmail},

        [Parameter(ParameterSetName='New')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${MaximumSizeTextEmail},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${PushWhenRoaming},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMExchangeServerConnectorEmailManagementSetting -Value New-CMExchangeConnectorEmailManagementSetting

function New-CMExchangeConnectorGeneralSetting
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='New')]
        [bool]
        ${AllowDesktopSync},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${AllowInternetShare},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${AllowNonProvision},

        [Parameter(ParameterSetName='New')]
        [Alias('RefreshInterval')]
        [ValidateRange(0, 596523)]
        [int]
        ${RefreshHours},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMExchangeServerConnectorGeneralSetting -Value New-CMExchangeConnectorGeneralSetting

function New-CMExchangeConnectorPasswordSetting
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='New')]
        [bool]
        ${AllowSimplePassword},

        [Parameter(ParameterSetName='New')]
        [Alias('MaximumIdleTimeMinutes')]
        [ValidateRange(1, 60)]
        [int]
        ${MaximumIdleTimeMins},

        [Parameter(ParameterSetName='New')]
        [ValidateRange(1, 4)]
        [int]
        ${MinimumComplexChar},

        [Parameter(ParameterSetName='New')]
        [ValidateRange(1, 16)]
        [int]
        ${MinimumPasswordLength},

        [Parameter(ParameterSetName='New')]
        [System.Object]
        ${PasswordComplexity},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [bool]
        ${PasswordEnabled},

        [Parameter(ParameterSetName='New')]
        [ValidateRange(1, 730)]
        [int]
        ${PasswordExpiration},

        [Parameter(ParameterSetName='New')]
        [ValidateRange(1, 50)]
        [int]
        ${PasswordHistory},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${PasswordRecovery},

        [Parameter(ParameterSetName='New')]
        [ValidateRange(4, 16)]
        [int]
        ${WipeAfterFailedAttempt},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMExchangeServerConnectorPasswordSetting -Value New-CMExchangeConnectorPasswordSetting

function New-CMExchangeConnectorSecuritySetting
{
    [CmdletBinding()]
    param
    (
        [Parameter(ParameterSetName='New')]
        [System.Object]
        ${Bluetooth},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${Browser},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${Camera},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${FileEncrypt},

        [Parameter(ParameterSetName='New')]
        [Alias('Infra')]
        [bool]
        ${Infrared},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${RemoteDesktop},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${StorageCard},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${StorageCardEncrypt},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${TextMessage},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${WifiConnection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMExchangeServerConnectorSecuritySetting -Value New-CMExchangeConnectorSecuritySetting

function New-CMExchangeServer
{
    [CmdletBinding(DefaultParameterSetName='NewOnPrem', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='NewOnPrem')]
        [Parameter(ParameterSetName='NewHosted')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='NewOnPrem', Mandatory=$true)]
        [Parameter(ParameterSetName='NewHosted', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ServerAddress},

        [Parameter(ParameterSetName='NewOnPrem')]
        [Parameter(ParameterSetName='NewHosted')]
        [bool]
        ${IsHosted},

        [Parameter(ParameterSetName='NewHosted')]
        [switch]
        ${Hosted},

        [Parameter(ParameterSetName='NewOnPrem')]
        [switch]
        ${OnPrem},

        [Parameter(ParameterSetName='NewOnPrem')]
        [ValidateNotNullOrEmpty()]
        [System.Collections.Generic.Dictionary[string,string][]]
        ${ExchangeClientAccessServer},

        [Parameter(ParameterSetName='NewOnPrem')]
        [Parameter(ParameterSetName='NewHosted', Mandatory=$true)]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='NewOnPrem')]
        [Parameter(ParameterSetName='NewHosted')]
        [string]
        ${NotificationUserName},

        [Parameter(ParameterSetName='NewOnPrem')]
        [Parameter(ParameterSetName='NewHosted')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${FullSyncSchedule},

        [Parameter(ParameterSetName='NewOnPrem')]
        [Parameter(ParameterSetName='NewHosted')]
        [Alias('DeltaSyncInterval')]
        [ValidateRange(5, 1440)]
        [int]
        ${DeltaSyncMins},

        [Parameter(ParameterSetName='NewOnPrem')]
        [Parameter(ParameterSetName='NewHosted')]
        [ValidateRange(1, 365)]
        [int]
        ${MaximumInactiveDay},

        [Parameter(ParameterSetName='NewOnPrem')]
        [Parameter(ParameterSetName='NewHosted')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${ActiveDirectoryContainer},

        [Parameter(ParameterSetName='NewOnPrem')]
        [Parameter(ParameterSetName='NewHosted')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${GeneralSetting},

        [Parameter(ParameterSetName='NewOnPrem')]
        [Parameter(ParameterSetName='NewHosted')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${PasswordSetting},

        [Parameter(ParameterSetName='NewOnPrem')]
        [Parameter(ParameterSetName='NewHosted')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${EmailManagementSetting},

        [Parameter(ParameterSetName='NewOnPrem')]
        [Parameter(ParameterSetName='NewHosted')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${SecuritySetting},

        [Parameter(ParameterSetName='NewOnPrem')]
        [Parameter(ParameterSetName='NewHosted')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${ApplicationSetting},

        [Parameter(ParameterSetName='NewOnPrem')]
        [Parameter(ParameterSetName='NewHosted')]
        [bool]
        ${AllowExternalDeviceManagement},

        [bool]
        ${EnableAccessRule},

        [System.Object]
        ${AccessLevel},

        [Alias('EmailAddresses')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${EmailAddress},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMFileReplicationRoute
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${SourceSiteCode},

        [Parameter(Mandatory=$true)]
        [string]
        ${DestinationSiteCode},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DestinationSiteServerName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${FileReplicationAccountName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMFileSystemAccessControlEntry
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${GroupOrUserName},

        [System.Object]
        ${AccessOption},

        [Alias('Permissions')]
        [ValidateNotNull()]
        [ValidateSet('ListFolderContentsOrReadData','CreateFilesOrWriteData','CreateFoldersOrAppendData','ReadExtendedAttributes','WriteExtendedAttributes','TraverseFolderOrExecuteFile','DeleteSubfoldersAndFiles','ReadAttributes','WriteAttributes','Write','Delete','ReadPermissions','Read','Execute','ChangePermissions','TakeOwnership','FullControl')]
        [System.Object[]]
        ${Permission},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMGlobalCondition
{
    [CmdletBinding(DefaultParameterSetName='NewADQuery', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [string]
        ${Description},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${DeviceType},

        [Parameter(ParameterSetName='NewADQuery', Mandatory=$true)]
        [Parameter(ParameterSetName='NewIisMetabase', Mandatory=$true)]
        [Parameter(ParameterSetName='NewRegistryValue', Mandatory=$true)]
        [Parameter(ParameterSetName='NewScript', Mandatory=$true)]
        [Parameter(ParameterSetName='NewSqlQueryDefaultInstance', Mandatory=$true)]
        [Parameter(ParameterSetName='NewSqlQueryAllInstances', Mandatory=$true)]
        [Parameter(ParameterSetName='NewSqlQuerySpecificInstance', Mandatory=$true)]
        [Parameter(ParameterSetName='NewWqlQuery', Mandatory=$true)]
        [Parameter(ParameterSetName='NewXPathQuery', Mandatory=$true)]
        [Parameter(ParameterSetName='NewXPathQueryFromFile', Mandatory=$true)]
        [Parameter(ParameterSetName='NewOmaUri', Mandatory=$true)]
        [System.Object]
        ${DataType},

        [Parameter(ParameterSetName='NewADQuery')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${LdapPrefix},

        [Parameter(ParameterSetName='NewADQuery', Mandatory=$true)]
        [string]
        ${DistinguishedName},

        [Parameter(ParameterSetName='NewADQuery', Mandatory=$true)]
        [string]
        ${LdapFilter},

        [Parameter(ParameterSetName='NewADQuery', Mandatory=$true)]
        [System.Object]
        ${SearchScope},

        [Parameter(ParameterSetName='NewADQuery', Mandatory=$true)]
        [Parameter(ParameterSetName='NewWqlQuery', Mandatory=$true)]
        [string]
        ${Property},

        [Parameter(ParameterSetName='NewAssembly', Mandatory=$true)]
        [string]
        ${AssemblyName},

        [Parameter(ParameterSetName='NewFileSystem')]
        [switch]
        ${IsFolder},

        [Parameter(ParameterSetName='NewFileSystem', Mandatory=$true)]
        [string]
        ${Path},

        [Parameter(ParameterSetName='NewFileSystem', Mandatory=$true)]
        [string]
        ${FileOrFolderName},

        [Parameter(ParameterSetName='NewFileSystemFile', Mandatory=$true)]
        [Parameter(ParameterSetName='NewScript', Mandatory=$true)]
        [Parameter(ParameterSetName='NewSqlQueryDefaultInstance', Mandatory=$true)]
        [Parameter(ParameterSetName='NewSqlQueryAllInstances', Mandatory=$true)]
        [Parameter(ParameterSetName='NewSqlQuerySpecificInstance', Mandatory=$true)]
        [Parameter(ParameterSetName='NewXPathQueryFromFile', Mandatory=$true)]
        [Parameter(ParameterSetName='NewXPathQuery', Mandatory=$true)]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='NewXPathQueryFromFile', Mandatory=$true)]
        [string]
        ${XmlFilePath},

        [Parameter(ParameterSetName='NewFileSystem')]
        [Parameter(ParameterSetName='NewFileSystemFile')]
        [Parameter(ParameterSetName='NewXPathQuery')]
        [Parameter(ParameterSetName='NewXPathQueryFromFile')]
        [Alias('IncludeSubfolders')]
        [bool]
        ${IncludeSubfolder},

        [Parameter(ParameterSetName='NewFileSystem')]
        [Parameter(ParameterSetName='NewFileSystemFile')]
        [Parameter(ParameterSetName='NewRegistryKey')]
        [Parameter(ParameterSetName='NewRegistryValue')]
        [Parameter(ParameterSetName='NewXPathQuery')]
        [Parameter(ParameterSetName='NewXPathQueryFromFile')]
        [bool]
        ${Is64Bit},

        [Parameter(ParameterSetName='NewIisMetabase')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MetabasePath},

        [Parameter(ParameterSetName='NewIisMetabase', Mandatory=$true)]
        [string]
        ${PropertyId},

        [Parameter(ParameterSetName='NewRegistryKey', Mandatory=$true)]
        [Parameter(ParameterSetName='NewRegistryValue', Mandatory=$true)]
        [System.Object]
        ${RegistryHive},

        [Parameter(ParameterSetName='NewRegistryKey', Mandatory=$true)]
        [Parameter(ParameterSetName='NewRegistryValue', Mandatory=$true)]
        [string]
        ${KeyName},

        [Parameter(ParameterSetName='NewRegistryValue', Mandatory=$true)]
        [string]
        ${ValueName},

        [Parameter(ParameterSetName='NewScript', Mandatory=$true)]
        [System.Object]
        ${ScriptLanguage},

        [Parameter(ParameterSetName='NewScript')]
        [Alias('UseLoggedOnUserCredentials')]
        [bool]
        ${UseLoggedOnUserCredential},

        [Parameter(ParameterSetName='NewScript')]
        [bool]
        ${Use32BitHost},

        [Parameter(ParameterSetName='NewSqlQueryDefaultInstance', Mandatory=$true)]
        [Alias('UseDefaultInstance')]
        [switch]
        ${DefaultInstance},

        [Parameter(ParameterSetName='NewSqlQueryAllInstances', Mandatory=$true)]
        [Alias('UseAllInstances')]
        [switch]
        ${AllInstances},

        [Parameter(ParameterSetName='NewSqlQuerySpecificInstance', Mandatory=$true)]
        [string]
        ${InstanceName},

        [Parameter(ParameterSetName='NewSqlQueryDefaultInstance', Mandatory=$true)]
        [Parameter(ParameterSetName='NewSqlQueryAllInstances', Mandatory=$true)]
        [Parameter(ParameterSetName='NewSqlQuerySpecificInstance', Mandatory=$true)]
        [string]
        ${Database},

        [Parameter(ParameterSetName='NewSqlQueryDefaultInstance', Mandatory=$true)]
        [Parameter(ParameterSetName='NewSqlQueryAllInstances', Mandatory=$true)]
        [Parameter(ParameterSetName='NewSqlQuerySpecificInstance', Mandatory=$true)]
        [string]
        ${Column},

        [Parameter(ParameterSetName='NewWqlQuery')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Namespace},

        [Parameter(ParameterSetName='NewWqlQuery', Mandatory=$true)]
        [string]
        ${Class},

        [Parameter(ParameterSetName='NewWqlQuery')]
        [string]
        ${WhereClause},

        [Parameter(ParameterSetName='NewXPathQuery')]
        [Parameter(ParameterSetName='NewXPathQueryFromFile')]
        [Alias('XmlNamespaces')]
        [string[]]
        ${XmlNamespace},

        [Parameter(ParameterSetName='NewXPathQuery', Mandatory=$true)]
        [string]
        ${XPathQuery},

        [Parameter(ParameterSetName='NewOmaUri', Mandatory=$true)]
        [string]
        ${OmaUri},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMGlobalConditionActiveDirectoryQuery
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('String','DateTime','Integer','FloatingPoint','Version','Boolean','StringArray','IntegerArray')]
        [System.Object]
        ${DataType},

        [string]
        ${LdapPrefix},

        [Parameter(Mandatory=$true)]
        [string]
        ${DistinguishedName},

        [Parameter(Mandatory=$true)]
        [string]
        ${LdapFilter},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${SearchScope},

        [Parameter(Mandatory=$true)]
        [string]
        ${Property},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [string]
        ${Description},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMGlobalConditionAssembly
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${AssemblyName},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [string]
        ${Description},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMGlobalConditionExpression
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [System.Object]
        ${RootExpression},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [string]
        ${Description},

        [Parameter(Mandatory=$true)]
        [ValidateSet('Windows','WindowsMobile')]
        [System.Object]
        ${DeviceType},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMGlobalConditionFile
{
    [CmdletBinding(DefaultParameterSetName='NewFileSystem')]
    param
    (
        [Parameter(ParameterSetName='NewFileSystem')]
        [switch]
        ${IsFolder},

        [Parameter(ParameterSetName='NewFileSystem', Mandatory=$true)]
        [string]
        ${Path},

        [Parameter(ParameterSetName='NewFileSystem', Mandatory=$true)]
        [Alias('FileName','FolderName')]
        [string]
        ${FileOrFolderName},

        [Parameter(ParameterSetName='NewFileSystemFile', Mandatory=$true)]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='NewFileSystem')]
        [Parameter(ParameterSetName='NewFileSystemFile')]
        [Alias('IncludeSubfolders')]
        [bool]
        ${IncludeSubfolder},

        [Parameter(ParameterSetName='NewFileSystem')]
        [Parameter(ParameterSetName='NewFileSystemFile')]
        [bool]
        ${Is64Bit},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [string]
        ${Description},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMGlobalConditionIisMetabase
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('String','DateTime','Integer','FloatingPoint','Version','Boolean','StringArray')]
        [System.Object]
        ${DataType},

        [ValidateNotNullOrEmpty()]
        [string]
        ${MetabasePath},

        [Parameter(Mandatory=$true)]
        [ValidateRange(0, 65535)]
        [int]
        ${PropertyId},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [string]
        ${Description},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMGlobalConditionOmaUri
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('String','DateTime','Integer','FloatingPoint','Version','Boolean','Xml','StringArray','Base64')]
        [System.Object]
        ${DataType},

        [Parameter(Mandatory=$true)]
        [string]
        ${OmaUri},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [string]
        ${Description},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMGlobalConditionRegistryKey
{
    [CmdletBinding()]
    param
    (
        [bool]
        ${Is64Bit},

        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${RegistryHive},

        [Parameter(Mandatory=$true)]
        [string]
        ${KeyName},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [string]
        ${Description},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMGlobalConditionRegistryValue
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('String','DateTime','Integer','FloatingPoint','Version','StringArray')]
        [System.Object]
        ${DataType},

        [bool]
        ${Is64Bit},

        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${RegistryHive},

        [Parameter(Mandatory=$true)]
        [string]
        ${KeyName},

        [string]
        ${ValueName},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [string]
        ${Description},

        [Parameter(Mandatory=$true)]
        [ValidateSet('Windows','WindowsMobile')]
        [System.Object]
        ${DeviceType},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMGlobalConditionScript
{
    [CmdletBinding(DefaultParameterSetName='NewScriptFromFile')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('String','DateTime','Integer','FloatingPoint','Version','Boolean')]
        [System.Object]
        ${DataType},

        [Parameter(ParameterSetName='NewScriptFromFile', Mandatory=$true)]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='NewScriptFromText', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ScriptText},

        [Parameter(Mandatory=$true)]
        [ValidateSet('JScript','PowerShell','VBScript')]
        [System.Object]
        ${ScriptLanguage},

        [Alias('UseLoggedOnUserCredentials')]
        [bool]
        ${UseLoggedOnUserCredential},

        [bool]
        ${Use32BitHost},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [string]
        ${Description},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMGlobalConditionSqlQuery
{
    [CmdletBinding(DefaultParameterSetName='NewQueryFromFile')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('String','DateTime','Integer','FloatingPoint','Version','Boolean')]
        [System.Object]
        ${DataType},

        [Parameter(ParameterSetName='NewQueryFromFile', Mandatory=$true)]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='NewQueryFromText', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${QueryText},

        [Alias('UseAllInstances')]
        [switch]
        ${AllInstances},

        [string]
        ${InstanceName},

        [Parameter(Mandatory=$true)]
        [string]
        ${Database},

        [Parameter(Mandatory=$true)]
        [string]
        ${Column},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [string]
        ${Description},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMGlobalConditionWqlQuery
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('String','DateTime','Integer','FloatingPoint','Version','Boolean','StringArray','IntegerArray')]
        [System.Object]
        ${DataType},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Namespace},

        [Parameter(Mandatory=$true)]
        [string]
        ${Class},

        [Parameter(Mandatory=$true)]
        [string]
        ${Property},

        [ValidateLength(0, 200000)]
        [string]
        ${WhereClause},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [string]
        ${Description},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMGlobalConditionXPathQuery
{
    [CmdletBinding(DefaultParameterSetName='NewQueryFromFile')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('String','DateTime','Integer','FloatingPoint','Version','Boolean')]
        [System.Object]
        ${DataType},

        [Parameter(Mandatory=$true)]
        [string]
        ${XmlFilePath},

        [Parameter(ParameterSetName='NewQueryFromFile', Mandatory=$true)]
        [string]
        ${XPathQueryFilePath},

        [Alias('IncludeSubfolders')]
        [bool]
        ${IncludeSubfolder},

        [bool]
        ${Is64Bit},

        [Alias('XmlNamespaces')]
        [string[]]
        ${XmlNamespace},

        [Parameter(ParameterSetName='NewQueryFromText', Mandatory=$true)]
        [string]
        ${XPathQuery},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [string]
        ${Description},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMHardwareRequirement
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [string]
        ${Product},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [int]
        ${MinCpu},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [long]
        ${MinDiskFree},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [long]
        ${MinDiskSize},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [long]
        ${MinRam},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMInstallationSourceFile
{
    [CmdletBinding(DefaultParameterSetName='NewInstallationSourceFilesByNetworkLocation', ConfirmImpact='None')]
    param
    (
        [Parameter(ParameterSetName='NewInstallationSourceFilesByParent', Mandatory=$true)]
        [switch]
        ${CopyFromParentSiteServer},

        [Parameter(ParameterSetName='NewInstallationSourceFilesByNetworkLocation', Mandatory=$true)]
        [switch]
        ${CopyFromNetworkLocation},

        [Parameter(ParameterSetName='NewInstallationSourceFilesByNetworkLocation', Mandatory=$true)]
        [string]
        ${UncPath},

        [Parameter(ParameterSetName='NewInstallationSourceFilesBySecondaryLocation', Mandatory=$true)]
        [switch]
        ${CopyFromSecondarySiteLocation},

        [Parameter(ParameterSetName='NewInstallationSourceFilesBySecondaryLocation', Mandatory=$true)]
        [string]
        ${LocalPath},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMInventoryReportClass
{
    [CmdletBinding(DefaultParameterSetName='ById', ConfirmImpact='Low')]
    param
    (
        [Parameter(ParameterSetName='ById', Mandatory=$true, Position=0)]
        [Alias('SMSClassID')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('InventoryClass')]
        [PSTypeName('IResultObject#SMS_InventoryClass')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('ClassName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByValue')]
        [Parameter(ParameterSetName='ByName')]
        [Alias('ReportProperties')]
        [string[]]
        ${ReportProperty},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMIosEnrollmentProfile
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('ProfileName')]
        [string]
        ${Name},

        [Alias('ProfileDescription')]
        [string]
        ${Description},

        [string]
        ${Department},

        [Alias('SupportPhoneNumber')]
        [string]
        ${SupportPhone},

        [Alias('UserAffinity')]
        [System.Object]
        ${Affinity},

        [System.Object]
        ${Preparation},

        [Alias('LockEnrollmentProfileToDevice')]
        [bool]
        ${IsMdmRemovable},

        [Alias('ConfigureDeviceEnrollmentProgram')]
        [bool]
        ${IsDepEnable},

        [bool]
        ${Passcode},

        [bool]
        ${Location},

        [bool]
        ${Restore},

        [bool]
        ${AppleId},

        [bool]
        ${TermAndCondition},

        [bool]
        ${TouchId},

        [bool]
        ${ApplePay},

        [bool]
        ${Zoom},

        [bool]
        ${Siri},

        [bool]
        ${Diagnostic},

        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${AllowPairingType},

        [Alias('AddCertificatePaths')]
        [string[]]
        ${AddCertificatePath},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMMaintenanceWindow
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByCollectionId', Mandatory=$true, Position=0)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='ByCollectionName', Mandatory=$true, Position=0)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Collection','Site')]
        [System.Object]
        ${InputObject},

        [bool]
        ${IsEnabled},

        [Parameter(Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [Parameter(Mandatory=$true)]
        [Alias('MaintenanceWindowName')]
        [string]
        ${Name},

        [System.Object]
        ${ApplyTo},

        [switch]
        ${ApplyToTaskSequenceOnly},

        [switch]
        ${ApplyToSoftwareUpdateOnly},

        [bool]
        ${IsUtc},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMMigrationJob
{
    [CmdletBinding(DefaultParameterSetName='NewMigrationJobByObject', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='NewMigrationJobByCollectionNotMigrateObject')]
        [Parameter(ParameterSetName='NewMigrationJobByCollectionMigrateObject')]
        [ValidateNotNullOrEmpty()]
        [hashtable]
        ${CollectionLimitingMapping},

        [Parameter(ParameterSetName='NewMigrationJobByCollectionNotMigrateObject', Mandatory=$true)]
        [Parameter(ParameterSetName='NewMigrationJobByCollectionMigrateObject', Mandatory=$true)]
        [switch]
        ${CollectionMigrationJobType},

        [Parameter(ParameterSetName='NewMigrationJobByCollectionMigrateObject')]
        [Parameter(ParameterSetName='NewMigrationJobByObject')]
        [Parameter(ParameterSetName='NewMigrationJobByObjectModified')]
        [ValidateNotNullOrEmpty()]
        [hashtable]
        ${ContentObjectsSiteCodeMapping},

        [ValidateNotNullOrEmpty()]
        [ValidateLength(0, 512)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='NewMigrationJobByCollectionNotMigrateObject')]
        [Parameter(ParameterSetName='NewMigrationJobByCollectionMigrateObject')]
        [bool]
        ${EnableProgramAfterAdvertisementMigrated},

        [Parameter(ParameterSetName='NewMigrationJobByCollectionMigrateObject', Mandatory=$true)]
        [switch]
        ${MigrateObjectWithSpecifiedCollection},

        [Parameter(ParameterSetName='NewMigrationJobByCollectionMigrateObject', Mandatory=$true)]
        [Parameter(ParameterSetName='NewMigrationJobByCollectionNotMigrateObject', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_MigrationCollectionInfo')]
        [System.Object[]]
        ${MigrationCollection},

        [datetime]
        ${MigrationJobSchedule},

        [Parameter(ParameterSetName='NewMigrationJobByObject', Mandatory=$true)]
        [Parameter(ParameterSetName='NewMigrationJobByObjectModified', Mandatory=$true)]
        [Parameter(ParameterSetName='NewMigrationJobByCollectionMigrateObject', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_MigrationEntity')]
        [System.Object[]]
        ${MigrationObject},

        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 255)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='NewMigrationJobByObject', Mandatory=$true)]
        [switch]
        ${ObjectMigrationJobType},

        [Parameter(ParameterSetName='NewMigrationJobByObjectModified', Mandatory=$true)]
        [switch]
        ${ObjectModifiedAfterMigrationJobType},

        [bool]
        ${OverwriteAllObject},

        [Parameter(ParameterSetName='NewMigrationJobByCollectionNotMigrateObject')]
        [Parameter(ParameterSetName='NewMigrationJobByCollectionMigrateObject')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SaveCollectionInfoPath},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SaveObjectInfoPath},

        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${SecurityScope},

        [Parameter(ParameterSetName='NewMigrationJobByCollectionNotMigrateObject')]
        [Parameter(ParameterSetName='NewMigrationJobByCollectionMigrateObject')]
        [Parameter(ParameterSetName='NewMigrationJobByObject')]
        [Parameter(ParameterSetName='NewMigrationJobByObjectModified')]
        [ValidateNotNullOrEmpty()]
        [hashtable]
        ${SiteCodeReplacementMapping},

        [bool]
        ${TransferOrganizationalFolderStructure},

        [bool]
        ${UtcTime},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMOperatingSystemImage
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [Alias('PackageSourcePath')]
        [string]
        ${Path},

        [Parameter(ParameterSetName='New')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Version},

        [Parameter(ParameterSetName='New')]
        [string]
        ${Description},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMOperatingSystemImageUpdateSchedule
{
    [CmdletBinding(DefaultParameterSetName='NewScheduleByInputObject', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='NewScheduleByNameRunNow', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='NewScheduleByIdRunNow', Mandatory=$true)]
        [Alias('PackageId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [bool]
        ${ContinueOnError},

        [Alias('CleanUp')]
        [bool]
        ${RemoveSupersededUpdates},

        [Parameter(ParameterSetName='NewScheduleByName')]
        [Parameter(ParameterSetName='NewScheduleById')]
        [Parameter(ParameterSetName='NewScheduleByInputObject')]
        [Parameter(ParameterSetName='NewScheduleByScheduleInputObject')]
        [datetime]
        ${CustomSchedule},

        [Parameter(ParameterSetName='NewScheduleByInputObject', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='NewScheduleByInputObjectRunNow', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ImagePackage')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='NewScheduleByNameRunNow')]
        [Parameter(ParameterSetName='NewScheduleByIdRunNow')]
        [Parameter(ParameterSetName='NewScheduleByInputObjectRunNow')]
        [Parameter(ParameterSetName='NewScheduleByScheduleInputObjectRunNow')]
        [switch]
        ${RunNow},

        [Parameter(Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_SoftwareUpdate')]
        [System.Object[]]
        ${SoftwareUpdate},

        [Alias('UpdateDistributionPointsWithImage','UpdateDistributionPoints')]
        [bool]
        ${UpdateDistributionPoint},

        [Parameter(ParameterSetName='NewScheduleByName')]
        [Parameter(ParameterSetName='NewScheduleById')]
        [Parameter(ParameterSetName='NewScheduleByInputObject')]
        [Parameter(ParameterSetName='NewScheduleByScheduleInputObject')]
        [bool]
        ${Utc},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMOperatingSystemInstaller
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [Alias('PackageSourcePath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Path},

        [Parameter(ParameterSetName='New')]
        [string]
        ${Description},

        [Parameter(ParameterSetName='New')]
        [string]
        ${Version},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMOperatingSystemUpgradePackage -Value New-CMOperatingSystemInstaller

function New-CMOperatingSystemUpgradeUpdateSchedule
{
    [CmdletBinding(DefaultParameterSetName='NewScheduleByInputObject', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='NewScheduleByNameRunNow', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='NewScheduleByIdRunNow', Mandatory=$true)]
        [Alias('PackageId')]
        [string]
        ${Id},

        [bool]
        ${ContinueOnError},

        [Alias('CleanUp')]
        [bool]
        ${RemoveSupersededUpdates},

        [Parameter(ParameterSetName='NewScheduleByName')]
        [Parameter(ParameterSetName='NewScheduleById')]
        [Parameter(ParameterSetName='NewScheduleByInputObject')]
        [Parameter(ParameterSetName='NewScheduleByScheduleInputObject')]
        [datetime]
        ${CustomSchedule},

        [Parameter(ParameterSetName='NewScheduleByInputObject', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='NewScheduleByInputObjectRunNow', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_OperatingSystemInstallPackage')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='NewScheduleByNameRunNow')]
        [Parameter(ParameterSetName='NewScheduleByIdRunNow')]
        [Parameter(ParameterSetName='NewScheduleByInputObjectRunNow')]
        [Parameter(ParameterSetName='NewScheduleByScheduleInputObjectRunNow')]
        [switch]
        ${RunNow},

        [Parameter(Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_SoftwareUpdate')]
        [System.Object[]]
        ${SoftwareUpdate},

        [Alias('UpdateDistributionPointsWithImage','UpdateDistributionPoints')]
        [bool]
        ${UpdateDistributionPoint},

        [Parameter(ParameterSetName='NewScheduleByName')]
        [Parameter(ParameterSetName='NewScheduleById')]
        [Parameter(ParameterSetName='NewScheduleByInputObject')]
        [Parameter(ParameterSetName='NewScheduleByScheduleInputObject')]
        [bool]
        ${Utc},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMOperatingSystemUpgradePackageUpdateSchedule -Value New-CMOperatingSystemUpgradeUpdateSchedule

function New-CMPackage
{
    [CmdletBinding(DefaultParameterSetName='New', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='New')]
        [string]
        ${Description},

        [Parameter(ParameterSetName='New')]
        [string]
        ${Manufacturer},

        [Parameter(ParameterSetName='New')]
        [string]
        ${Language},

        [Parameter(ParameterSetName='New')]
        [string]
        ${Version},

        [Parameter(ParameterSetName='New')]
        [Alias('PackageSourcePath')]
        [string]
        ${Path},

        [Parameter(ParameterSetName='NewPackageByDefinitionNoSourceFileWithExisted', Mandatory=$true)]
        [Parameter(ParameterSetName='NewPackageByDefinitionNoSourceFileWithNew', Mandatory=$true)]
        [Parameter(ParameterSetName='NewPackageByDefinitionSourceFileWithExisted', Mandatory=$true)]
        [Parameter(ParameterSetName='NewPackageByDefinitionSourceFileWithNew', Mandatory=$true)]
        [switch]
        ${FromDefinition},

        [Parameter(ParameterSetName='NewPackageByDefinitionSourceFileWithNew', Mandatory=$true)]
        [Parameter(ParameterSetName='NewPackageByDefinitionNoSourceFileWithNew', Mandatory=$true)]
        [string]
        ${PackagePath},

        [Parameter(ParameterSetName='NewPackageByDefinitionNoSourceFileWithExisted', Mandatory=$true)]
        [Parameter(ParameterSetName='NewPackageByDefinitionSourceFileWithExisted', Mandatory=$true)]
        [string]
        ${PackageDefinitionName},

        [Parameter(ParameterSetName='NewPackageByDefinitionNoSourceFileWithExisted', Mandatory=$true)]
        [Parameter(ParameterSetName='NewPackageByDefinitionNoSourceFileWithNew', Mandatory=$true)]
        [switch]
        ${PackageNoSourceFile},

        [Parameter(ParameterSetName='NewPackageByDefinitionSourceFileWithExisted', Mandatory=$true)]
        [Parameter(ParameterSetName='NewPackageByDefinitionSourceFileWithNew', Mandatory=$true)]
        [System.Object]
        ${SourceFileType},

        [Parameter(ParameterSetName='NewPackageByDefinitionSourceFileWithExisted', Mandatory=$true)]
        [Parameter(ParameterSetName='NewPackageByDefinitionSourceFileWithNew', Mandatory=$true)]
        [System.Object]
        ${SourceFolderPathType},

        [Parameter(ParameterSetName='NewPackageByDefinitionSourceFileWithExisted', Mandatory=$true)]
        [Parameter(ParameterSetName='NewPackageByDefinitionSourceFileWithNew', Mandatory=$true)]
        [string]
        ${SourceFolderPath},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMPackageDeployment
{
    [CmdletBinding(DefaultParameterSetName='DeployStandardProgramByPackageValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue', Mandatory=$true)]
        [switch]
        ${DeviceProgram},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue', Mandatory=$true)]
        [switch]
        ${StandardProgram},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName', Mandatory=$true)]
        [string]
        ${PackageName},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageId', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId', Mandatory=$true)]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object]
        ${Package},

        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Program')]
        [System.Object]
        ${Program},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue', Mandatory=$true)]
        [Alias('StandardProgramName','DeviceProgramName')]
        [string]
        ${ProgramName},

        [System.Object]
        ${DeployPurpose},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue')]
        [bool]
        ${SendWakeupPacket},

        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue')]
        [bool]
        ${UseUtc},

        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue')]
        [int]
        ${RecurValue},

        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue')]
        [System.Object]
        ${RecurUnit},

        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue')]
        [bool]
        ${Rerun},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [bool]
        ${UseUtcForAvailableSchedule},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [bool]
        ${UseUtcForExpireSchedule},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${ScheduleEvent},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object[]]
        ${Schedule},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [System.Object]
        ${RerunBehavior},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [Alias('AllowUsersRunIndependently')]
        [bool]
        ${RunFromSoftwareCenter},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [bool]
        ${SoftwareInstallation},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [bool]
        ${SystemRestart},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [bool]
        ${PersistOnWriteFilterDevice},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [System.Object]
        ${FastNetworkOption},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [System.Object]
        ${SlowNetworkOption},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [bool]
        ${AllowSharedContent},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [bool]
        ${AllowFallback},

        [switch]
        ${DistributeContent},

        [string]
        ${DistributeCollectionName},

        [string]
        ${DistributionPointGroupName},

        [string]
        ${DistributionPointName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Comment},

        [datetime]
        ${AvailableDateTime},

        [datetime]
        ${DeadlineDateTime},

        [bool]
        ${UseMeteredNetwork},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMPowerManagementCustomPlan
{
    [CmdletBinding(DefaultParameterSetName='Peak')]
    param
    (
        [string]
        ${Name},

        [string]
        ${Description},

        [Parameter(ParameterSetName='Peak', Mandatory=$true)]
        [switch]
        ${Peak},

        [Parameter(ParameterSetName='NonPeak', Mandatory=$true)]
        [switch]
        ${NonPeak},

        [int]
        ${DisplayOffMinAC},

        [int]
        ${DisplayOffMinDC},

        [switch]
        ${NoDisplayOff},

        [int]
        ${SleepMinAC},

        [int]
        ${SleepMinDC},

        [switch]
        ${NoSleep},

        [bool]
        ${RequirePasswordOnWakeDC},

        [bool]
        ${RequirePasswordOnWakeAC},

        [switch]
        ${NoRequirePasswordOnWake},

        [System.Object]
        ${PowerButtonAC},

        [System.Object]
        ${PowerButtonDC},

        [switch]
        ${NoPowerButton},

        [ValidateSet('Sleep','Hibernate','Shutdown')]
        [System.Object]
        ${StartButtonAC},

        [ValidateSet('Sleep','Hibernate','Shutdown')]
        [System.Object]
        ${StartButtonDC},

        [switch]
        ${NoStartButton},

        [System.Object]
        ${SleepButtonAC},

        [System.Object]
        ${SleepButtonDC},

        [switch]
        ${NoSleepButton},

        [System.Object]
        ${LidDownAC},

        [System.Object]
        ${LidDownDC},

        [switch]
        ${NoLidDown},

        [int]
        ${HardDiskIdleMinDC},

        [int]
        ${HardDiskIdleMinAC},

        [switch]
        ${NoHardDiskIdle},

        [int]
        ${HibernateMinDC},

        [int]
        ${HibernateMinAC},

        [switch]
        ${NoHibernate},

        [System.Object]
        ${LowBatteryAC},

        [System.Object]
        ${LowBatteryDC},

        [switch]
        ${NoLowBattery},

        [System.Object]
        ${CriticalBatteryAC},

        [System.Object]
        ${CriticalBatteryDC},

        [switch]
        ${NoCriticalBattery},

        [bool]
        ${AllowHybridSleepAC},

        [bool]
        ${AllowHybridSleepDC},

        [switch]
        ${NoHybridSleep},

        [bool]
        ${AllowStandbyAC},

        [bool]
        ${AllowStandbyDC},

        [switch]
        ${NoAllowStandby},

        [ValidateRange(0, 100)]
        [int]
        ${SleepIdlePctDC},

        [ValidateRange(0, 100)]
        [int]
        ${SleepIdlePctAC},

        [switch]
        ${NoSleepIdle},

        [bool]
        ${WakeOnTimerAC},

        [bool]
        ${WakeOnTimerDC},

        [switch]
        ${NoWakeOnTimer},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMPrestageMedia
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [Alias('Applications')]
        [System.Object[]]
        ${Application},

        [ValidateLength(0, 128)]
        [string]
        ${Comment},

        [string]
        ${CreatedBy},

        [Alias('DriverPackages','PackageDriver','PackageDrivers')]
        [PSTypeName('IResultObject#SMS_DriverPackage')]
        [System.Object[]]
        ${DriverPackage},

        [Parameter(Mandatory=$true)]
        [Alias('OperatingSystemImagePackage')]
        [PSTypeName('IResultObject#SMS_ImagePackage')]
        [System.Object]
        ${OperatingSystemImage},

        [ValidateRange(1, 256)]
        [int]
        ${OperatingSystemImageIndex},

        [Alias('Packages')]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object[]]
        ${Package},

        [ValidateLength(0, 33)]
        [string]
        ${Version},

        [Alias('IncludeApplicationDependencies')]
        [switch]
        ${IncludeApplicationDependency},

        [Parameter(Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${TaskSequence},

        [switch]
        ${AllowUacPrompt},

        [switch]
        ${AllowUnattended},

        [switch]
        ${AllowUnknownMachine},

        [Parameter(Mandatory=$true)]
        [Alias('BootImagePackage')]
        [PSTypeName('IResultObject#SMS_BootImagePackage')]
        [System.Object]
        ${BootImage},

        [datetime]
        ${CertificateExpireTime},

        [securestring]
        ${CertificatePassword},

        [string]
        ${CertificatePath},

        [datetime]
        ${CertificateStartTime},

        [Parameter(Mandatory=$true)]
        [Alias('DistributionPoints')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Distribution Point')]
        [System.Object[]]
        ${DistributionPoint},

        [switch]
        ${Force},

        [Parameter(Mandatory=$true)]
        [Alias('ManagementPoints')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Management Point')]
        [System.Object[]]
        ${ManagementPoint},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${MediaMode},

        [ValidateNotNullOrEmpty()]
        [securestring]
        ${MediaPassword},

        [Parameter(Mandatory=$true)]
        [Alias('MediaPath','OutputPath','DriveName')]
        [string]
        ${Path},

        [Alias('TemporaryDirectory','StagingArea')]
        [string]
        ${TemporaryFolder},

        [Alias('PreExecCommandLine')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${PrestartCommand},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object]
        ${PrestartPackage},

        [System.Object]
        ${UserDeviceAffinity},

        [Alias('TaskSequenceVariables','Variables')]
        [hashtable]
        ${Variable},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMPrestagedMedia -Value New-CMPrestageMedia

function New-CMProgram
{
    [CmdletBinding(DefaultParameterSetName='NewStandardProgram', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='NewStandardProgram')]
        [Parameter(ParameterSetName='NewStandardProgramById')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DriveLetter},

        [Parameter(ParameterSetName='NewStandardProgram')]
        [Parameter(ParameterSetName='NewDeviceProgram')]
        [Parameter(ParameterSetName='NewDeviceProgramById')]
        [Parameter(ParameterSetName='NewStandardProgramById')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${WorkingDirectory},

        [Parameter(ParameterSetName='NewStandardProgram', Mandatory=$true)]
        [Parameter(ParameterSetName='NewDeviceProgram', Mandatory=$true)]
        [Parameter(ParameterSetName='NewDeviceProgramById', Mandatory=$true)]
        [Parameter(ParameterSetName='NewStandardProgramById', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CommandLine},

        [Parameter(ParameterSetName='NewStandardProgram')]
        [Parameter(ParameterSetName='NewDeviceProgram')]
        [Parameter(ParameterSetName='NewDeviceProgramById')]
        [Parameter(ParameterSetName='NewStandardProgramById')]
        [Alias('DiskSpaceReq')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DiskSpaceRequirement},

        [Parameter(ParameterSetName='NewStandardProgram')]
        [Parameter(ParameterSetName='NewStandardProgramById')]
        [int]
        ${Duration},

        [Parameter(ParameterSetName='NewDeviceProgram')]
        [Parameter(ParameterSetName='NewDeviceProgramById')]
        [Alias('Requirements')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Requirement},

        [Parameter(ParameterSetName='NewStandardProgram', Mandatory=$true)]
        [Parameter(ParameterSetName='NewDeviceProgram', Mandatory=$true)]
        [string]
        ${PackageName},

        [Parameter(ParameterSetName='NewStandardProgramById', Mandatory=$true)]
        [Parameter(ParameterSetName='NewDeviceProgramById', Mandatory=$true)]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='NewStandardProgram', Mandatory=$true)]
        [Parameter(ParameterSetName='NewStandardProgramById', Mandatory=$true)]
        [string]
        ${StandardProgramName},

        [Parameter(ParameterSetName='NewStandardProgram')]
        [Parameter(ParameterSetName='NewStandardProgramById')]
        [System.Object]
        ${RunType},

        [Parameter(ParameterSetName='NewStandardProgram')]
        [Parameter(ParameterSetName='NewStandardProgramById')]
        [System.Object]
        ${ProgramRunType},

        [Parameter(ParameterSetName='NewStandardProgram')]
        [Parameter(ParameterSetName='NewStandardProgramById')]
        [System.Object]
        ${RunMode},

        [Parameter(ParameterSetName='NewStandardProgram')]
        [Parameter(ParameterSetName='NewStandardProgramById')]
        [bool]
        ${UserInteraction},

        [Parameter(ParameterSetName='NewStandardProgram')]
        [Parameter(ParameterSetName='NewStandardProgramById')]
        [bool]
        ${Reconnect},

        [Parameter(ParameterSetName='NewStandardProgram')]
        [Parameter(ParameterSetName='NewStandardProgramById')]
        [System.Object]
        ${DriveMode},

        [Parameter(ParameterSetName='NewStandardProgram')]
        [Parameter(ParameterSetName='NewDeviceProgram')]
        [Parameter(ParameterSetName='NewStandardProgramById')]
        [Parameter(ParameterSetName='NewDeviceProgramById')]
        [System.Object]
        ${DiskSpaceUnit},

        [Parameter(ParameterSetName='NewDeviceProgram', Mandatory=$true)]
        [Parameter(ParameterSetName='NewDeviceProgramById', Mandatory=$true)]
        [string]
        ${DeviceProgramName},

        [Parameter(ParameterSetName='NewDeviceProgram')]
        [Parameter(ParameterSetName='NewDeviceProgramById')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Comment},

        [Parameter(ParameterSetName='NewDeviceProgram')]
        [Parameter(ParameterSetName='NewDeviceProgramById')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CommandLineFolder},

        [Parameter(ParameterSetName='NewDeviceProgram')]
        [Parameter(ParameterSetName='NewDeviceProgramById')]
        [System.Object]
        ${DownloadProgramType},

        [Parameter(ParameterSetName='NewStandardProgram')]
        [Parameter(ParameterSetName='NewStandardProgramById')]
        [Alias('AddSupportedOperatingSystemPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${AddSupportedOperatingSystemPlatform},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMQuery
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [string]
        ${Comment},

        [Parameter(Mandatory=$true)]
        [string]
        ${Expression},

        [string]
        ${LimitToCollectionId},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [string]
        ${TargetClassName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMRegistryAccessControlEntry
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${GroupOrUserName},

        [System.Object]
        ${AccessOption},

        [Alias('Permissions')]
        [ValidateNotNull()]
        [ValidateSet('ChangePermissions','CreateLink','CreateSubkey','Delete','EnumerateSubkeys','FullControl','Notify','QueryValue','Read','ReadPermissions','SetValue','TakeOwnership','Write')]
        [System.Object[]]
        ${Permission},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMRemoteConnectionProfileConfigurationItem
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [Alias('LocalizedDisplayName')]
        [ValidateLength(1, 255)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='New')]
        [Alias('LocalizedDescription')]
        [ValidateLength(0, 512)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${EnableTSConnection},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${EnableNla},

        [Parameter(ParameterSetName='New')]
        [Alias('EnablePrimaryUsers')]
        [bool]
        ${EnablePrimaryUser},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${EnableTSFirewallRule},

        [Parameter(ParameterSetName='New')]
        [Alias('EnableConnectionSettings')]
        [bool]
        ${Enable},

        [Parameter(ParameterSetName='New')]
        [ValidateLength(0, 255)]
        [string]
        ${RDGatewayServer},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMRequirementRuleActiveDirectorySiteValue
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('OneOf','NoneOf')]
        [System.Object]
        ${RuleOperator},

        [Parameter(Mandatory=$true)]
        [Alias('Sites','SiteName','SiteNames')]
        [ValidateLength(1, 64)]
        [string[]]
        ${Site},

        [Parameter(ParameterSetName='ByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('GlobalCondition')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMRequirementRuleBooleanValue
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [bool]
        ${Value},

        [Parameter(ParameterSetName='ByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('GlobalCondition')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMRequirementRuleCMSiteValue
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('Sites','SiteCode','SiteCodes')]
        [string[]]
        ${Site},

        [Parameter(Mandatory=$true)]
        [ValidateSet('OneOf','NoneOf')]
        [System.Object]
        ${RuleOperator},

        [Parameter(ParameterSetName='ByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('GlobalCondition')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMRequirementRuleCommonValue
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [string[]]
        ${Value1},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Value2},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${RuleOperator},

        [ValidateNotNull()]
        [System.Object]
        ${PropertyForFileFolder},

        [ValidateNotNull()]
        [System.Object]
        ${PropertyForAssembly},

        [Parameter(ParameterSetName='ByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('GlobalCondition')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMRequirementRuleDeviceOwnershipValue
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('IsEquals','NotEquals')]
        [System.Object]
        ${RuleOperator},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${OwnershipOption},

        [Parameter(ParameterSetName='ByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('GlobalCondition')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMRequirementRuleExistential
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [bool]
        ${Existential},

        [Parameter(ParameterSetName='ByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('GlobalCondition')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMRequirementRuleExpression
{
    [CmdletBinding()]
    param
    (
        [Alias('AddRequirementRules')]
        [ValidateNotNull()]
        [System.Object[]]
        ${AddRequirementRule},

        [Alias('AddExpressions')]
        [ValidateNotNull()]
        [System.Object[]]
        ${AddExpression},

        [ValidateNotNull()]
        [System.Object]
        ${RootExpression},

        [ValidateSet('And','Or')]
        [System.Object]
        ${ClauseOperator},

        [ValidateSet('And','Or')]
        [System.Object]
        ${GroupOperator},

        [switch]
        ${AddAsGroup},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMRequirementRuleFileAttributeValue
{
    [CmdletBinding()]
    param
    (
        [System.Object]
        ${FileArchive},

        [System.Object]
        ${FileCompressed},

        [System.Object]
        ${FileEncrypted},

        [System.Object]
        ${FileHidden},

        [System.Object]
        ${FileReadOnly},

        [System.Object]
        ${FileSystem},

        [Parameter(ParameterSetName='ByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('GlobalCondition')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMRequirementRuleFilePermissionValue
{
    [CmdletBinding()]
    param
    (
        [bool]
        ${Exclusive},

        [Parameter(Mandatory=$true)]
        [Alias('ControlEntries','FileSystemAccessControlEntry','FileSystemAccessControlEntries')]
        [System.Object[]]
        ${ControlEntry},

        [Parameter(ParameterSetName='ByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('GlobalCondition')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMRequirementRuleFreeDiskSpaceValue
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('IsEquals','NotEquals','GreaterThan','GreaterEquals','LessThan','LessEquals','Between')]
        [System.Object]
        ${RuleOperator},

        [Parameter(Mandatory=$true)]
        [ValidateRange(0, 8796093022207)]
        [long[]]
        ${Value1},

        [ValidateRange(0, 8796093022207)]
        [long]
        ${Value2},

        [string]
        ${DriverLetter},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${PartitionOption},

        [Parameter(ParameterSetName='ByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('GlobalCondition')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMRequirementRuleInputTypeValue
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [bool]
        ${IsTouch},

        [Parameter(ParameterSetName='ByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('GlobalCondition')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMRequirementRuleOperatingSystemLanguageValue
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('OneOf','NoneOf')]
        [System.Object]
        ${RuleOperator},

        [Parameter(Mandatory=$true)]
        [Alias('Cultures')]
        [cultureinfo[]]
        ${Culture},

        [ValidateNotNull()]
        [bool]
        ${IsMobile},

        [Parameter(ParameterSetName='ByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('GlobalCondition')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMRequirementRuleOperatingSystemValue
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('OneOf','NoneOf')]
        [System.Object]
        ${RuleOperator},

        [ValidateNotNull()]
        [System.Object]
        ${SelectFullPlatform},

        [Alias('Platforms')]
        [ValidateNotNull()]
        [System.Object[]]
        ${Platform},

        [Alias('PlatformStrings','PlatformCIUniqueID','PlatformCIUniqueIDs')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${PlatformString},

        [Parameter(ParameterSetName='ByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('GlobalCondition')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMRequirementRuleOUValue
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('OneOf','NoneOf')]
        [System.Object]
        ${RuleOperator},

        [Parameter(Mandatory=$true)]
        [Alias('OrganizationalUnits','OU','OUs','OrganizationalUnitWithSubOUOption','OrganizationalUnitWithSubOUOptions')]
        [hashtable[]]
        ${OrganizationalUnit},

        [Parameter(ParameterSetName='ByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('GlobalCondition')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMRequirementRuleRegistryKeyPermissionValue
{
    [CmdletBinding()]
    param
    (
        [bool]
        ${Exclusive},

        [Parameter(Mandatory=$true)]
        [Alias('ControlEntries','RegistryAccessControlEntry','RegistryAccessControlEntries')]
        [System.Object[]]
        ${ControlEntry},

        [Parameter(ParameterSetName='ByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('GlobalCondition')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMRequirementRuleScreenResolutionValue
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('240*240','240*320','320*320','360*640','480*480','480*640','480*800','640*360','640*480')]
        [string]
        ${ScreenResolution},

        [Parameter(ParameterSetName='ByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('GlobalCondition')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMRootCertificateProfileConfigurationItem
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('DesiredConfigurationDigestPath')]
        [string]
        ${Path},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTrustedRootCertificateProfileConfigurationItem -Value New-CMRootCertificateProfileConfigurationItem

function New-CMSchedule
{
    [CmdletBinding(DefaultParameterSetName='RecurrenceNone', ConfirmImpact='Low')]
    param
    (
        [switch]
        ${ScheduleString},

        [datetime]
        ${Start},

        [Parameter(ParameterSetName='RecurrenceNoneWithEnd', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurrenceWeeklyWithEnd', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurrenceMonthlyByDateWithEnd', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurMonthlyLastDayOfMonthWithEnd', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurMonthlyByWeekdayWithEnd', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurrenceIntervalWithEnd', Mandatory=$true)]
        [datetime]
        ${End},

        [switch]
        ${IsUtc},

        [Parameter(ParameterSetName='RecurrenceNoneWithDuration', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurrenceWeeklyWithDuration', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurrenceMonthlyByDateWithDuration', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurMonthlyLastDayOfMonthWithDuration', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurMonthlyByWeekdayWithDuration', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurrenceIntervalWithDuration', Mandatory=$true)]
        [System.Object]
        ${DurationInterval},

        [Parameter(ParameterSetName='RecurrenceNoneWithDuration', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurrenceWeeklyWithDuration', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurrenceMonthlyByDateWithDuration', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurMonthlyLastDayOfMonthWithDuration', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurMonthlyByWeekdayWithDuration', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurrenceIntervalWithDuration', Mandatory=$true)]
        [int]
        ${DurationCount},

        [Parameter(ParameterSetName='RecurrenceNone', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurrenceNoneWithDuration', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurrenceNoneWithEnd', Mandatory=$true)]
        [switch]
        ${Nonrecurring},

        [Parameter(ParameterSetName='RecurrenceWeekly')]
        [Parameter(ParameterSetName='RecurrenceWeeklyWithDuration')]
        [Parameter(ParameterSetName='RecurrenceWeeklyWithEnd')]
        [Parameter(ParameterSetName='RecurrenceMonthlyByDate')]
        [Parameter(ParameterSetName='RecurrenceMonthlyByDateWithDuration')]
        [Parameter(ParameterSetName='RecurrenceMonthlyByDateWithEnd')]
        [Parameter(ParameterSetName='RecurMonthlyLastDayOfMonth')]
        [Parameter(ParameterSetName='RecurMonthlyLastDayOfMonthWithDuration')]
        [Parameter(ParameterSetName='RecurMonthlyLastDayOfMonthWithEnd')]
        [Parameter(ParameterSetName='RecurMonthlyByWeekday')]
        [Parameter(ParameterSetName='RecurMonthlyByWeekdayWithDuration')]
        [Parameter(ParameterSetName='RecurMonthlyByWeekdayWithEnd')]
        [Parameter(ParameterSetName='RecurrenceInterval', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurrenceIntervalWithDuration', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurrenceIntervalWithEnd', Mandatory=$true)]
        [ValidateRange(1, 59)]
        [int]
        ${RecurCount},

        [Parameter(ParameterSetName='RecurrenceWeekly', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurrenceWeeklyWithDuration', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurrenceWeeklyWithEnd', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurMonthlyByWeekday', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurMonthlyByWeekdayWithDuration', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurMonthlyByWeekdayWithEnd', Mandatory=$true)]
        [System.DayOfWeek]
        ${DayOfWeek},

        [Parameter(ParameterSetName='RecurrenceMonthlyByDate', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurrenceMonthlyByDateWithDuration', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurrenceMonthlyByDateWithEnd', Mandatory=$true)]
        [int]
        ${DayOfMonth},

        [Parameter(ParameterSetName='RecurMonthlyLastDayOfMonth', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurMonthlyLastDayOfMonthWithDuration', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurMonthlyLastDayOfMonthWithEnd', Mandatory=$true)]
        [switch]
        ${LastDayOfMonth},

        [Parameter(ParameterSetName='RecurMonthlyByWeekday', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurMonthlyByWeekdayWithDuration', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurMonthlyByWeekdayWithEnd', Mandatory=$true)]
        [System.Object]
        ${WeekOrder},

        [Parameter(ParameterSetName='RecurrenceInterval', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurrenceIntervalWithDuration', Mandatory=$true)]
        [Parameter(ParameterSetName='RecurrenceIntervalWithEnd', Mandatory=$true)]
        [System.Object]
        ${RecurInterval},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMScript
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByText', Mandatory=$true)]
        [string]
        ${ScriptText},

        [Parameter(Mandatory=$true)]
        [string]
        ${ScriptName},

        [Parameter(ParameterSetName='ByFile', Mandatory=$true)]
        [string]
        ${ScriptFile},

        [switch]
        ${Fast},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMSecondarySite
{
    [CmdletBinding(DefaultParameterSetName='NewDistributionPointByHTTPAndCreateCertificate', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('SiteCode')]
        [string]
        ${SecondarySiteCode},

        [Parameter(Mandatory=$true)]
        [string]
        ${ServerName},

        [Parameter(Mandatory=$true)]
        [string]
        ${SiteName},

        [Alias('InstallDir')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${InstallationFolder},

        [Alias('ParentSiteCode')]
        [string]
        ${PrimarySiteCode},

        [Parameter(Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_EmbeddedProperty')]
        [System.Object[]]
        ${InstallationSourceFile},

        [Parameter(Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_EmbeddedProperty')]
        [System.Object[]]
        ${SqlServerSetting},

        [Alias('BoundaryGroups')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_BoundaryGroup')]
        [System.Object[]]
        ${BoundaryGroup},

        [bool]
        ${AllowFallbackForContent},

        [bool]
        ${InstallInternetServer},

        [switch]
        ${EnableBranchCache},

        [Parameter(ParameterSetName='NewDistributionPointByHTTPAndCreateCertificate', Mandatory=$true)]
        [Parameter(ParameterSetName='NewDistributionPointByHTTPAndImportCertificate', Mandatory=$true)]
        [switch]
        ${Http},

        [Parameter(ParameterSetName='NewDistributionPointByHTTPAndCreateCertificate')]
        [Parameter(ParameterSetName='NewDistributionPointByHTTPAndImportCertificate')]
        [bool]
        ${EnableAnonymous},

        [Parameter(ParameterSetName='NewDistributionPointByHTTPSAndCreateCertificate', Mandatory=$true)]
        [Parameter(ParameterSetName='NewDistributionPointByHTTPSAndImportCertificate', Mandatory=$true)]
        [switch]
        ${Https},

        [Parameter(ParameterSetName='NewDistributionPointByHTTPSAndCreateCertificate')]
        [Parameter(ParameterSetName='NewDistributionPointByHTTPSAndImportCertificate')]
        [System.Object]
        ${ClientConnectionType},

        [Parameter(ParameterSetName='NewDistributionPointByHTTPSAndCreateCertificate', Mandatory=$true)]
        [Parameter(ParameterSetName='NewDistributionPointByHTTPAndCreateCertificate', Mandatory=$true)]
        [switch]
        ${CreateSelfSignedCertificate},

        [Parameter(ParameterSetName='NewDistributionPointByHTTPSAndCreateCertificate', Mandatory=$true)]
        [Parameter(ParameterSetName='NewDistributionPointByHTTPAndCreateCertificate', Mandatory=$true)]
        [datetime]
        ${CertificateExpirationTimeUtc},

        [Parameter(ParameterSetName='NewDistributionPointByHTTPSAndImportCertificate', Mandatory=$true)]
        [Parameter(ParameterSetName='NewDistributionPointByHTTPAndImportCertificate', Mandatory=$true)]
        [switch]
        ${ImportCertificate},

        [Parameter(ParameterSetName='NewDistributionPointByHTTPSAndImportCertificate', Mandatory=$true)]
        [Parameter(ParameterSetName='NewDistributionPointByHTTPAndImportCertificate', Mandatory=$true)]
        [string]
        ${CertificatePath},

        [Parameter(ParameterSetName='NewDistributionPointByHTTPSAndImportCertificate', Mandatory=$true)]
        [Parameter(ParameterSetName='NewDistributionPointByHTTPAndImportCertificate', Mandatory=$true)]
        [securestring]
        ${CertificatePassword},

        [Parameter(ParameterSetName='NewDistributionPointByHTTPSAndImportCertificate')]
        [Parameter(ParameterSetName='NewDistributionPointByHTTPAndImportCertificate')]
        [bool]
        ${ForceWhenDuplicateCertificate},

        [bool]
        ${AllowPreStaging},

        [ValidateRange(50, 100000)]
        [int]
        ${MinFreeSpaceMB},

        [System.Object]
        ${PrimaryContentLibraryLocation},

        [System.Object]
        ${SecondaryContentLibraryLocation},

        [System.Object]
        ${PrimaryPackageShareLocation},

        [System.Object]
        ${SecondaryPackageShareLocation},

        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${ValidateContentSchedule},

        [System.Object]
        ${ContentMonitoringPriority},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMSecurityScope
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [Alias('CategoryName')]
        [ValidateLength(1, 255)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='New')]
        [Alias('CategoryDescription')]
        [ValidateLength(0, 512)]
        [string]
        ${Description},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMSiteSystemServer
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(Mandatory=$true, Position=0)]
        [Alias('ServerName','Name')]
        [string]
        ${SiteSystemServerName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${PublicFqdn},

        [bool]
        ${FdmOperation},

        [switch]
        ${UseSiteServerAccount},

        [string]
        ${AccountName},

        [bool]
        ${EnableProxy},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ProxyServerName},

        [ValidateRange(1, 65535)]
        [uint32]
        ${ProxyServerPort},

        [PSTypeName('IResultObject#SMS_SCI_Reserved')]
        [System.Object]
        ${ProxyAccessAccount},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMSoftwareMeteringRule
{
    [CmdletBinding(DefaultParameterSetName='New', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [Parameter(ParameterSetName='NewFromPath')]
        [string]
        ${ProductName},

        [Parameter(ParameterSetName='New')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileName},

        [Parameter(ParameterSetName='New')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${OriginalFileName},

        [Parameter(ParameterSetName='New')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='New')]
        [int]
        ${LanguageId},

        [Parameter(ParameterSetName='New')]
        [string]
        ${Comment},

        [Parameter(ParameterSetName='New')]
        [Parameter(ParameterSetName='NewFromPath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='NewFromPath', Mandatory=$true)]
        [string]
        ${Path},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMSoftwareUpdateAutoDeploymentRule
{
    [CmdletBinding(DefaultParameterSetName='NewByCollection', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [string]
        ${Description},

        [Parameter(ParameterSetName='NewByCollectionName', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='NewByCollection', Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${Collection},

        [Parameter(ParameterSetName='NewByCollectionId', Mandatory=$true)]
        [string]
        ${CollectionId},

        [bool]
        ${AddToExistingSoftwareUpdateGroup},

        [Alias('EnableAfterCreate')]
        [bool]
        ${EnabledAfterCreate},

        [Alias('Enabled','EnableDeployment')]
        [bool]
        ${Enable},

        [bool]
        ${SendWakeupPacket},

        [System.Object]
        ${VerboseLevel},

        [bool]
        ${DeployWithoutLicense},

        [string[]]
        ${ArticleId},

        [string[]]
        ${BulletinId},

        [System.Object[]]
        ${CustomSeverity},

        [System.Object[]]
        ${CMTag},

        [System.Nullable[System.Object]]
        ${DateReleasedOrRevised},

        [string[]]
        ${UpdateDescription},

        [Alias('Languages','UpdateLocales','UpdateLocale')]
        [string[]]
        ${Language},

        [string[]]
        ${Required},

        [Alias('Severities')]
        [System.Object[]]
        ${Severity},

        [System.Nullable[bool]]
        ${Superseded},

        [Alias('Titles')]
        [string[]]
        ${Title},

        [Alias('UpdateClassifications')]
        [string[]]
        ${UpdateClassification},

        [string[]]
        ${Product},

        [System.Nullable[bool]]
        ${MicrosoftAsVendor},

        [Alias('Vendors')]
        [ValidateNotNullOrEmpty()]
        [ValidateSet('Microsoft','Local Publisher')]
        [string[]]
        ${Vendor},

        [System.Object]
        ${RunType},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [bool]
        ${UseUtc},

        [bool]
        ${AvailableImmediately},

        [int]
        ${AvailableTime},

        [System.Object]
        ${AvailableTimeUnit},

        [bool]
        ${DeadlineImmediately},

        [int]
        ${DeadlineTime},

        [System.Object]
        ${DeadlineTimeUnit},

        [System.Object]
        ${UserNotification},

        [bool]
        ${AllowSoftwareInstallationOutsideMaintenanceWindow},

        [bool]
        ${AllowRestart},

        [bool]
        ${SuppressRestartServer},

        [bool]
        ${SuppressRestartWorkstation},

        [bool]
        ${WriteFilterHandling},

        [bool]
        ${GenerateFailureAlert},

        [bool]
        ${GenerateSuccessAlert},

        [ValidateRange(0, 99)]
        [int]
        ${SuccessPercentage},

        [int]
        ${AlertTime},

        [System.Object]
        ${AlertTimeUnit},

        [bool]
        ${DisableOperationManager},

        [bool]
        ${GenerateOperationManagerAlert},

        [bool]
        ${NoInstallOnRemote},

        [bool]
        ${NoInstallOnUnprotected},

        [bool]
        ${UseBranchCache},

        [bool]
        ${DownloadFromMicrosoftUpdate},

        [bool]
        ${AllowUseMeteredNetwork},

        [string]
        ${DeploymentPackageName},

        [Parameter(ValueFromPipeline=$true)]
        [Alias('InputObject')]
        [PSTypeName('IResultObject#SMS_SoftwareUpdatesPackage')]
        [System.Object]
        ${DeploymentPackage},

        [bool]
        ${DownloadFromInternet},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Location},

        [System.Object]
        ${DeploymentRing},

        [Alias('UpdateDeploymentWaitDays')]
        [ValidateRange(0, 120)]
        [int]
        ${UpdateDeploymentWaitDay},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${LanguageSelection},

        [switch]
        ${IsServicingPlan},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMAutoDeploymentRule -Value New-CMSoftwareUpdateAutoDeploymentRule

function New-CMSoftwareUpdateDeployment
{
    [CmdletBinding(DefaultParameterSetName='DeploySoftwareUpdateByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='DeploySoftwareUpdateByName', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SoftwareUpdateName},

        [Parameter(ParameterSetName='DeploySoftwareUpdateById', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SoftwareUpdateId},

        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SoftwareUpdateGroupName},

        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SoftwareUpdateGroupId},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SoftwareUpdate','SoftwareUpdateGroup')]
        [System.Object]
        ${InputObject},

        [Alias('UpdateGroupDeploymentName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentName},

        [Alias('SavedDeploymentPackageId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SavedPackageId},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Description},

        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${DeploymentType},

        [System.Object]
        ${VerbosityLevel},

        [System.Object]
        ${TimeBasedOn},

        [System.Object]
        ${UserNotification},

        [bool]
        ${SoftwareInstallation},

        [bool]
        ${AllowRestart},

        [bool]
        ${RestartServer},

        [bool]
        ${RestartWorkstation},

        [bool]
        ${GenerateSuccessAlert},

        [ValidateRange(0, 99)]
        [int]
        ${PercentSuccess},

        [int]
        ${TimeValue},

        [System.Object]
        ${TimeUnit},

        [bool]
        ${DisableOperationsManagerAlert},

        [bool]
        ${GenerateOperationsManagerAlert},

        [System.Object]
        ${ProtectedType},

        [System.Object]
        ${UnprotectedType},

        [bool]
        ${UseBranchCache},

        [bool]
        ${RequirePostRebootFullScan},

        [bool]
        ${DownloadFromMicrosoftUpdate},

        [switch]
        ${AcceptEula},

        [switch]
        ${DistributeContent},

        [string]
        ${DistributeCollectionName},

        [string]
        ${DistributionPointGroupName},

        [string]
        ${DistributionPointName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Comment},

        [datetime]
        ${AvailableDateTime},

        [datetime]
        ${DeadlineDateTime},

        [bool]
        ${UseMeteredNetwork},

        [bool]
        ${PersistOnWriteFilterDevice},

        [bool]
        ${SendWakeupPacket},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMSoftwareUpdateDeploymentPackage
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [string]
        ${Description},

        [Parameter(Mandatory=$true)]
        [Alias('PackageSourcePath')]
        [string]
        ${Path},

        [System.Object]
        ${Priority},

        [switch]
        ${Fast},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMSoftwareUpdateGroup
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Alias('LocalizedDescription')]
        [string]
        ${Description},

        [Alias('Updates')]
        [ValidateNotNullOrEmpty()]
        [int[]]
        ${UpdateId},

        [Alias('SoftwareUpdateIds')]
        [string[]]
        ${SoftwareUpdateId},

        [Alias('SoftwareUpdateNames')]
        [string[]]
        ${SoftwareUpdateName},

        [Parameter(ValueFromPipeline=$true)]
        [Alias('SoftwareUpdates','SoftwareUpdate')]
        [PSTypeName('IResultObject#SMS_SoftwareUpdate')]
        [System.Object[]]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMSqlServerSetting
{
    [CmdletBinding(DefaultParameterSetName='NewSettingByExisting', ConfirmImpact='None')]
    param
    (
        [Parameter(ParameterSetName='NewSettingByExisting', Mandatory=$true)]
        [switch]
        ${UseExistingSqlServerInstance},

        [Parameter(ParameterSetName='NewSettingByExisting')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 16)]
        [string]
        ${InstanceName},

        [Parameter(ParameterSetName='NewSettingByExisting', Mandatory=$true)]
        [ValidateLength(1, 63)]
        [string]
        ${SiteDatabaseName},

        [Parameter(ParameterSetName='NewSettingByCopy', Mandatory=$true)]
        [switch]
        ${CopySqlServerExpressOnSecondarySite},

        [Parameter(ParameterSetName='NewSettingByCopy')]
        [ValidateRange(1, 65535)]
        [int]
        ${SqlServerServicePort},

        [Parameter(ParameterSetName='NewSettingByCopy')]
        [Parameter(ParameterSetName='NewSettingByExisting')]
        [ValidateRange(1, 65535)]
        [int]
        ${SqlServerServiceBrokerPort},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMStandaloneMedia
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [Alias('DriverPackages','PackageDriver','PackageDrivers')]
        [PSTypeName('IResultObject#SMS_DriverPackage')]
        [System.Object[]]
        ${DriverPackage},

        [Alias('Applications')]
        [System.Object[]]
        ${Application},

        [Alias('Packages')]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object[]]
        ${Package},

        [Alias('Start')]
        [datetime]
        ${MediaStartDate},

        [Alias('Expiration')]
        [datetime]
        ${MediaExpirationDate},

        [Alias('IncludeApplicationDependencies')]
        [switch]
        ${IncludeApplicationDependency},

        [System.Object]
        ${MediaSize},

        [Parameter(Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${TaskSequence},

        [switch]
        ${AllowUacPrompt},

        [switch]
        ${AllowUnattended},

        [string]
        ${CertificatePath},

        [Parameter(Mandatory=$true)]
        [Alias('DistributionPoints')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Distribution Point')]
        [System.Object[]]
        ${DistributionPoint},

        [switch]
        ${Force},

        [switch]
        ${FormatMedia},

        [ValidateNotNullOrEmpty()]
        [securestring]
        ${MediaPassword},

        [Parameter(Mandatory=$true)]
        [ValidateSet('Usb','CdDvd')]
        [System.Object]
        ${MediaType},

        [Parameter(Mandatory=$true)]
        [Alias('MediaPath','OutputPath','DriveName')]
        [string]
        ${Path},

        [Alias('TemporaryDirectory','StagingArea')]
        [string]
        ${TemporaryFolder},

        [Alias('PreExecCommandLine')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${PrestartCommand},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object]
        ${PrestartPackage},

        [Alias('TaskSequenceVariables','Variables')]
        [hashtable]
        ${Variable},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMStatusFilterRule
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [string]
        ${SiteCode},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Source},

        [ValidateNotNullOrEmpty()]
        [string]
        ${StatusFilterRuleSiteCode},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ComponentName},

        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${MessageType},

        [System.Object]
        ${SeverityType},

        [ValidateRange(0, 65535)]
        [int]
        ${MessageId},

        [ValidateNotNullOrEmpty()]
        [string]
        ${PropertyId},

        [ValidateNotNullOrEmpty()]
        [string]
        ${PropertyValue},

        [bool]
        ${WriteToDatabase},

        [Alias('AllowUserDeleteMessagesAfterThresholdDays')]
        [ValidateRange(1, 999)]
        [int]
        ${AllowDeleteAfterDays},

        [bool]
        ${ReportToEventLog},

        [bool]
        ${ReplicateToParentSite},

        [System.Object]
        ${ReplicationPriority},

        [bool]
        ${RunProgram},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ProgramPath},

        [bool]
        ${ForwardToStatusSummarizer},

        [bool]
        ${ProcessLowerPriorityRule},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMStatusMessageQuery
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='NewStatusMessageQuery', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='NewStatusMessageQuery')]
        [Alias('Comments')]
        [string]
        ${Comment},

        [Parameter(ParameterSetName='NewStatusMessageQuery')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Expression},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMStorageFolder
{
    [CmdletBinding(ConfirmImpact='None')]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${StorageFolderName},

        [ValidateNotNullOrEmpty()]
        [ValidateRange(1, 99999)]
        [int]
        ${MaximumClientNumber},

        [ValidateNotNullOrEmpty()]
        [ValidateRange(1, 999999)]
        [int]
        ${MinimumFreeSpace},

        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${SpaceUnit},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMTaskSequence
{
    [CmdletBinding(DefaultParameterSetName='NewBuildOSImage', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='NewInstallOSImage', Mandatory=$true)]
        [Alias('InstallOperatingSystemImageOption')]
        [switch]
        ${InstallOperatingSystemImage},

        [Parameter(ParameterSetName='NewBuildOSImage', Mandatory=$true)]
        [Alias('BuildOperatingSystemImageOption')]
        [switch]
        ${BuildOperatingSystemImage},

        [Parameter(ParameterSetName='NewInstallOSImageVhd', Mandatory=$true)]
        [Alias('InstallOperatingSystemImageVhdOption')]
        [switch]
        ${InstallOperatingSystemImageVhd},

        [Parameter(ParameterSetName='UpgradeOSImage', Mandatory=$true)]
        [Alias('UpgradeOperatingSystemOption')]
        [switch]
        ${UpgradeOperatingSystem},

        [Parameter(ParameterSetName='NewCustom', Mandatory=$true)]
        [Alias('CustomOption')]
        [switch]
        ${CustomTaskSequence},

        [Parameter(ParameterSetName='NewInstallOSImage', Mandatory=$true)]
        [Parameter(ParameterSetName='NewBuildOSImage', Mandatory=$true)]
        [Parameter(ParameterSetName='NewInstallOSImageVhd', Mandatory=$true)]
        [Parameter(ParameterSetName='NewCustom', Mandatory=$true)]
        [Parameter(ParameterSetName='UpgradeOSImage', Mandatory=$true)]
        [Alias('TaskSequenceName')]
        [ValidateLength(1, 50)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Parameter(ParameterSetName='NewBuildOSImage')]
        [Parameter(ParameterSetName='NewInstallOSImageVhd')]
        [Parameter(ParameterSetName='NewCustom')]
        [Alias('TaskSequenceDescription')]
        [ValidateLength(0, 127)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='UpgradeOSImage', Mandatory=$true)]
        [string]
        ${UpgradePackageId},

        [Parameter(ParameterSetName='NewInstallOSImage', Mandatory=$true)]
        [Parameter(ParameterSetName='NewBuildOSImage', Mandatory=$true)]
        [Parameter(ParameterSetName='NewInstallOSImageVhd', Mandatory=$true)]
        [Parameter(ParameterSetName='NewCustom')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${BootImagePackageId},

        [Parameter(ParameterSetName='NewInstallOSImage', Mandatory=$true)]
        [Parameter(ParameterSetName='NewBuildOSImage', Mandatory=$true)]
        [Parameter(ParameterSetName='NewInstallOSImageVhd', Mandatory=$true)]
        [string]
        ${OperatingSystemImagePackageId},

        [Parameter(ParameterSetName='NewInstallOSImage', Mandatory=$true)]
        [Parameter(ParameterSetName='NewBuildOSImage', Mandatory=$true)]
        [Parameter(ParameterSetName='NewInstallOSImageVhd', Mandatory=$true)]
        [uint32]
        ${OperatingSystemImageIndex},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Parameter(ParameterSetName='NewBuildOSImage')]
        [Parameter(ParameterSetName='NewInstallOSImageVhd')]
        [Alias('ApplyAllImages')]
        [bool]
        ${ApplyAll},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Parameter(ParameterSetName='NewInstallOSImageVhd')]
        [bool]
        ${PartitionAndFormatTarget},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Parameter(ParameterSetName='NewInstallOSImageVhd')]
        [bool]
        ${ConfigureBitLocker},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Parameter(ParameterSetName='NewBuildOSImage')]
        [Parameter(ParameterSetName='NewInstallOSImageVhd')]
        [Parameter(ParameterSetName='UpgradeOSImage')]
        [Alias('InstallationProductKey')]
        [string]
        ${ProductKey},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Parameter(ParameterSetName='NewBuildOSImage')]
        [Parameter(ParameterSetName='NewInstallOSImageVhd')]
        [System.Object]
        ${InstallationLicensingMode},

        [Parameter(ParameterSetName='NewBuildOSImage')]
        [ValidateRange(5, 9999)]
        [int]
        ${MaximumServerConnection},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Parameter(ParameterSetName='NewBuildOSImage')]
        [Parameter(ParameterSetName='NewInstallOSImageVhd')]
        [bool]
        ${GeneratePassword},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Parameter(ParameterSetName='NewBuildOSImage')]
        [Parameter(ParameterSetName='NewInstallOSImageVhd')]
        [securestring]
        ${LocalAdminPassword},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Parameter(ParameterSetName='NewBuildOSImage')]
        [Parameter(ParameterSetName='NewInstallOSImageVhd')]
        [System.TimeZoneInfo]
        ${TimeZone},

        [Parameter(ParameterSetName='NewInstallOSImage', Mandatory=$true)]
        [Parameter(ParameterSetName='NewBuildOSImage', Mandatory=$true)]
        [Parameter(ParameterSetName='NewInstallOSImageVhd', Mandatory=$true)]
        [System.Object]
        ${JoinDomain},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Parameter(ParameterSetName='NewBuildOSImage')]
        [Parameter(ParameterSetName='NewInstallOSImageVhd')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${WorkgroupName},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Parameter(ParameterSetName='NewBuildOSImage')]
        [Parameter(ParameterSetName='NewInstallOSImageVhd')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DomainName},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Parameter(ParameterSetName='NewBuildOSImage')]
        [Parameter(ParameterSetName='NewInstallOSImageVhd')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DomainOrganizationUnit},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Parameter(ParameterSetName='NewBuildOSImage')]
        [Parameter(ParameterSetName='NewInstallOSImageVhd')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DomainAccount},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Parameter(ParameterSetName='NewBuildOSImage')]
        [Parameter(ParameterSetName='NewInstallOSImageVhd')]
        [securestring]
        ${DomainPassword},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Parameter(ParameterSetName='NewBuildOSImage')]
        [Parameter(ParameterSetName='NewInstallOSImageVhd')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ClientPackagePackageId},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Parameter(ParameterSetName='NewBuildOSImage')]
        [Parameter(ParameterSetName='NewInstallOSImageVhd')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${InstallationProperty},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [bool]
        ${CaptureUserSetting},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserStateMigrationToolPackageId},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [bool]
        ${SaveLocally},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Alias('CaptureLocallyUsingLinks')]
        [bool]
        ${CaptureLocallyUsingLink},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [bool]
        ${CaptureNetworkSetting},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [bool]
        ${CaptureWindowsSetting},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Parameter(ParameterSetName='NewBuildOSImage')]
        [Parameter(ParameterSetName='UpgradeOSImage')]
        [System.Object]
        ${SoftwareUpdateStyle},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Parameter(ParameterSetName='NewBuildOSImage')]
        [Parameter(ParameterSetName='NewInstallOSImageVhd')]
        [Parameter(ParameterSetName='UpgradeOSImage')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${ApplicationName},

        [Parameter(ParameterSetName='NewInstallOSImage')]
        [Parameter(ParameterSetName='NewBuildOSImage')]
        [Parameter(ParameterSetName='NewInstallOSImageVhd')]
        [Parameter(ParameterSetName='UpgradeOSImage')]
        [bool]
        ${IgnoreInvalidApplication},

        [Parameter(ParameterSetName='NewBuildOSImage')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 51)]
        [string]
        ${CreatedBy},

        [Parameter(ParameterSetName='NewBuildOSImage')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 33)]
        [string]
        ${ImageVersion},

        [Parameter(ParameterSetName='NewBuildOSImage')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ImageDescription},

        [Parameter(ParameterSetName='NewBuildOSImage', Mandatory=$true)]
        [Alias('CaptureOperatingSystemFilePath')]
        [string]
        ${OperatingSystemFilePath},

        [Parameter(ParameterSetName='NewBuildOSImage', Mandatory=$true)]
        [Alias('CaptureOperatingSystemFileAccount')]
        [string]
        ${OperatingSystemFileAccount},

        [Parameter(ParameterSetName='NewBuildOSImage')]
        [securestring]
        ${OperatingSystemFileAccountPassword},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMTaskSequenceDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [Alias('DeploymentExpireDateTime')]
        [datetime]
        ${DeadlineDateTime},

        [Parameter(ParameterSetName='SearchPackageByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('PackageId','TaskSequenceId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${TaskSequencePackageId},

        [System.Object]
        ${DeployPurpose},

        [Alias('MakeAvailableTo')]
        [System.Object]
        ${Availability},

        [bool]
        ${UseUtcForAvailableSchedule},

        [bool]
        ${UseUtcForExpireSchedule},

        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${ScheduleEvent},

        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${Schedule},

        [System.Object]
        ${RerunBehavior},

        [Alias('AllowUsersRunIndependently')]
        [bool]
        ${RunFromSoftwareCenter},

        [bool]
        ${ShowTaskSequenceProgress},

        [bool]
        ${SoftwareInstallation},

        [bool]
        ${SystemRestart},

        [bool]
        ${InternetOption},

        [ValidateRange(0, 99)]
        [int]
        ${PercentSuccess},

        [datetime]
        ${AlertDateTime},

        [ValidateRange(0, 99)]
        [int]
        ${PercentFailure},

        [System.Object]
        ${DeploymentOption},

        [Alias('AllowUseRemoteDistributionPoint')]
        [bool]
        ${AllowSharedContent},

        [bool]
        ${AllowFallback},

        [switch]
        ${DistributeContent},

        [string]
        ${DistributeCollectionName},

        [string]
        ${DistributionPointGroupName},

        [string]
        ${DistributionPointName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Comment},

        [datetime]
        ${AvailableDateTime},

        [bool]
        ${UseMeteredNetwork},

        [bool]
        ${PersistOnWriteFilterDevice},

        [bool]
        ${SendWakeupPacket},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMTaskSequenceGroup
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Alias('Steps')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_Step')]
        [System.Object[]]
        ${Step},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMTaskSequenceMedia
{
    [CmdletBinding(DefaultParameterSetName='NewBootableMedia', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='NewStandAloneMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewStandAloneMediaByValue', Mandatory=$true)]
        [Alias('StandAloneMediaOption')]
        [switch]
        ${StandaloneMedia},

        [Parameter(ParameterSetName='NewBootableMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewBootableMediaByValue', Mandatory=$true)]
        [Alias('BootableMediaOption')]
        [switch]
        ${BootableMedia},

        [Parameter(ParameterSetName='NewCaptureMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewCaptureMediaByValue', Mandatory=$true)]
        [Alias('CaptureMediaOption')]
        [switch]
        ${CaptureMedia},

        [Parameter(ParameterSetName='NewPrestagedMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue', Mandatory=$true)]
        [Alias('PrestagedMediaOption','PrestageMedia')]
        [switch]
        ${PrestagedMedia},

        [Parameter(ParameterSetName='NewStandAloneMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewStandAloneMediaByValue', Mandatory=$true)]
        [Parameter(ParameterSetName='NewBootableMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewBootableMediaByValue', Mandatory=$true)]
        [Parameter(ParameterSetName='NewCaptureMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewCaptureMediaByValue', Mandatory=$true)]
        [Parameter(ParameterSetName='NewPrestagedMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(0, 255)]
        [string]
        ${MediaPath},

        [Parameter(ParameterSetName='NewStandAloneMedia')]
        [Parameter(ParameterSetName='NewStandAloneMediaByValue')]
        [Parameter(ParameterSetName='NewBootableMedia')]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [Parameter(ParameterSetName='NewPrestagedMedia')]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue')]
        [bool]
        ${AllowUnattendedDeployment},

        [Parameter(ParameterSetName='NewStandAloneMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewStandAloneMediaByValue')]
        [Parameter(ParameterSetName='NewCaptureMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewCaptureMediaByValue')]
        [Parameter(ParameterSetName='NewBootableMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [System.Object]
        ${MediaInputType},

        [Parameter(ParameterSetName='NewStandAloneMedia')]
        [Parameter(ParameterSetName='NewStandAloneMediaByValue')]
        [Parameter(ParameterSetName='NewCaptureMedia')]
        [Parameter(ParameterSetName='NewCaptureMediaByValue')]
        [Parameter(ParameterSetName='NewBootableMedia')]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DriveName},

        [Parameter(ParameterSetName='NewStandAloneMedia')]
        [Parameter(ParameterSetName='NewStandAloneMediaByValue')]
        [Parameter(ParameterSetName='NewBootableMedia')]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [System.Object]
        ${MediaSize},

        [Parameter(ParameterSetName='NewStandAloneMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewStandAloneMediaByValue')]
        [Parameter(ParameterSetName='NewBootableMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [Parameter(ParameterSetName='NewPrestagedMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue')]
        [bool]
        ${ProtectPassword},

        [Parameter(ParameterSetName='NewStandAloneMedia')]
        [Parameter(ParameterSetName='NewStandAloneMediaByValue')]
        [Parameter(ParameterSetName='NewBootableMedia')]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [ValidateNotNullOrEmpty()]
        [securestring]
        ${Password},

        [Parameter(ParameterSetName='NewStandAloneMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewPrestagedMedia', Mandatory=$true)]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='NewStandAloneMediaByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${TaskSequence},

        [Parameter(ParameterSetName='NewStandAloneMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewPrestagedMedia', Mandatory=$true)]
        [Alias('TaskSequenceDistributionPointServerNames')]
        [string[]]
        ${TaskSequenceDistributionPointServerName},

        [Parameter(ParameterSetName='NewStandAloneMediaByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequenceDistributionPoints')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Distribution Point')]
        [System.Object[]]
        ${TaskSequenceDistributionPoint},

        [Parameter(ParameterSetName='NewStandAloneMedia')]
        [Parameter(ParameterSetName='NewStandAloneMediaByValue')]
        [Parameter(ParameterSetName='NewBootableMedia')]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [Parameter(ParameterSetName='NewPrestagedMedia')]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue')]
        [ValidateNotNullOrEmpty()]
        [hashtable]
        ${Variable},

        [Parameter(ParameterSetName='NewStandAloneMedia')]
        [Parameter(ParameterSetName='NewStandAloneMediaByValue')]
        [Parameter(ParameterSetName='NewBootableMedia')]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [bool]
        ${EnablePrestartCommand},

        [Parameter(ParameterSetName='NewStandAloneMedia')]
        [Parameter(ParameterSetName='NewStandAloneMediaByValue')]
        [Parameter(ParameterSetName='NewBootableMedia')]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [Parameter(ParameterSetName='NewPrestagedMedia')]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue')]
        [Alias('CommandLine')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${PrestartCommandLine},

        [Parameter(ParameterSetName='NewStandAloneMedia')]
        [Parameter(ParameterSetName='NewStandAloneMediaByValue')]
        [Parameter(ParameterSetName='NewBootableMedia')]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [Parameter(ParameterSetName='NewPrestagedMedia')]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue')]
        [bool]
        ${CommandIncludeFile},

        [Parameter(ParameterSetName='NewStandAloneMedia')]
        [Parameter(ParameterSetName='NewBootableMedia')]
        [Parameter(ParameterSetName='NewPrestagedMedia')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CommandPackageName},

        [Parameter(ParameterSetName='NewStandAloneMediaByValue')]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue')]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object]
        ${CommandPackage},

        [Parameter(ParameterSetName='NewStandAloneMediaByValue')]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Distribution Point')]
        [System.Object]
        ${CommandPackageDistributionPoint},

        [Parameter(ParameterSetName='NewStandAloneMedia')]
        [Parameter(ParameterSetName='NewBootableMedia')]
        [Parameter(ParameterSetName='NewPrestagedMedia')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CommandDistributionPointServerName},

        [Parameter(ParameterSetName='NewStandAloneMedia')]
        [Parameter(ParameterSetName='NewStandAloneMediaByValue')]
        [Alias('IncludeApplicationDependencies')]
        [bool]
        ${IncludeApplicationDependency},

        [Parameter(ParameterSetName='NewBootableMedia')]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [bool]
        ${EnableUnknownSupport},

        [Parameter(ParameterSetName='NewBootableMedia')]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [bool]
        ${CreateMediaSelfCertificate},

        [Parameter(ParameterSetName='NewBootableMedia')]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [datetime]
        ${StartDate},

        [Parameter(ParameterSetName='NewBootableMedia')]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [datetime]
        ${ExpirationDate},

        [Parameter(ParameterSetName='NewBootableMedia')]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ImportCertificatePath},

        [Parameter(ParameterSetName='NewBootableMedia')]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [ValidateNotNullOrEmpty()]
        [securestring]
        ${ImportCertificatePassword},

        [Parameter(ParameterSetName='NewBootableMedia')]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [System.Object]
        ${UserDeviceAffinity},

        [Parameter(ParameterSetName='NewCaptureMediaByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='NewBootableMediaByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_BootImagePackage')]
        [System.Object]
        ${BootImage},

        [Parameter(ParameterSetName='NewCaptureMediaByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='NewBootableMediaByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Distribution Point')]
        [System.Object]
        ${BootImageDistributionPoint},

        [Parameter(ParameterSetName='NewCaptureMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewBootableMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewPrestagedMedia', Mandatory=$true)]
        [string]
        ${BootImageId},

        [Parameter(ParameterSetName='NewCaptureMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewBootableMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewPrestagedMedia', Mandatory=$true)]
        [Alias('DistributionPointServerName')]
        [string]
        ${BootImageDistributionPointServerName},

        [Parameter(ParameterSetName='NewBootableMediaByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('BootImageManagementPoints')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Management Point')]
        [System.Object[]]
        ${BootImageManagementPoint},

        [Parameter(ParameterSetName='NewBootableMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewPrestagedMedia', Mandatory=$true)]
        [Alias('ManagementPointServerName','BootImageManagementPointServerNames')]
        [string[]]
        ${BootImageManagementPointServerName},

        [Parameter(ParameterSetName='NewPrestagedMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue', Mandatory=$true)]
        [Parameter(ParameterSetName='NewBootableMedia', Mandatory=$true)]
        [Parameter(ParameterSetName='NewBootableMediaByValue')]
        [System.Object]
        ${MediaMode},

        [Parameter(ParameterSetName='NewPrestagedMedia')]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue')]
        [ValidateLength(0, 50)]
        [string]
        ${CreatedBy},

        [Parameter(ParameterSetName='NewPrestagedMedia')]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue')]
        [ValidateLength(0, 32)]
        [string]
        ${Version},

        [Parameter(ParameterSetName='NewPrestagedMedia')]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue')]
        [ValidateLength(0, 127)]
        [string]
        ${Comment},

        [Parameter(ParameterSetName='NewPrestagedMedia')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${OperatingSystemImagePackageId},

        [Parameter(ParameterSetName='NewPrestagedMediaByValue', ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ImagePackage')]
        [System.Object]
        ${OperatingSystemImagePackage},

        [Parameter(ParameterSetName='NewPrestagedMedia')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${OperatingSystemImageName},

        [Parameter(ParameterSetName='NewPrestagedMediaByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Distribution Point')]
        [System.Object]
        ${OperatingSystemImageDistributionPoint},

        [Parameter(ParameterSetName='NewPrestagedMedia', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${OperatingSystemImageDistributionPointServerName},

        [Parameter(ParameterSetName='NewPrestagedMedia', ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue', ValueFromPipeline=$true)]
        [Alias('Applications')]
        [System.Object[]]
        ${Application},

        [Parameter(ParameterSetName='NewPrestagedMedia', ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue', ValueFromPipeline=$true)]
        [Alias('Packages')]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object[]]
        ${Package},

        [Parameter(ParameterSetName='NewPrestagedMedia', ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='NewPrestagedMediaByValue', ValueFromPipeline=$true)]
        [Alias('DriverPackages','PackageDriver','PackageDrivers')]
        [PSTypeName('IResultObject#SMS_DriverPackage')]
        [System.Object[]]
        ${DriverPackage},

        [Parameter(ParameterSetName='NewPrestagedMedia')]
        [string[]]
        ${ApplicationName},

        [Parameter(ParameterSetName='NewPrestagedMedia')]
        [string[]]
        ${PackageName},

        [Parameter(ParameterSetName='NewPrestagedMedia')]
        [Alias('PackageDriverName')]
        [string[]]
        ${DriverPackageName},

        [switch]
        ${AllowUacPrompt},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMTSNetworkAdapterSetting
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ByName')]
        [Alias('NetworkSettingIpAddress','NetworkSettingIpAddresses')]
        [ValidateNotNullOrEmpty()]
        [hashtable[]]
        ${IpAddress},

        [Parameter(ParameterSetName='ByName')]
        [Alias('GatewayIpAddress','GatewayIpAddresses')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Gateway},

        [Parameter(ParameterSetName='ByName')]
        [Alias('GatewayCostMetric')]
        [ValidateRange(1, 9999)]
        [int]
        ${Metric},

        [Parameter(ParameterSetName='ByName')]
        [Alias('DNSServerAddress','DNSServerAddresses')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Dns},

        [Parameter(ParameterSetName='ByName')]
        [switch]
        ${EnableDnsRegistration},

        [Parameter(ParameterSetName='ByName')]
        [switch]
        ${EnableFullDnsRegistration},

        [Parameter(ParameterSetName='ByName')]
        [Alias('WinsServerAddress','WinsServerAddresses')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Wins},

        [Parameter(ParameterSetName='ByName')]
        [switch]
        ${EnableLmHosts},

        [Parameter(ParameterSetName='ByName')]
        [System.Object]
        ${TcpIpNetbiosOption},

        [Parameter(ParameterSetName='ByName')]
        [switch]
        ${EnableTcpFiltering},

        [Parameter(ParameterSetName='ByName')]
        [switch]
        ${EnableUdpFiltering},

        [Parameter(ParameterSetName='ByName')]
        [switch]
        ${EnableIpProtocolFiltering},

        [Parameter(ParameterSetName='ByName')]
        [ValidateRange(1, 65535)]
        [ValidateNotNullOrEmpty()]
        [int[]]
        ${TcpFilterPortList},

        [Parameter(ParameterSetName='ByName')]
        [ValidateRange(1, 65535)]
        [ValidateNotNullOrEmpty()]
        [int[]]
        ${UdpFilterPortList},

        [Parameter(ParameterSetName='ByName')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${IpProtocolFilterList},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceNetworkAdapterSetting -Value New-CMTSNetworkAdapterSetting

function New-CMTSPartitionSetting
{
    [CmdletBinding(DefaultParameterSetName='PrimaryPartition', ConfirmImpact='Low')]
    param
    (
        [Parameter(ParameterSetName='EfiPartition', Mandatory=$true)]
        [switch]
        ${PartitionEfi},

        [Parameter(ParameterSetName='ExtendedPartition', Mandatory=$true)]
        [switch]
        ${PartitionExtended},

        [Parameter(ParameterSetName='HiddenPartition', Mandatory=$true)]
        [switch]
        ${PartitionHidden},

        [Parameter(ParameterSetName='LogicalPartition', Mandatory=$true)]
        [switch]
        ${PartitionLogical},

        [Parameter(ParameterSetName='MsrPartition', Mandatory=$true)]
        [switch]
        ${PartitionMsr},

        [Parameter(ParameterSetName='PrimaryPartition', Mandatory=$true)]
        [switch]
        ${PartitionPrimary},

        [Parameter(ParameterSetName='RecoveryPartition', Mandatory=$true)]
        [switch]
        ${PartitionRecovery},

        [Parameter(ParameterSetName='EfiPartition')]
        [Parameter(ParameterSetName='ExtendedPartition')]
        [Parameter(ParameterSetName='HiddenPartition')]
        [Parameter(ParameterSetName='LogicalPartition')]
        [Parameter(ParameterSetName='MsrPartition')]
        [Parameter(ParameterSetName='PrimaryPartition')]
        [Parameter(ParameterSetName='RecoveryPartition')]
        [Alias('PartitionName','VolumeName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='EfiPartition')]
        [Parameter(ParameterSetName='ExtendedPartition')]
        [Parameter(ParameterSetName='HiddenPartition')]
        [Parameter(ParameterSetName='LogicalPartition')]
        [Parameter(ParameterSetName='MsrPartition')]
        [Parameter(ParameterSetName='PrimaryPartition')]
        [Parameter(ParameterSetName='RecoveryPartition')]
        [ValidateRange(1, 10238976)]
        [int]
        ${Size},

        [Parameter(ParameterSetName='EfiPartition')]
        [Parameter(ParameterSetName='ExtendedPartition')]
        [Parameter(ParameterSetName='HiddenPartition')]
        [Parameter(ParameterSetName='LogicalPartition')]
        [Parameter(ParameterSetName='MsrPartition')]
        [Parameter(ParameterSetName='PrimaryPartition')]
        [Parameter(ParameterSetName='RecoveryPartition')]
        [ValidateSet('MB','GB','Percent')]
        [System.Object]
        ${SizeUnit},

        [Parameter(ParameterSetName='PrimaryPartition')]
        [bool]
        ${EnableDriveLetterAssignment},

        [Parameter(ParameterSetName='PrimaryPartition')]
        [bool]
        ${IsBootPartition},

        [Parameter(ParameterSetName='PrimaryPartition')]
        [bool]
        ${EnableQuickFormat},

        [Parameter(ParameterSetName='PrimaryPartition')]
        [ValidateSet('Ntfs','Fat32')]
        [System.Object]
        ${PartitionFileSystem},

        [Parameter(ParameterSetName='PrimaryPartition')]
        [string]
        ${Variable},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequencePartitionSetting -Value New-CMTSPartitionSetting

function New-CMTSRule
{
    [CmdletBinding(DefaultParameterSetName='VariableOnly', ConfirmImpact='Low')]
    param
    (
        [Parameter(ParameterSetName='ComputerCondition')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${AssetTag},

        [Parameter(ParameterSetName='ComputerCondition')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MacAddress},

        [Parameter(ParameterSetName='ComputerCondition')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SerialNumber},

        [Parameter(ParameterSetName='ComputerCondition')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Uuid},

        [Parameter(ParameterSetName='LocationCondition')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DefaultGateway},

        [Parameter(ParameterSetName='MakeModelCondition')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Make},

        [Parameter(ParameterSetName='MakeModelCondition')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Model},

        [Parameter(ParameterSetName='VariableCondition')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ReferencedVariableName},

        [Parameter(ParameterSetName='VariableCondition')]
        [System.Object]
        ${ReferencedVariableOperator},

        [Parameter(ParameterSetName='VariableCondition')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ReferencedVariableValue},

        [Parameter(ParameterSetName='ComputerCondition', Mandatory=$true)]
        [Parameter(ParameterSetName='LocationCondition', Mandatory=$true)]
        [Parameter(ParameterSetName='MakeModelCondition', Mandatory=$true)]
        [Parameter(ParameterSetName='VariableCondition', Mandatory=$true)]
        [Parameter(ParameterSetName='VariableOnly', Mandatory=$true)]
        [Alias('Variables')]
        [hashtable]
        ${Variable},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceRule -Value New-CMTSRule

function New-CMTSStepApplyDataImage
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_ImagePackage')]
        [System.Object]
        ${ImagePackage},

        [Parameter(Mandatory=$true)]
        [int]
        ${ImagePackageIndex},

        [Alias('DestinationVariableName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DestinationVariable},

        [System.Object]
        ${Destination},

        [ValidateRange(0, 99)]
        [int]
        ${DestinationDisk},

        [ValidateRange(0, 99)]
        [int]
        ${DestinationPartition},

        [Alias('DestinationLogicalDrive')]
        [string]
        ${DestinationDriveLetter},

        [Alias('WipePartitionBeforeApplyImage')]
        [bool]
        ${WipePartition},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepApplyDataImage -Value New-CMTSStepApplyDataImage

function New-CMTSStepApplyDriverPackage
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${PackageId},

        [switch]
        ${EnableRecurse},

        [switch]
        ${EnableUnsignedDriver},

        [ValidateNotNullOrEmpty()]
        [string]
        ${BootCriticalDriverId},

        [ValidateNotNullOrEmpty()]
        [string]
        ${BootCriticalContentUniqueId},

        [ValidateNotNullOrEmpty()]
        [string]
        ${BootCriticalInfFile},

        [ValidateNotNullOrEmpty()]
        [string]
        ${BootCriticalHardwareComponent},

        [ValidateNotNullOrEmpty()]
        [string]
        ${BootCriticalId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepApplyDriverPackage -Value New-CMTSStepApplyDriverPackage

function New-CMTSStepApplyNetworkSetting
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [string]
        ${WorkgroupName},

        [string]
        ${DomainName},

        [string]
        ${DomainOU},

        [Alias('DomainUserName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [Alias('DomainUserPassword')]
        [securestring]
        ${UserPassword},

        [string]
        ${DnsSuffix},

        [switch]
        ${EnableTcpIpFiltering},

        [Alias('AddAdapterSettings')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_NetworkAdapterSettings')]
        [System.Object[]]
        ${AddAdapterSetting},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepApplyNetworkSetting -Value New-CMTSStepApplyNetworkSetting

function New-CMTSStepApplyOperatingSystem
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [PSTypeName('IResultObject#SMS_ImagePackage')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${ImagePackage},

        [int]
        ${ImagePackageIndex},

        [Alias('UpgradePackage')]
        [PSTypeName('IResultObject#SMS_OperatingSystemInstallPackage')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${InstallPackage},

        [Alias('UpgradePackageIndex')]
        [int]
        ${InstallPackageIndex},

        [Alias('AnswerFilePackage')]
        [PSTypeName('IResultObject#SMS_Package')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${ConfigFilePackage},

        [Alias('AnswerFileName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConfigFileName},

        [Alias('DestinationVariableName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DestinationVariable},

        [System.Object]
        ${Destination},

        [ValidateRange(0, 99)]
        [int]
        ${DestinationDisk},

        [ValidateRange(1, 99)]
        [int]
        ${DestinationPartition},

        [Alias('DestinationLogicalDrive')]
        [string]
        ${DestinationDriveLetter},

        [Alias('AllowAccessFromDistributionPoint')]
        [bool]
        ${RunFromNet},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepApplyOperatingSystem -Value New-CMTSStepApplyOperatingSystem

function New-CMTSStepApplyWindowsSetting
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('RegisteredUserName')]
        [ValidateLength(1, 50)]
        [string]
        ${UserName},

        [Parameter(Mandatory=$true)]
        [Alias('RegisteredOrganizationName')]
        [ValidateLength(1, 50)]
        [string]
        ${OrganizationName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ProductKey},

        [System.Object]
        ${ServerLicensing},

        [ValidateRange(5, 9999)]
        [int]
        ${MaximumConnection},

        [securestring]
        ${Password},

        [System.TimeZoneInfo]
        ${TimeZone},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepApplyWindowsSetting -Value New-CMTSStepApplyWindowsSetting

function New-CMTSStepAutoApplyDriver
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Alias('DriverCategories')]
        [PSTypeName('IResultObject#SMS_CategoryInstance')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${DriverCategory},

        [System.Object]
        ${InstallDriverOption},

        [switch]
        ${AllowUnsignedDriver},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepAutoApplyDriver -Value New-CMTSStepAutoApplyDriver

function New-CMTSStepCaptureNetworkSettings
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [bool]
        ${MigrateAdapterSettings},

        [bool]
        ${MigrateNetworkMembership},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepCaptureNetworkSettings -Value New-CMTSStepCaptureNetworkSettings

function New-CMTSStepCaptureSystemImage
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('CaptureDestination')]
        [string]
        ${Path},

        [string]
        ${ImageDescription},

        [string]
        ${ImageVersion},

        [string]
        ${ImageCreator},

        [Parameter(Mandatory=$true)]
        [Alias('CaptureUserName')]
        [string]
        ${UserName},

        [Alias('CapturePassword')]
        [securestring]
        ${Password},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMTSStepCaptureUserState
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('UserStateMigrationToolPackage')]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object]
        ${Package},

        [System.Object]
        ${ModeOption},

        [Alias('ConfigFiles')]
        [string[]]
        ${ConfigFile},

        [bool]
        ${VerboseLogging},

        [bool]
        ${SkipEncryptedFile},

        [System.Object]
        ${FileAccessOption},

        [bool]
        ${ContinueOnLockedFile},

        [bool]
        ${UseHardLinks},

        [bool]
        ${OfflineUserState},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepCaptureUserState -Value New-CMTSStepCaptureUserState

function New-CMTSStepCaptureWindowsSettings
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [bool]
        ${MigrateComputerName},

        [bool]
        ${MigrateRegistrationInfo},

        [bool]
        ${MigrateTimeZone},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepCaptureSystemImage New-CMTaskSequenceStepCaptureWindowsSettings -Value New-CMTSStepCaptureWindowsSettings New-CMTSStepCaptureWindowsSettings

function New-CMTSStepConditionFile
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [datetime]
        ${FileTimestamp},

        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepConditionFile -Value New-CMTSStepConditionFile

function New-CMTSStepConditionFolder
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [datetime]
        ${FolderTimestamp},

        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepConditionFolder -Value New-CMTSStepConditionFolder

function New-CMTSStepConditionIfStatement
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepConditionIfStatement -Value New-CMTSStepConditionIfStatement

function New-CMTSStepConditionOperatingSystem
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepConditionOperatingSystem -Value New-CMTSStepConditionOperatingSystem

function New-CMTSStepConditionOperatingSystemLanguage
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [int]
        ${OSLanguageId},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepConditionOperatingSystemLanguage -Value New-CMTSStepConditionOperatingSystemLanguage

function New-CMTSStepConditionQueryWmi
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepConditionQueryWMI -Value New-CMTSStepConditionQueryWMI

function New-CMTSStepConditionRegistry
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [System.Object]
        ${RootKey},

        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(Mandatory=$true)]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [string]
        ${RegistryValueName},

        [System.Object]
        ${ValueType},

        [string]
        ${RegistryValueData},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepConditionRegistry -Value New-CMTSStepConditionRegistry

function New-CMTSStepConditionSoftware
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [bool]
        ${IsAnyVersion},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepConditionSoftware -Value New-CMTSStepConditionSoftware

function New-CMTSStepConditionVariable
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('Condition')]
        [System.Object]
        ${OperatorType},

        [Parameter(Mandatory=$true)]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepConditionVariable -Value New-CMTSStepConditionVariable

function New-CMTSStepConnectNetworkFolder
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${Path},

        [Alias('DriveLetter')]
        [string]
        ${Drive},

        [Parameter(Mandatory=$true)]
        [string]
        ${UserName},

        [ValidateNotNullOrEmpty()]
        [securestring]
        ${UserPassword},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepConnectNetworkFolder -Value New-CMTSStepConnectNetworkFolder

function New-CMTSStepConvertDisk
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [ValidateRange(0, 99)]
        [int]
        ${DiskNumber},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepConvertDisk -Value New-CMTSStepConvertDisk

function New-CMTSStepDisableBitLocker
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Alias('SpecificDrive')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Drive},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepDisableBitLocker -Value New-CMTSStepDisableBitLocker

function New-CMTSStepDownloadPackageContent
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('AddPackages')]
        [System.Object[]]
        ${AddPackage},

        [System.Object]
        ${LocationOption},

        [Alias('DestinationCustomPath')]
        [string]
        ${Path},

        [Alias('DestinationVariableName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DestinationVariable},

        [Alias('ContinueDownloadOnError')]
        [bool]
        ${ContinueDownload},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepDownloadPackageContent -Value New-CMTSStepDownloadPackageContent

function New-CMTSStepEnableBitLocker
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [switch]
        ${TpmOnly},

        [switch]
        ${UsbOnly},

        [switch]
        ${TpmAndUsb},

        [switch]
        ${TpmAndPin},

        [Alias('SpecificDrive')]
        [string]
        ${Drive},

        [ValidateNotNullOrEmpty()]
        [securestring]
        ${Pin},

        [System.Object]
        ${CreateKeyOption},

        [switch]
        ${WaitForBitLockerComplete},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepEnableBitLocker -Value New-CMTSStepEnableBitLocker

function New-CMTSStepInstallApplication
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Alias('Applications')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${Application},

        [ValidateNotNullOrEmpty()]
        [string]
        ${BaseVariableName},

        [ValidateRange(1, 5)]
        [int]
        ${RetryCount},

        [switch]
        ${ContinueOnInstallError},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepInstallApplication -Value New-CMTSStepInstallApplication

function New-CMTSStepInstallSoftware
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [PSTypeName('IResultObject#SMS_Program')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Program},

        [ValidateNotNullOrEmpty()]
        [string]
        ${BaseVariableName},

        [switch]
        ${ContinueOnInstallError},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepInstallSoftware -Value New-CMTSStepInstallSoftware

function New-CMTSStepInstallUpdate
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Alias('InstallUpdateBasedOnTypeOfDeployment')]
        [System.Object]
        ${Target},

        [Alias('EnableEvaluateFromCache')]
        [bool]
        ${UseCache},

        [ValidateRange(0, 5)]
        [int]
        ${RetryCount},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepInstallUpdate -Value New-CMTSStepInstallUpdate

function New-CMTSStepJoinDomainWorkgroup
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [string]
        ${WorkgroupName},

        [string]
        ${DomainName},

        [Alias('OrganizationalUnit')]
        [string]
        ${OU},

        [string]
        ${UserName},

        [securestring]
        ${UserPassword},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepJoinDomainWorkgroup -Value New-CMTSStepJoinDomainWorkgroup

function New-CMTSStepOfflineEnableBitLocker
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Alias('DestinationDisk')]
        [ValidateRange(0, 99)]
        [int]
        ${Disk},

        [Alias('DestinationPartition')]
        [ValidateRange(1, 99)]
        [int]
        ${Partition},

        [Alias('DestinationDrive')]
        [string]
        ${Drive},

        [Alias('DestinationVariable')]
        [string]
        ${VariableName},

        [bool]
        ${EnableSkipWhenTpmInvalid},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepOfflineEnableBitLocker -Value New-CMTSStepOfflineEnableBitLocker

function New-CMTSStepPartitionDisk
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [ValidateSet('Mbr','Gpt')]
        [System.Object]
        ${DiskType},

        [bool]
        ${IsBootDisk},

        [ValidateRange(0, 99)]
        [int]
        ${DiskNumber},

        [Parameter(Mandatory=$true)]
        [Alias('PartitionSettings')]
        [PSTypeName('IResultObject#SMS_TaskSequence_PartitionSettings')]
        [System.Object[]]
        ${PartitionSetting},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepPartitionDisk -Value New-CMTSStepPartitionDisk

function New-CMTSStepPrepareConfigMgrClient
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepPrepareConfigMgrClient -Value New-CMTSStepPrepareConfigMgrClient

function New-CMTSStepPrepareWindows
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Alias('AutomaticallyBuildMassStorageDriverList')]
        [bool]
        ${BuildDriverList},

        [Alias('DoNotResetActivationFlag')]
        [bool]
        ${KeepActivation},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepPrepareWindows -Value New-CMTSStepPrepareWindows

function New-CMTSStepPrestartCheck
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Alias('EnableCheckFreeDiskSpace')]
        [bool]
        ${CheckSpace},

        [Alias('MinimumFreeDiskSpace')]
        [ValidateRange(0, 2000000)]
        [int]
        ${DiskSpace},

        [Alias('EnableCheckMemory')]
        [bool]
        ${CheckMemory},

        [Alias('MinimumMemory')]
        [ValidateRange(0, 2000000)]
        [int]
        ${Memory},

        [Alias('EnableCheckOSType')]
        [bool]
        ${CheckOS},

        [Alias('CurrentOSType')]
        [System.Object]
        ${OS},

        [Alias('EnableCheckProcessorSpeed')]
        [bool]
        ${CheckSpeed},

        [Alias('MinimumProcessorSpeed')]
        [ValidateRange(0, 2000000)]
        [int]
        ${Speed},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepPrestartCheck -Value New-CMTSStepPrestartCheck

function New-CMTSStepReboot
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [System.Object]
        ${RunAfterRestart},

        [string]
        ${NotificationMessage},

        [ValidateRange(1, 9999)]
        [int]
        ${MessageTimeout},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepReboot -Value New-CMTSStepReboot

function New-CMTSStepReleaseStateStore
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepReleaseStateStore -Value New-CMTSStepReleaseStateStore

function New-CMTSStepRequestStateStore
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [ValidateRange(0, 30)]
        [int]
        ${RetryCount},

        [ValidateRange(0, 600)]
        [int]
        ${RetryTime},

        [Alias('FallbackToNaa')]
        [bool]
        ${FallbackToAccount},

        [System.Object]
        ${RequestOption},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepRequestStateStore -Value New-CMTSStepRequestStateStore

function New-CMTSStepRestoreUserState
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('UserStateMigrationToolPackage')]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object]
        ${Package},

        [System.Object]
        ${ModeOption},

        [Alias('ConfigFiles')]
        [string[]]
        ${ConfigFile},

        [Alias('RestoreLocalComputerUserProfile')]
        [bool]
        ${RestoreLocalAccount},

        [Alias('NewPasswordForLocalAccount')]
        [ValidateNotNullOrEmpty()]
        [securestring]
        ${Password},

        [bool]
        ${ContinueOnRestore},

        [bool]
        ${VerboseLogging},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepRestoreUserState -Value New-CMTSStepRestoreUserState

function New-CMTSStepRunCommandLine
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${CommandLine},

        [Alias('StartIn')]
        [string]
        ${WorkingDirectory},

        [string]
        ${PackageId},

        [Alias('TimeoutInMinutes')]
        [ValidateRange(1, 999)]
        [int]
        ${Timeout},

        [Alias('DisableRedirectionFor64BitFileSystem')]
        [switch]
        ${DisableWow64Redirection},

        [switch]
        ${RunAsUser},

        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [securestring]
        ${UserPassword},

        [Alias('SuccessCodes')]
        [int[]]
        ${SuccessCode},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepRunCommandLine -Value New-CMTSStepRunCommandLine

function New-CMTSStepRunPowerShellScript
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='RunScriptFromSource', Mandatory=$true)]
        [Parameter(ParameterSetName='RunScriptFromPackage', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='RunScriptFromSource', Mandatory=$true)]
        [Alias('SourceCode')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SourceScript},

        [Parameter(ParameterSetName='RunScriptFromPackage', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='RunScriptFromPackage', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ScriptName},

        [Parameter(ParameterSetName='RunScriptFromSource')]
        [Parameter(ParameterSetName='RunScriptFromPackage')]
        [Alias('StartIn')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${WorkingDirectory},

        [Parameter(ParameterSetName='RunScriptFromSource')]
        [Parameter(ParameterSetName='RunScriptFromPackage')]
        [Alias('TimeoutInMinutes')]
        [ValidateRange(1, 999)]
        [int]
        ${TimeoutMins},

        [Parameter(ParameterSetName='RunScriptFromSource')]
        [Parameter(ParameterSetName='RunScriptFromPackage')]
        [Alias('User')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='RunScriptFromSource')]
        [Parameter(ParameterSetName='RunScriptFromPackage')]
        [Alias('Password')]
        [securestring]
        ${UserPassword},

        [Parameter(ParameterSetName='RunScriptFromSource')]
        [Parameter(ParameterSetName='RunScriptFromPackage')]
        [Alias('Output','OutputVariable')]
        [string]
        ${OutputVariableName},

        [Parameter(ParameterSetName='RunScriptFromSource')]
        [Parameter(ParameterSetName='RunScriptFromPackage')]
        [Alias('Parameters')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Parameter},

        [Alias('SuccessCodes')]
        [int[]]
        ${SuccessCode},

        [Parameter(ParameterSetName='RunScriptFromSource')]
        [Parameter(ParameterSetName='RunScriptFromPackage')]
        [Alias('PowerShellExecutionPolicy')]
        [System.Object]
        ${ExecutionPolicy},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepRunPowerShellScript -Value New-CMTSStepRunPowerShellScript

function New-CMTSStepSetDynamicVariable
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('AddRules')]
        [PSTypeName('IResultObject#SMS_TaskSequence_Rule')]
        [System.Object[]]
        ${AddRule},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepSetDynamicVariable -Value New-CMTSStepSetDynamicVariable

function New-CMTSStepSetupWindowsAndConfigMgr
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('ClientPackageId')]
        [string]
        ${PackageId},

        [Alias('PreproductionClientPackageId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${PreproductionPackageId},

        [Alias('InstallationProperties')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${InstallationProperty},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepSetupWindowsAndConfigMgr -Value New-CMTSStepSetupWindowsAndConfigMgr

function New-CMTSStepSetVariable
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('VariableName')]
        [string]
        ${TaskSequenceVariable},

        [Alias('VariableValue')]
        [string]
        ${TaskSequenceVariableValue},

        [Alias('IsHidden','IsMask')]
        [bool]
        ${IsMasked},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepSetVariable -Value New-CMTSStepSetVariable

function New-CMTSStepUpgradeOperatingSystem
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Low')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${UpgradePackage},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SourcePath},

        [int]
        ${EditionIndex},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ProductKey},

        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${DriverPackage},

        [ValidateNotNullOrEmpty()]
        [string]
        ${StagedContent},

        [ValidateRange(1, 43200)]
        [int]
        ${SetupTimeout},

        [bool]
        ${ScanOnly},

        [bool]
        ${IgnoreMessage},

        [System.Object]
        ${DynamicUpdateSetting},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('StepName')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [switch]
        ${ContinueOnError},

        [Alias('DisableThisStep')]
        [switch]
        ${Disable},

        [Alias('Conditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name New-CMTaskSequenceStepUpgradeOperatingSystem -Value New-CMTSStepUpgradeOperatingSystem

function New-CMUserDataAndProfileConfigurationItem
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [Alias('LocalizedDisplayName')]
        [ValidateLength(1, 255)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='New')]
        [Alias('LocalizedDescription')]
        [ValidateLength(0, 512)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [bool]
        ${ConfigureFolderRedirection},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [bool]
        ${ConfigureOfflineFile},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [bool]
        ${ConfigureRoamingUserProfile},

        [Parameter(ParameterSetName='New')]
        [System.Object]
        ${DeviceType},

        [Parameter(ParameterSetName='New')]
        [Alias('FolderRedirectionUserConfigurationForDesktop')]
        [System.Object]
        ${Desktop},

        [Parameter(ParameterSetName='New')]
        [Alias('FolderRedirectionUserConfigurationForStartMenu')]
        [System.Object]
        ${StartMenu},

        [Parameter(ParameterSetName='New')]
        [Alias('FolderRedirectionUserConfigurationForDocuments','Documents')]
        [System.Object]
        ${Document},

        [Parameter(ParameterSetName='New')]
        [Alias('FolderRedirectionUserConfigurationForMusic')]
        [System.Object]
        ${Music},

        [Parameter(ParameterSetName='New')]
        [Alias('FolderRedirectionUserConfigurationForVideos','Videos')]
        [System.Object]
        ${Video},

        [Parameter(ParameterSetName='New')]
        [Alias('FolderRedirectionUserConfigurationForFavorites','Favorites')]
        [System.Object]
        ${Favorite},

        [Parameter(ParameterSetName='New')]
        [Alias('FolderRedirectionUserConfigurationForContacts','Contacts')]
        [System.Object]
        ${Contact},

        [Parameter(ParameterSetName='New')]
        [Alias('FolderRedirectionUserConfigurationForDownloads','Downloads')]
        [System.Object]
        ${Download},

        [Parameter(ParameterSetName='New')]
        [Alias('FolderRedirectionUserConfigurationForLinks','Links')]
        [System.Object]
        ${Link},

        [Parameter(ParameterSetName='New')]
        [Alias('FolderRedirectionUserConfigurationForSearches','Searches')]
        [System.Object]
        ${Search},

        [Parameter(ParameterSetName='New')]
        [Alias('FolderRedirectionUserConfigurationForSavedGames','SavedGames')]
        [System.Object]
        ${SavedGame},

        [Parameter(ParameterSetName='New')]
        [Alias('FolderRedirectionUserConfigurationForAppDataRoaming')]
        [System.Object]
        ${AppDataRoaming},

        [Parameter(ParameterSetName='New')]
        [Alias('FolderRedirectionUserConfigurationForPictures','Pictures')]
        [System.Object]
        ${Picture},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${UseSpecifiedLocation},

        [Parameter(ParameterSetName='New')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SpecifiedLocation},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${ManageAdvancedSetting},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${GrantExclusiveRight},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${MoveContent},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${LeaveFolderNewLocation},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${MoveCachedFolder},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${UseCommonAlert},

        [Parameter(ParameterSetName='New')]
        [ValidateRange(0, 32767)]
        [int]
        ${ErrorDays},

        [Parameter(ParameterSetName='New')]
        [ValidateRange(0, 32767)]
        [int]
        ${WarningDays},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${EnableOfflineFile},

        [Parameter(ParameterSetName='New')]
        [System.Object]
        ${BackgroundSynchronization},

        [Parameter(ParameterSetName='New')]
        [System.Object]
        ${FileSynchronization},

        [Parameter(ParameterSetName='New')]
        [string[]]
        ${OfflineFile},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${EnableSlowLink},

        [Parameter(ParameterSetName='New')]
        [ValidateRange(0, 32767)]
        [int]
        ${SlowLink},

        [Parameter(ParameterSetName='New')]
        [Alias('SynchronizationInterval')]
        [ValidateRange(0, 32767)]
        [int]
        ${SyncMins},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${DisableWorkOffline},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${DisableMakeOffline},

        [Parameter(ParameterSetName='New')]
        [ValidateRange(0, 32767)]
        [int]
        ${LimitDisk},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${AllowAllDevice},

        [Parameter(ParameterSetName='New')]
        [Alias('ExcludeList')]
        [string[]]
        ${ExcludeProfile},

        [Parameter(ParameterSetName='New')]
        [Alias('SynchronizationList','SyncDirectories')]
        [string[]]
        ${SyncDirectory},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${ManageSlowLink},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${DetectSlowLinkDisabled},

        [Parameter(ParameterSetName='New')]
        [ValidateRange(0, 32767)]
        [int]
        ${Timeout},

        [Parameter(ParameterSetName='New')]
        [ValidateRange(0, 32767)]
        [int]
        ${ConnectionTransferRate},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${SlowLinkUIEnabled},

        [Parameter(ParameterSetName='New')]
        [Alias('WaitForNetworkInSeconds')]
        [ValidateRange(0, 32767)]
        [int]
        ${WaitForNetworkSec},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${AccessPolicy},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${OwnerCheckDisabled},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${AddAdminGroupToRupEnabled},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${AllowCrossForestUserPolicy},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${TempProfileLogonBlocked},

        [Parameter(ParameterSetName='New')]
        [Alias('OnlyAllowLocalProfiles')]
        [bool]
        ${OnlyAllowLocalProfile},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${SynchronizationPolicy},

        [Parameter(ParameterSetName='New')]
        [ValidateNotNullOrEmpty()]
        [ValidateSet('12:00 AM','1:00 PM','2:00 PM','3:00 PM','4:00 PM','5:00 PM','6:00 PM','7:00 PM','8:00 PM','9:00 PM','10:00 PM','11:00 PM','12:00 PM')]
        [string]
        ${SpecifyTime},

        [Parameter(ParameterSetName='New')]
        [Alias('SpecifyTimeInterval')]
        [ValidateRange(0, 32767)]
        [int]
        ${SpecifyTimeMin},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${DeleteRoamingCacheEnabled},

        [Parameter(ParameterSetName='New')]
        [ValidateRange(0, 32767)]
        [int]
        ${DeleteProfileOlderDays},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${ForceUnloadDisabled},

        [Parameter(ParameterSetName='New')]
        [bool]
        ${ProfileUploadDisabled},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMVhd
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [Alias('PackageSourcePath','Path')]
        [string]
        ${VhdFilePath},

        [Parameter(ParameterSetName='New')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Version},

        [Parameter(ParameterSetName='New')]
        [string]
        ${Description},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [string]
        ${TaskSequencePackageId},

        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [Alias('DistributionPointServerNames')]
        [string[]]
        ${DistributionPointServerName},

        [Parameter(ParameterSetName='New')]
        [Alias('VhdSize')]
        [ValidateRange(1, 2147483647)]
        [int]
        ${VhdSizeGB},

        [Parameter(ParameterSetName='New')]
        [timespan]
        ${Timeout},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMVirtualEnvironmentGroup
{
    [CmdletBinding(DefaultParameterSetName='NewByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='NewByDTI', Mandatory=$true)]
        [Alias('DeploymentType')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${DeploymentTypeItem},

        [Parameter(ParameterSetName='NewByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_DeploymentType')]
        [System.Object[]]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMVpnProfileConfigurationItem
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DesiredConfigurationDigestPath},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMWindowsEnrollmentProfile
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('Cloud','OnPremises')]
        [System.Object]
        ${Authority},

        [Parameter(Mandatory=$true)]
        [Alias('ProfileName')]
        [string]
        ${Name},

        [Alias('ProfileDescription')]
        [string]
        ${Description},

        [string]
        ${SiteCode},

        [Alias('CertificateProfiles')]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_TrustedRootCertificateSettings')]
        [System.Object[]]
        ${CertificateProfile},

        [Alias('WifiProfiles')]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_WirelessProfileSettings')]
        [System.Object[]]
        ${WifiProfile},

        [Alias('EnrollmentProxyPoints')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Enrollment Web Site')]
        [System.Object[]]
        ${EnrollmentProxyPoint},

        [string]
        ${ProxyServerUrl},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMWindowsFirewallPolicy
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='New', Mandatory=$true)]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='New')]
        [Alias('LocalizedDescription')]
        [string]
        ${Description},

        [Parameter(ParameterSetName='New')]
        [System.Object]
        ${DomainTurnOnFirewall},

        [Parameter(ParameterSetName='New')]
        [System.Object]
        ${PrivateTurnOnFirewall},

        [Parameter(ParameterSetName='New')]
        [System.Object]
        ${PublicTurnOnFirewall},

        [Parameter(ParameterSetName='New')]
        [System.Object]
        ${DomainBlockAllInboundTraffic},

        [Parameter(ParameterSetName='New')]
        [System.Object]
        ${PrivateBlockAllInboundTraffic},

        [Parameter(ParameterSetName='New')]
        [System.Object]
        ${PublicBlockAllInboundTraffic},

        [Parameter(ParameterSetName='New')]
        [Alias('DomainNotifications')]
        [System.Object]
        ${DomainNotification},

        [Parameter(ParameterSetName='New')]
        [Alias('PrivateNotifications')]
        [System.Object]
        ${PrivateNotification},

        [Parameter(ParameterSetName='New')]
        [Alias('PublicNotifications')]
        [System.Object]
        ${PublicNotification},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMWirelessProfile
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [string]
        ${Description},

        [System.Object]
        ${Severity},

        [Parameter(Mandatory=$true)]
        [Alias('SupportedPlatforms')]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(Mandatory=$true)]
        [string]
        ${NetworkName},

        [Parameter(Mandatory=$true)]
        [string]
        ${Ssid},

        [bool]
        ${ConnectAutoNetworkInRange},

        [bool]
        ${LookOtherNetworkWhileConnected},

        [bool]
        ${ConnectEvenNotBroadcasting},

        [System.Object]
        ${AuthenticationMode},

        [bool]
        ${EnableSingleSignOn},

        [bool]
        ${SingleSignOnImmediatelyBefore},

        [ValidateRange(1, 120)]
        [int]
        ${SingleSignOnMaxDelaySec},

        [bool]
        ${SingleSignOnAdditionalDialogs},

        [bool]
        ${SingleSignOnVlan},

        [bool]
        ${EnablePmkCaching},

        [Alias('PmkTimeToLiveMinutes')]
        [ValidateRange(5, 1440)]
        [int]
        ${PmkTimeToLiveMins},

        [ValidateRange(1, 255)]
        [int]
        ${PmkCacheMaxEntries},

        [bool]
        ${PreAuthentication},

        [ValidateRange(1, 16)]
        [int]
        ${PreAuthAttempts},

        [bool]
        ${EnableFipsCompliance},

        [bool]
        ${ConfigureProxy},

        [bool]
        ${AutoDetectProxy},

        [string]
        ${AutoScriptUrl},

        [string]
        ${ProxyAddress},

        [ValidateRange(1, 65535)]
        [int]
        ${ProxyPort},

        [string]
        ${BypassProxy},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${SecurityAuthentication},

        [System.Object]
        ${SecurityEncryption},

        [ValidateSet('AKA','AKAprime','FAST','LEAP','PEAP','SIM','TLS','TTLS')]
        [System.Object]
        ${EapType},

        [string]
        ${TrustedServerCertSubjectNames},

        [switch]
        ${RememberCredentials},

        [bool]
        ${RememberUserCredentials},

        [Alias('RootCertificates')]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy')]
        [System.Object[]]
        ${RootCertificate},

        [PSTypeName('IResultObject#SMS_ConfigurationPolicy')]
        [System.Object]
        ${ClientCertificate},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function New-CMWirelessProfileConfigurationItem
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DesiredConfigurationDigestPath},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Out-CMSignedWindowsMobileCab
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [Parameter(Mandatory=$true, Position=0)]
        [string]
        ${ContentLocation},

        [Parameter(Mandatory=$true)]
        [securestring]
        ${PfxPassword},

        [Parameter(Mandatory=$true)]
        [string]
        ${PfxFilePath},

        [Parameter(Mandatory=$true)]
        [string]
        ${OutputPath},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Publish-CMPrestageContent
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory_DeploymentPackage', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory_DeploymentPackage', Mandatory=$true)]
        [Alias('DeploymentPackageIds')]
        [string[]]
        ${DeploymentPackageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_DeploymentPackage', Mandatory=$true)]
        [Alias('DeploymentPackageNames')]
        [string[]]
        ${DeploymentPackageName},

        [Parameter(ParameterSetName='SearchByValueMandatory_DeploymentPackage', Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_SoftwareUpdatesPackage')]
        [System.Object]
        ${DeploymentPackage},

        [Parameter(ParameterSetName='SearchByIdMandatory_BootImage', Mandatory=$true)]
        [Alias('BootImageIds')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${BootImageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_BootImage', Mandatory=$true)]
        [Alias('BootImageNames')]
        [string[]]
        ${BootImageName},

        [Parameter(ParameterSetName='SearchByValueMandatory_BootImage', Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_BootImagePackage')]
        [System.Object]
        ${BootImage},

        [Parameter(ParameterSetName='SearchByIdMandatory_DriverPackage', Mandatory=$true)]
        [Alias('DriverPackageIds')]
        [string[]]
        ${DriverPackageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_DriverPackage', Mandatory=$true)]
        [Alias('DriverPackageNames')]
        [string[]]
        ${DriverPackageName},

        [Parameter(ParameterSetName='SearchByValueMandatory_DriverPackage', Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_DriverPackage')]
        [System.Object]
        ${DriverPackage},

        [Parameter(ParameterSetName='SearchByIdMandatory_OperatingSystemImage', Mandatory=$true)]
        [Alias('OperatingSystemImageIds')]
        [string[]]
        ${OperatingSystemImageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_OperatingSystemImage', Mandatory=$true)]
        [Alias('OperatingSystemImageNames')]
        [string[]]
        ${OperatingSystemImageName},

        [Parameter(ParameterSetName='SearchByValueMandatory_OperatingSystemImage', Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_ImagePackage')]
        [System.Object]
        ${OperatingSystemImage},

        [Parameter(ParameterSetName='SearchByIdMandatory_OperatingSystemInstaller', Mandatory=$true)]
        [Alias('OperatingSystemInstallerIds')]
        [string[]]
        ${OperatingSystemInstallerId},

        [Parameter(ParameterSetName='SearchByNameMandatory_OperatingSystemInstaller', Mandatory=$true)]
        [Alias('OperatingSystemInstallerNames')]
        [string[]]
        ${OperatingSystemInstallerName},

        [Parameter(ParameterSetName='SearchByValueMandatory_OperatingSystemInstaller', Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_OperatingSystemInstallPackage')]
        [System.Object]
        ${OperatingSystemInstaller},

        [Parameter(ParameterSetName='SearchByIdMandatory_Package', Mandatory=$true)]
        [Alias('PackageIds')]
        [string[]]
        ${PackageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_Package', Mandatory=$true)]
        [Alias('PackageNames')]
        [string[]]
        ${PackageName},

        [Parameter(ParameterSetName='SearchByValueMandatory_Package', Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object]
        ${Package},

        [Parameter(ParameterSetName='SearchByIdMandatory_Application', Mandatory=$true)]
        [Alias('ApplicationIds')]
        [string[]]
        ${ApplicationId},

        [Parameter(ParameterSetName='SearchByNameMandatory_Application', Mandatory=$true)]
        [Alias('ApplicationNames')]
        [string[]]
        ${ApplicationName},

        [Parameter(ParameterSetName='SearchByValueMandatory_Application', Mandatory=$true)]
        [System.Object]
        ${Application},

        [Parameter(ParameterSetName='SearchByIdMandatory_Application')]
        [Parameter(ParameterSetName='SearchByNameMandatory_Application')]
        [Parameter(ParameterSetName='SearchByValueMandatory_Application')]
        [Alias('DisableExportAllDependencies')]
        [switch]
        ${DisableDependencyExport},

        [Parameter(ParameterSetName='SearchByIdMandatory_DeploymentPackage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory_DeploymentPackage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory_DeploymentPackage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory_BootImage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory_BootImage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory_BootImage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory_DriverPackage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory_DriverPackage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory_DriverPackage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory_OperatingSystemImage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory_OperatingSystemImage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory_OperatingSystemImage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory_OperatingSystemInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory_OperatingSystemInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory_OperatingSystemInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory_Package', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory_Package', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory_Package', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory_Application', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory_Application', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory_Application', Mandatory=$true)]
        [string]
        ${FileName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Description},

        [Parameter(ParameterSetName='SearchByIdMandatory_DeploymentPackage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory_DeploymentPackage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory_DeploymentPackage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory_BootImage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory_BootImage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory_BootImage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory_DriverPackage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory_DriverPackage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory_DriverPackage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory_OperatingSystemImage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory_OperatingSystemImage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory_OperatingSystemImage', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory_OperatingSystemInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory_OperatingSystemInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory_OperatingSystemInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory_Package', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory_Package', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory_Package', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory_Application', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory_Application', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory_Application', Mandatory=$true)]
        [string]
        ${DistributionPointName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Publish-CMPrestageContentTaskSequence
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory_TaskSequence', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory_TaskSequence', Mandatory=$true)]
        [Alias('TaskSequenceIds')]
        [string[]]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='SearchByNameMandatory_TaskSequence', Mandatory=$true)]
        [Alias('TaskSequenceNames')]
        [string[]]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='SearchByValueMandatory_TaskSequence', Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${TaskSequence},

        [Parameter(ParameterSetName='SearchByIdMandatory_TaskSequence')]
        [Parameter(ParameterSetName='SearchByNameMandatory_TaskSequence')]
        [Parameter(ParameterSetName='SearchByValueMandatory_TaskSequence')]
        [Alias('DisableIncludeApplicationDependencies','IgnoreApplicationDependencies')]
        [switch]
        ${IgnoreApplicationDependency},

        [Parameter(Mandatory=$true)]
        [string]
        ${FolderName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Description},

        [Parameter(Mandatory=$true)]
        [string]
        ${DistributionPointName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMAccessAccount
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByApplicationName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='SearchByApplicationId', Mandatory=$true)]
        [string]
        ${ApplicationId},

        [Parameter(ParameterSetName='SearchByBootImageName', Mandatory=$true)]
        [string]
        ${BootImageName},

        [Parameter(ParameterSetName='SearchByBootImageId', Mandatory=$true)]
        [string]
        ${BootImageId},

        [Parameter(ParameterSetName='SearchByDriverPackageName', Mandatory=$true)]
        [string]
        ${DriverPackageName},

        [Parameter(ParameterSetName='SearchByDriverPackageId', Mandatory=$true)]
        [string]
        ${DriverPackageId},

        [Parameter(ParameterSetName='SearchByOSImageName', Mandatory=$true)]
        [string]
        ${OperatingSystemImageName},

        [Parameter(ParameterSetName='SearchByOSImageId', Mandatory=$true)]
        [string]
        ${OperatingSystemImageId},

        [Parameter(ParameterSetName='SearchByOSInstallerName', Mandatory=$true)]
        [string]
        ${OperatingSystemInstallerName},

        [Parameter(ParameterSetName='SearchByOSInstallerId', Mandatory=$true)]
        [string]
        ${OperatingSystemInstallerId},

        [Parameter(ParameterSetName='SearchByPackageName', Mandatory=$true)]
        [string]
        ${PackageName},

        [Parameter(ParameterSetName='SearchByPackageId', Mandatory=$true)]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='SearchBySoftwareUpdateDeploymentPackageName', Mandatory=$true)]
        [string]
        ${SoftwareUpdateDeploymentPackageName},

        [Parameter(ParameterSetName='SearchBySoftwareUpdateDeploymentPackageId', Mandatory=$true)]
        [string]
        ${SoftwareUpdateDeploymentPackageId},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${AccountType},

        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('DriverPackage','Application','OperatingSystemImage','OperatingSystemInstaller','Package','SoftwareUpdateDeploymentPackage','BootImage')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMAccount
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Account')]
        [PSTypeName('IResultObject#SMS_SCI_Reserved')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${UserName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMActiveDirectoryForest
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByFQDNMandatory', Mandatory=$true, Position=0)]
        [Alias('ForestFqdn')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ADForest')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMAdministrativeUser
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByName', Mandatory=$true)]
        [Alias('DisplayName','LogonName','UserName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Admin')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('AdminId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMAlert
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Alert')]
        [PSTypeName('IResultObject#SMS_AlertBase')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMAlertSubscription
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Subscription')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMAntimalwarePolicy
{
    [CmdletBinding(DefaultParameterSetName='SearchByIdMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('SettingsId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AntiMalwareSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMApplication
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName','ApplicationName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByModelName', Mandatory=$true)]
        [string]
        ${ModelName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMApplicationCatalogWebServicePoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ApplicationCatalogWebServicePoint')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Application Web Service')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMApplicationCatalogWebsitePoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ApplicationCatalogWebSitePoint')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Portal Web Site')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMApplicationDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('ApplicationName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchBySmsObjectId')]
        [Alias('CI_ID','ApplicationID')]
        [int]
        ${SmsObjectId},

        [Parameter(ParameterSetName='SearchByDeploymentId')]
        [Alias('AssignmentUniqueID','ApplicationDeploymentID')]
        [string]
        ${DeploymentId},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Assignment','ApplicationDeployment','Application')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMApplicationRevisionHistory
{
    [CmdletBinding(DefaultParameterSetName='SearchByRevisionMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchBySingleNameMandatory', Mandatory=$true)]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SearchByRevisionMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ApplicationRevision')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchBySingleIdMandatory', Mandatory=$true)]
        [Alias('CIId')]
        [uint32]
        ${Id},

        [Parameter(ParameterSetName='SearchBySingleNameMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchBySingleIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true)]
        [uint32]
        ${Revision},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMAppVVirtualEnvironment
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CIId','CI_ID')]
        [ValidateNotNullOrEmpty()]
        [int[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_VirtualEnvironment')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMAssetIntelligenceCatalogItem
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${CategoryName},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CategoryId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AICategory')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMAssetIntelligenceSynchronizationPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMAutoDeploymentRuleDeployment
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('AutoDeploymentRuleDeployment')]
        [PSTypeName('IResultObject#SMS_AdrDeploymentSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Remove-CMSoftwareUpdateAutoDeploymentRuleDeployment -Value Remove-CMAutoDeploymentRuleDeployment

function Remove-CMBaseline
{
    [CmdletBinding(DefaultParameterSetName='SearchByIdMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationBaselineInfo')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMBaselineDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('BaselineName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchBySmsObjectId')]
        [Alias('CI_ID','BaselineID')]
        [int]
        ${SmsObjectId},

        [Parameter(ParameterSetName='SearchByDeploymentId')]
        [Alias('AssignmentUniqueID','BaselineDeploymentID')]
        [string]
        ${DeploymentId},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Assignment','BaselineDeployment','Baseline')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMBootImage
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_BootImagePackage')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMBoundary
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('BoundaryId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('DisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Boundary')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMBoundaryFromGroup
{
    [CmdletBinding(DefaultParameterSetName='RemoveBoundaryFromGroupById_Id', ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [Parameter(ParameterSetName='RemoveBoundaryFromGroupById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveBoundaryFromGroupById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveBoundaryFromGroupById_Object', Mandatory=$true)]
        [int]
        ${BoundaryId},

        [Parameter(ParameterSetName='RemoveBoundaryFromGroupByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveBoundaryFromGroupByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveBoundaryFromGroupByName_Object', Mandatory=$true)]
        [AllowEmptyString()]
        [string]
        ${BoundaryName},

        [Parameter(ParameterSetName='RemoveBoundaryFromGroupByObject_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveBoundaryFromGroupByObject_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveBoundaryFromGroupByObject_Object', Mandatory=$true)]
        [Alias('Boundary')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Boundary')]
        [System.Object]
        ${BoundaryInputObject},

        [Parameter(ParameterSetName='RemoveBoundaryFromGroupById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveBoundaryFromGroupByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveBoundaryFromGroupByObject_Id', Mandatory=$true)]
        [int]
        ${BoundaryGroupId},

        [Parameter(ParameterSetName='RemoveBoundaryFromGroupById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveBoundaryFromGroupByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveBoundaryFromGroupByObject_Name', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${BoundaryGroupName},

        [Parameter(ParameterSetName='RemoveBoundaryFromGroupById_Object', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveBoundaryFromGroupByName_Object', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveBoundaryFromGroupByObject_Object', Mandatory=$true)]
        [Alias('BoundaryGroup')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_BoundaryGroup')]
        [System.Object]
        ${BoundaryGroupInputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMBoundaryGroup
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('GroupId')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_BoundaryGroup')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMBoundaryGroupRelationship
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [int]
        ${SourceGroupId},

        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [int]
        ${DestinationGroupId},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SourceGroupName},

        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DestinationGroupName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_BoundaryGroupRelationships')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMCategory
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('LocalizedCategoryInstanceName','CategoryName')]
        [string[]]
        ${Name},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('CategoryInstanceUniqueid','CategoryId')]
        [string[]]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Category')]
        [PSTypeName('IResultObject#SMS_CategoryInstance')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='ByCategory', Mandatory=$true)]
        [Parameter(ParameterSetName='ByName')]
        [System.Object]
        ${CategoryType},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMCertificateRegistrationPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('CertificateRegistrationPoint')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Certificate Registration Point')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMClientCertificatePfx
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ClientPfxCertificate')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='ByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Thumbprint},

        [Parameter(ParameterSetName='ByName')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_PfxCertificateSettings')]
        [System.Object]
        ${CertificateProfilePfx},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMClientOperation
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='RemoveById', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ClientOperationStatus')]
        [System.Object]
        ${ClientOperation},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMClientSetting
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('SettingsId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMCloudDistributionPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('AzureServiceId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AzureService')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMCloudManagementGateway
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('AzureServiceId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AzureService')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMCloudManagementGatewayConnectionPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('GatewayConnectionPoint')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Cloud Proxy Connector')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMCollection
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CollectionId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Remove-CMDeviceCollection Remove-CMUserCollection -Value Remove-CMCollection Remove-CMCollection

function Remove-CMCollectionFromAdministrativeUser
{
    [CmdletBinding(DefaultParameterSetName='RemoveCollectionFromAdminByName_Name', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='RemoveCollectionFromAdminById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveCollectionFromAdminById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveCollectionFromAdminById_Object', Mandatory=$true)]
        [Alias('DeviceCollectionId','UserCollectionId')]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='RemoveCollectionFromAdminByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveCollectionFromAdminByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveCollectionFromAdminByName_Object', Mandatory=$true)]
        [Alias('DeviceCollectionName','UserCollectionName')]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='RemoveCollectionFromAdminByObject_Id', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveCollectionFromAdminByObject_Name', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveCollectionFromAdminByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeviceCollection','UserCollection','Collection')]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='RemoveCollectionFromAdminById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveCollectionFromAdminByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveCollectionFromAdminByObject_Id', Mandatory=$true)]
        [Alias('AdministrativeUserId')]
        [int]
        ${UserId},

        [Parameter(ParameterSetName='RemoveCollectionFromAdminById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveCollectionFromAdminByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveCollectionFromAdminByObject_Name', Mandatory=$true)]
        [Alias('AdministrativeUserName')]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='RemoveCollectionFromAdminById_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveCollectionFromAdminByName_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveCollectionFromAdminByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('AdministrativeUser')]
        [PSTypeName('IResultObject#SMS_Admin')]
        [System.Object]
        ${User},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Remove-CMDeviceCollectionFromAdministrativeUser Remove-CMUserCollectionFromAdministrativeUser -Value Remove-CMCollectionFromAdministrativeUser Remove-CMCollectionFromAdministrativeUser

function Remove-CMCollectionFromDistributionPointGroup
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('GroupName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DistributionPointGroupName},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('GroupId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DistributionPointGroupId},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true)]
        [Alias('DeviceCollectionName','UserCollectionName')]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeviceCollection','UserCollection')]
        [PSTypeName('IResultObject#SMS_DistributionPointGroup')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Remove-CMDeviceCollectionFromDistributionPointGroup Remove-CMUserCollectionFromDistributionPointGroup -Value Remove-CMCollectionFromDistributionPointGroup Remove-CMCollectionFromDistributionPointGroup

function Remove-CMCollectionMembershipRule
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Medium')]
    param
    (
        [ValidateSet('User','Device')]
        [System.Object]
        ${CollectionType},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Collection')]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [string]
        ${RuleClassName},

        [Parameter(Mandatory=$true)]
        [Alias('SearchCriteria')]
        [System.Object]
        ${ChildSearchCriteria},

        [switch]
        ${Force},

        [Parameter(ValueFromRemainingArguments=$true)]
        [System.Object]
        ${ExtraArguments},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMComplianceRule
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ConfigurationItem')]
        [System.Object]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${RuleName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMComplianceSetting
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ConfigurationItem')]
        [System.Object]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${SettingName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMComputerAssociation
{
    [CmdletBinding(DefaultParameterSetName='SearchByNameMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('RestoreName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DestinationComputer},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('SourceName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SourceComputer},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MigrationId},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_StateMigration')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMConditionalAccessPolicy
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConditionAccessManagement')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Remove-CMOnPremConditionalAccessPolicy -Value Remove-CMConditionalAccessPolicy

function Remove-CMConfigurationItem
{
    [CmdletBinding(DefaultParameterSetName='SearchByIdMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMConfigurationPolicy
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchById', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByName', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string[]]
        ${Name},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Remove-CMAdvancedThreatProtectionPolicy Remove-CMCertificateProfilePfx Remove-CMCertificateProfileScep Remove-CMCertificateProfileTrustedRootCA Remove-CMClientAuthCertificateProfileConfigurationItem Remove-CMClientCertificateProfileConfigurationItem Remove-CMEmailProfile Remove-CMRemoteConnectionProfileConfigurationItem Remove-CMRootCertificateProfileConfigurationItem Remove-CMTrustedRootCertificateProfileConfigurationItem Remove-CMUserDataAndProfileConfigurationItem Remove-CMVpnProfileConfigurationItem Remove-CMWindowsFirewallPolicy Remove-CMWirelessProfile Remove-CMWirelessProfileConfigurationItem -Value Remove-CMConfigurationPolicy Remove-CMConfigurationPolicy Remove-CMConfigurationPolicy Remove-CMConfigurationPolicy Remove-CMConfigurationPolicy Remove-CMConfigurationPolicy Remove-CMConfigurationPolicy Remove-CMConfigurationPolicy Remove-CMConfigurationPolicy Remove-CMConfigurationPolicy Remove-CMConfigurationPolicy Remove-CMConfigurationPolicy Remove-CMConfigurationPolicy Remove-CMConfigurationPolicy Remove-CMConfigurationPolicy

function Remove-CMConfigurationPolicyDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('ConfigurationPolicyName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchBySmsObjectId')]
        [Alias('CI_ID','ConfigurationPolicyID')]
        [int]
        ${SmsObjectId},

        [Parameter(ParameterSetName='SearchByDeploymentId')]
        [Alias('AssignmentUniqueID','ConfigurationPolicyDeploymentID')]
        [string]
        ${DeploymentId},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Assignment','ConfigurationPolicyDeployment','ConfigurationPolicy')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMContentDistribution
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory_Application', ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application','Package','BootImage','DeploymentPackage','SoftwareUpdatePackage','DriverPackage','ImagePackage','OperatingSystemInstaller','TaskSequence')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByIdMandatory_Application', Mandatory=$true)]
        [string[]]
        ${ApplicationId},

        [Parameter(ParameterSetName='SearchByNameMandatory_Application', Mandatory=$true)]
        [string[]]
        ${ApplicationName},

        [Parameter(ParameterSetName='SearchByIdMandatory_BootImage', Mandatory=$true)]
        [Alias('BootImageIds')]
        [string[]]
        ${BootImageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_BootImage', Mandatory=$true)]
        [Alias('BootImageNames')]
        [string[]]
        ${BootImageName},

        [string[]]
        ${CollectionName},

        [Parameter(ParameterSetName='SearchByIdMandatory_DeploymentPackage', Mandatory=$true)]
        [Alias('DeploymentPackageIds')]
        [string[]]
        ${DeploymentPackageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_DeploymentPackage', Mandatory=$true)]
        [Alias('DeploymentPackageNames')]
        [string[]]
        ${DeploymentPackageName},

        [Parameter(ParameterSetName='SearchByIdMandatory_Application')]
        [Parameter(ParameterSetName='SearchByNameMandatory_Application')]
        [Parameter(ParameterSetName='SearchByValueMandatory_Application')]
        [Alias('DisableDetectAssociatedContentDependencies')]
        [switch]
        ${DisableContentDependencyDetection},

        [string[]]
        ${DistributionPointGroupName},

        [string[]]
        ${DistributionPointName},

        [Parameter(ParameterSetName='SearchByIdMandatory_DriverPackage', Mandatory=$true)]
        [Alias('DriverPackageIds')]
        [string[]]
        ${DriverPackageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_DriverPackage', Mandatory=$true)]
        [Alias('DriverPackageNames')]
        [string[]]
        ${DriverPackageName},

        [Parameter(ParameterSetName='SearchByValueMandatory_OperatingSystemImage', Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_ImagePackage')]
        [System.Object]
        ${OperatingSystemImage},

        [Parameter(ParameterSetName='SearchByIdMandatory_OperatingSystemImage', Mandatory=$true)]
        [Alias('OperatingSystemImageIds')]
        [string[]]
        ${OperatingSystemImageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_OperatingSystemImage', Mandatory=$true)]
        [Alias('OperatingSystemImageNames')]
        [string[]]
        ${OperatingSystemImageName},

        [Parameter(ParameterSetName='SearchByIdMandatory_OperatingSystemInstaller', Mandatory=$true)]
        [Alias('OperatingSystemInstallerIds')]
        [string[]]
        ${OperatingSystemInstallerId},

        [Parameter(ParameterSetName='SearchByNameMandatory_OperatingSystemInstaller', Mandatory=$true)]
        [Alias('OperatingSystemImageInstallerNames')]
        [string[]]
        ${OperatingSystemInstallerName},

        [Parameter(ParameterSetName='SearchByIdMandatory_Package', Mandatory=$true)]
        [Alias('PackageIds')]
        [string[]]
        ${PackageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_Package', Mandatory=$true)]
        [Alias('PackageNames')]
        [string[]]
        ${PackageName},

        [Parameter(ParameterSetName='SearchByIdMandatory_TaskSequence', Mandatory=$true)]
        [Alias('TaskSequenceIds')]
        [string[]]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='SearchByNameMandatory_TaskSequence', Mandatory=$true)]
        [Alias('TaskSequenceNames')]
        [string[]]
        ${TaskSequenceName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMCorpOwnedDevice
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Device')]
        [PSTypeName('IResultObject#SMS_MDMCorpOwnedDevices')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('UniqueId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_MDMCorpEnrollmentProfiles')]
        [System.Object]
        ${RequestEnrollmentProfile},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMDataWarehouseServicePoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DataWarehouseServicePoint')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=Data Warehouse Service Point')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentId},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Deployment')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='SearchByInputObjectMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CIId','CI_ID','Id')]
        [ValidateNotNullOrEmpty()]
        [int]
        ${DeploymentTypeId},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName','Name')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentTypeName},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByInputObjectMandatory')]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='SearchByInputObjectMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeploymentType')]
        [PSTypeName('IResultObject#SMS_DeploymentType')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Remove-CMAppleAppStoreDeploymentType Remove-CMAppv5XDeploymentType Remove-CMAppvDeploymentType Remove-CMGooglePlayDeploymentType Remove-CMIosAppStoreDeploymentType Remove-CMIosDeploymentType Remove-CMMacDeploymentType Remove-CMMobileMsiDeploymentType Remove-CMMsiDeploymentType Remove-CMScriptDeploymentType Remove-CMWebApplicationDeploymentType Remove-CMWindowsAppxDeploymentType Remove-CMWindowsPhoneDeploymentType Remove-CMWindowsPhoneStoreDeploymentType Remove-CMWindowsStoreDeploymentType -Value Remove-CMDeploymentType Remove-CMDeploymentType Remove-CMDeploymentType Remove-CMDeploymentType Remove-CMDeploymentType Remove-CMDeploymentType Remove-CMDeploymentType Remove-CMDeploymentType Remove-CMDeploymentType Remove-CMDeploymentType Remove-CMDeploymentType Remove-CMDeploymentType Remove-CMDeploymentType Remove-CMDeploymentType Remove-CMDeploymentType

function Remove-CMDeploymentTypeDependency
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [Parameter(Mandatory=$true)]
        [Alias('DeploymentTypeDependencies')]
        [PSTypeName('IResultObject#SMS_DeploymentType')]
        [System.Object[]]
        ${DeploymentTypeDependency},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Group')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMDeploymentTypeDependencyGroup
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Group')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMDeploymentTypeSupersedence
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true, Position=0)]
        [PSTypeName('IResultObject#SMS_DeploymentType')]
        [System.Object]
        ${SupersedingDeploymentType},

        [switch]
        ${Force},

        [Parameter(Mandatory=$true, Position=1)]
        [PSTypeName('IResultObject#SMS_DeploymentType')]
        [System.Object]
        ${SupersededDeploymentType},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMDevice
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('DeviceName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('Id','DeviceId')]
        [ValidateNotNullOrEmpty()]
        [int]
        ${ResourceId},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMDeviceAffinityFromUser
{
    [CmdletBinding(DefaultParameterSetName='RemoveDeviceAffinityByUserName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='RemoveDeviceAffinityByUserName', Mandatory=$true)]
        [Alias('UniqueUserName')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${UserName},

        [Parameter(ParameterSetName='RemoveDeviceAffinityByUserId', Mandatory=$true)]
        [int]
        ${UserId},

        [Parameter(ParameterSetName='RemoveDeviceAffinityByUserId')]
        [Parameter(ParameterSetName='RemoveDeviceAffinityByUserName')]
        [Alias('DeviceIds')]
        [ValidateNotNullOrEmpty()]
        [int[]]
        ${DeviceId},

        [Parameter(ParameterSetName='RemoveDeviceAffinityByUserId')]
        [Parameter(ParameterSetName='RemoveDeviceAffinityByUserName')]
        [Alias('DeviceNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${DeviceName},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMDeviceCategory
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CategoryId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_MDMDeviceCategory')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMDeviceCollectionVariable
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${Collection},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${VariableName},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMDeviceVariable
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('InputObject')]
        [System.Object]
        ${Device},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${ResourceId},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${DeviceName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${VariableName},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMDistributionPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DistributionPoint')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Distribution Point')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMDistributionPointFromGroup
{
    [CmdletBinding(DefaultParameterSetName='RemoveDistributionPointFromGroupByObject_Object', ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [Parameter(ParameterSetName='RemoveDistributionPointFromGroupById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveDistributionPointFromGroupById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveDistributionPointFromGroupById_Object', Mandatory=$true)]
        [string]
        ${DistributionPointId},

        [Parameter(ParameterSetName='RemoveDistributionPointFromGroupByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveDistributionPointFromGroupByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveDistributionPointFromGroupByName_Object', Mandatory=$true)]
        [string]
        ${DistributionPointName},

        [Parameter(ParameterSetName='RemoveDistributionPointFromGroupByObject_Id', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveDistributionPointFromGroupByObject_Name', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveDistributionPointFromGroupByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${DistributionPoint},

        [Parameter(ParameterSetName='RemoveDistributionPointFromGroupById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveDistributionPointFromGroupByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveDistributionPointFromGroupByObject_Id', Mandatory=$true)]
        [string]
        ${DistributionPointGroupId},

        [Parameter(ParameterSetName='RemoveDistributionPointFromGroupById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveDistributionPointFromGroupByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveDistributionPointFromGroupByObject_Name', Mandatory=$true)]
        [string]
        ${DistributionPointGroupName},

        [Parameter(ParameterSetName='RemoveDistributionPointFromGroupById_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveDistributionPointFromGroupByName_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveDistributionPointFromGroupByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_DistributionPointGroup')]
        [System.Object]
        ${DistributionPointGroup},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMDistributionPointGroup
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('GroupId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_DistributionPointGroup')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMDriver
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Driver')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMDriverFromDriverPackage
{
    [CmdletBinding(DefaultParameterSetName='RemoveDriverFromDriverPackageById_Id', ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [Parameter(ParameterSetName='RemoveDriverFromDriverPackageById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveDriverFromDriverPackageById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveDriverFromDriverPackageById_Object', Mandatory=$true)]
        [Alias('CIId','Id','CI_ID')]
        [int]
        ${DriverId},

        [Parameter(ParameterSetName='RemoveDriverFromDriverPackageByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveDriverFromDriverPackageByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveDriverFromDriverPackageByName_Object', Mandatory=$true)]
        [string]
        ${DriverName},

        [Parameter(ParameterSetName='RemoveDriverFromDriverPackageByObject_Id', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveDriverFromDriverPackageByObject_Name', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveDriverFromDriverPackageByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Driver')]
        [System.Object]
        ${Driver},

        [Parameter(ParameterSetName='RemoveDriverFromDriverPackageById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveDriverFromDriverPackageByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveDriverFromDriverPackageByObject_Id', Mandatory=$true)]
        [string]
        ${DriverPackageId},

        [Parameter(ParameterSetName='RemoveDriverFromDriverPackageById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveDriverFromDriverPackageByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveDriverFromDriverPackageByObject_Name', Mandatory=$true)]
        [string]
        ${DriverPackageName},

        [Parameter(ParameterSetName='RemoveDriverFromDriverPackageById_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveDriverFromDriverPackageByName_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveDriverFromDriverPackageByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_DriverPackage')]
        [System.Object]
        ${DriverPackage},

        [Alias('UpdateDistributionPoint','UpdateDistributionPointForDriverPackage','UpdateDistributionPointsForDriverPackage')]
        [bool]
        ${UpdateDistributionPoints},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMDriverPackage
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [string[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_DriverPackage')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMEndpointProtectionPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('EndpointProtectionPoint')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Endpoint Protection Point')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMEnrollmentPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('EnrollmentPoint')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Enrollment Server')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMEnrollmentProxyPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('EnrollmentProxyPoint')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Enrollment Web Site')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMExchangeServer
{
    [CmdletBinding(DefaultParameterSetName='SearchBySiteCodeMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory', Mandatory=$true)]
        [Alias('Address','ServerAddress')]
        [string]
        ${ExchangeServerUrl},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMFallbackStatusPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('FallbackStatusPoint')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Fallback Status Point')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMFileReplicationRoute
{
    [CmdletBinding(DefaultParameterSetName='SearchBySiteCodeMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory', Mandatory=$true)]
        [Alias('SiteCode')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SourceSiteCode},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory', Mandatory=$true)]
        [Alias('DesSiteCode')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DestinationSiteCode},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMGlobalCondition
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CIId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_GlobalCondition')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMHardwareRequirement
{
    [CmdletBinding(DefaultParameterSetName='SearchByNameMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Product},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_AIHardwareRequirements')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMIntuneSubscription
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMIosEnrollmentProfile
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Profile')]
        [PSTypeName('IResultObject#SMS_MDMCorpEnrollmentProfiles')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('ProfileId')]
        [string]
        ${Id},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMMaintenanceWindow
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByCollectionId', Mandatory=$true, Position=0)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Collection','Site')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByCollectionName', Mandatory=$true, Position=0)]
        [string]
        ${CollectionName},

        [Parameter(Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${MaintenanceWindowName},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMManagementPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ManagementPoint')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Management Point')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMMdmEnrollmentManager
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('Ids')]
        [int[]]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('User','EnrollmentManager','Users','EnrollmentManagers')]
        [System.Object[]]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Remove-CMIntuneDeviceEnrollmentManager -Value Remove-CMMdmEnrollmentManager

function Remove-CMMulticastServicePoint
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [switch]
        ${RemoveWds},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('MulticastServicePoint')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Multicast Service Point')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMObjectSecurityScope
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('SecurityScopeId')]
        [string]
        ${Id},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object[]]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [Alias('SecurityScopeName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0)]
        [Alias('SecurityScope','SecuredCategory','Scopes','SecurityScopes','SecuredCategories')]
        [PSTypeName('IResultObject#SMS_SecuredCategory')]
        [System.Object[]]
        ${Scope},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMOperatingSystemImage
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ImagePackage')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMOperatingSystemInstaller
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_OperatingSystemInstallPackage')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Remove-CMOperatingSystemUpgradePackage -Value Remove-CMOperatingSystemInstaller

function Remove-CMPackage
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMPackageDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('PackageName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ProgramName},

        [Parameter(ParameterSetName='SearchById')]
        [Alias('Id')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='SearchByDeploymentId')]
        [Alias('AdvertisementID','PackageDeploymentID')]
        [string]
        ${DeploymentId},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Advertisement','PackageDeployment','Package')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMProgram
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdAndNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='SearchByIdAndNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ProgramName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Program')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMQuery
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('QueryId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Query')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMReportingServicePoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ReportingServicePoint')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS SRS Reporting Point')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMResource
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Resource')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ById', Mandatory=$true, Position=0)]
        [int]
        ${ResourceId},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Remove-CMCollectionMember -Value Remove-CMResource

function Remove-CMScript
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Script')]
        [PSTypeName('IResultObject#SMS_Scripts')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${ScriptName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMSecondarySite
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('SiteName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Site')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${Action},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMSecurityRole
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('RoleName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('RoleId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Role')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMSecurityRoleFromAdministrativeUser
{
    [CmdletBinding(DefaultParameterSetName='RemoveRoleFromAdminByName_Name', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='RemoveRoleFromAdminById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveRoleFromAdminById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveRoleFromAdminById_Object', Mandatory=$true)]
        [string]
        ${RoleId},

        [Parameter(ParameterSetName='RemoveRoleFromAdminByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveRoleFromAdminByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveRoleFromAdminByName_Object', Mandatory=$true)]
        [string]
        ${RoleName},

        [Parameter(ParameterSetName='RemoveRoleFromAdminByObject_Id', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveRoleFromAdminByObject_Name', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveRoleFromAdminByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Role')]
        [System.Object]
        ${Role},

        [Parameter(ParameterSetName='RemoveRoleFromAdminById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveRoleFromAdminByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveRoleFromAdminByObject_Id', Mandatory=$true)]
        [int]
        ${AdministrativeUserId},

        [Parameter(ParameterSetName='RemoveRoleFromAdminById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveRoleFromAdminByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveRoleFromAdminByObject_Name', Mandatory=$true)]
        [string]
        ${AdministrativeUserName},

        [Parameter(ParameterSetName='RemoveRoleFromAdminById_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveRoleFromAdminByName_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveRoleFromAdminByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Admin')]
        [System.Object]
        ${AdministrativeUser},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMSecurityScope
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('CategoryName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CategoryId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SecuredCategory')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMSecurityScopeFromAdministrativeUser
{
    [CmdletBinding(DefaultParameterSetName='RemoveScopeFromAdminByName_Name', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='RemoveScopeFromAdminById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveScopeFromAdminById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveScopeFromAdminById_Object', Mandatory=$true)]
        [string]
        ${SecurityScopeId},

        [Parameter(ParameterSetName='RemoveScopeFromAdminByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveScopeFromAdminByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveScopeFromAdminByName_Object', Mandatory=$true)]
        [string]
        ${SecurityScopeName},

        [Parameter(ParameterSetName='RemoveScopeFromAdminByObject_Id', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveScopeFromAdminByObject_Name', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveScopeFromAdminByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SecuredCategory')]
        [System.Object]
        ${SecurityScope},

        [Parameter(ParameterSetName='RemoveScopeFromAdminById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveScopeFromAdminByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveScopeFromAdminByObject_Id', Mandatory=$true)]
        [int]
        ${AdministrativeUserId},

        [Parameter(ParameterSetName='RemoveScopeFromAdminById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveScopeFromAdminByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='RemoveScopeFromAdminByObject_Name', Mandatory=$true)]
        [string]
        ${AdministrativeUserName},

        [Parameter(ParameterSetName='RemoveScopeFromAdminById_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveScopeFromAdminByName_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='RemoveScopeFromAdminByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Admin')]
        [System.Object]
        ${AdministrativeUser},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMServiceConnectionPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ReportingServicePoint')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Dmp Connector')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMSiteRole
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${RoleName},

        [Parameter(ParameterSetName='ByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Role')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMSiteSystemServer
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SiteSystem','SiteSystemServer')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMSoftwareMeteringRule
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('RuleId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ProductName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_MeteredProductRule')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMSoftwareUpdateAutoDeploymentRule
{
    [CmdletBinding(DefaultParameterSetName='SearchByIdMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('AutoDeploymentId')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AutoDeployment')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Remove-CMAutoDeploymentRule Remove-CMWindowsServicingPlan -Value Remove-CMSoftwareUpdateAutoDeploymentRule Remove-CMSoftwareUpdateAutoDeploymentRule

function Remove-CMSoftwareUpdateDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('SoftwareUpdateName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchBySmsObjectId')]
        [Alias('CI_ID','SoftwareUpdateID')]
        [int]
        ${SmsObjectId},

        [Parameter(ParameterSetName='SearchByDeploymentId')]
        [Alias('AssignmentUniqueID','SoftwareUpdateDeploymentID')]
        [string]
        ${DeploymentId},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Assignment','SoftwareUpdateDeployment','SoftwareUpdate')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMSoftwareUpdateDeploymentPackage
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SoftwareUpdatesPackage')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMSoftwareUpdateFromGroup
{
    [CmdletBinding(DefaultParameterSetName='ById_Id', ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [Parameter(ParameterSetName='ById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='ById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='ById_Object', Mandatory=$true)]
        [Alias('SoftwareUpdateIds')]
        [string[]]
        ${SoftwareUpdateId},

        [Parameter(ParameterSetName='ByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='ByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='ByName_Object', Mandatory=$true)]
        [Alias('SoftwareUpdateNames')]
        [string[]]
        ${SoftwareUpdateName},

        [Parameter(ParameterSetName='ByObject_Id', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByObject_Name', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SoftwareUpdates')]
        [PSTypeName('IResultObject#SMS_SoftwareUpdate')]
        [System.Object[]]
        ${SoftwareUpdate},

        [Parameter(ParameterSetName='ById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='ByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='ByObject_Id', Mandatory=$true)]
        [string]
        ${SoftwareUpdateGroupId},

        [Parameter(ParameterSetName='ById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='ByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='ByObject_Name', Mandatory=$true)]
        [string]
        ${SoftwareUpdateGroupName},

        [Parameter(ParameterSetName='ById_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByName_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AuthorizationList')]
        [System.Object]
        ${SoftwareUpdateGroup},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMSoftwareUpdateGroup
{
    [CmdletBinding(DefaultParameterSetName='SearchByIdMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CIId')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_AuthorizationList')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMSoftwareUpdatePoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SoftwareUpdatePoint')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Software Update Point')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMStateMigrationPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('StateMigrationPoint')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS State Migration Point')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMStatusFilterRule
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SCPropertyList')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMStatusMessageQuery
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('QueryId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Query')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMTaskSequence
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [string]
        ${TaskSequencePackageId},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMTaskSequenceDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('TaskSequenceName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchById')]
        [Alias('Id','TaskSequencePackageId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='SearchByDeploymentId')]
        [Alias('AdvertisementID','TaskSequenceDeploymentID')]
        [string]
        ${DeploymentId},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Advertisement','TaskSequenceDeployment','TaskSequence')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMTaskSequenceGroup
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${Force},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMTaskSequenceStep
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [string]
        ${ActionClassName},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMUpdateGroupDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByName')]
        [Alias('UpdateGroupName','SoftwareUpdateGroupName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchBySmsObjectId')]
        [Alias('CI_ID','UpdateGroupID','SoftwareUpdateGroupID')]
        [int]
        ${SmsObjectId},

        [Parameter(ParameterSetName='SearchByDeploymentId')]
        [Alias('AssignmentUniqueID','UpdateGroupDeploymentID')]
        [string]
        ${DeploymentId},

        [Parameter(ParameterSetName='SearchByName')]
        [Alias('UpdateGroupDeploymentName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentName},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Assignment','UpdateGroupDeployment','UpdateGroup','SoftwareUpdateGroup')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMUser
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('UserName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('Id','UserId')]
        [int]
        ${ResourceId},

        [switch]
        ${Force},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMUserAffinityFromDevice
{
    [CmdletBinding(DefaultParameterSetName='RemoveUserAffinityByDeviceName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='RemoveUserAffinityByDeviceName', Mandatory=$true)]
        [Alias('ResourceName')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${DeviceName},

        [Parameter(ParameterSetName='RemoveUserAffinityByDeviceId', Mandatory=$true)]
        [Alias('ResourceId')]
        [ValidateNotNullOrEmpty()]
        [int[]]
        ${DeviceId},

        [Parameter(ParameterSetName='RemoveUserAffinityByDeviceId')]
        [Parameter(ParameterSetName='RemoveUserAffinityByDeviceName')]
        [Alias('UserIds')]
        [ValidateNotNullOrEmpty()]
        [int[]]
        ${UserId},

        [Parameter(ParameterSetName='RemoveUserAffinityByDeviceId')]
        [Parameter(ParameterSetName='RemoveUserAffinityByDeviceName')]
        [Alias('UserNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${UserName},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMVhd
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('PackageId')]
        [string[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_VhdPackage')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMWindowsEnrollmentProfile
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Profile')]
        [PSTypeName('IResultObject#SMS_MDMBulkEnrollmentProfiles')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [string]
        ${Name},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Remove-CMWindowsEnrollmentProfilePackage
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Profile','Package')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByProfileName')]
        [string]
        ${ProfileName},

        [Parameter(ParameterSetName='ByProfileName', Mandatory=$true)]
        [string]
        ${PackageName},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Rename-CMCategory
{
    [CmdletBinding(DefaultParameterSetName='RenameCategoryByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='RenameCategoryByName', Mandatory=$true)]
        [Alias('LocalizedCategoryInstanceName','CategoryName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='RenameCategoryByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Category')]
        [PSTypeName('IResultObject#SMS_CategoryInstance')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='RenameCategoryByName', Mandatory=$true)]
        [ValidateSet('AppCategories','BaselineCategories','CatalogCategories','DriverCategories','UserCategories')]
        [System.Object]
        ${CategoryType},

        [Parameter(Mandatory=$true)]
        [string]
        ${NewName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Resolve-CMInventoriedSoftwareConflict
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('SoftwareKey')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [bool]
        ${RevertLocalEdit},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Restore-CMApplicationRevisionHistory
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchBySingleNameMandatory', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchBySingleIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [uint32]
        ${Id},

        [Parameter(Mandatory=$true, Position=1)]
        [uint32]
        ${Revision},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Resume-CMApplication
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Save-CMDatabaseReplicationDiagnostic
{
    [CmdletBinding(DefaultParameterSetName='SearchBySiteMandatory', ConfirmImpact='Low')]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteMandatory')]
        [Alias('Site1','ParentSiteCode')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchBySiteMandatory', Mandatory=$true)]
        [Alias('Site2')]
        [string]
        ${ChildSiteCode},

        [Parameter(ParameterSetName='SearchBySiteMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Save-CMEndpointProtectionDefinition
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceName},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Alias('ResourceID')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceId},

        [Parameter(ParameterSetName='SearchByNameMandatory', ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory', ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory', ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_CombinedDeviceResources')]
        [System.Object]
        ${Device},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${DeviceCollectionName},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${DeviceCollectionId},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${DeviceCollection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Invoke-CMEndpointProtectionDefinitionDownload -Value Save-CMEndpointProtectionDefinition

function Save-CMSoftwareUpdate
{
    [CmdletBinding(DefaultParameterSetName='SearchByNameMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${SoftwareUpdateId},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${SoftwareUpdateName},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SoftwareUpdate')]
        [System.Object]
        ${SoftwareUpdate},

        [Parameter(ParameterSetName='SearchByIdMandatory_UpdateGroup', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${SoftwareUpdateGroupId},

        [Parameter(ParameterSetName='SearchByNameMandatory_UpdateGroup', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${SoftwareUpdateGroupName},

        [Parameter(ParameterSetName='SearchByValueMandatory_UpdateGroup', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AuthorizationList')]
        [System.Object]
        ${SoftwareUpdateGroup},

        [Parameter(ParameterSetName='SearchByIdMandatory_UpdateGroup')]
        [Parameter(ParameterSetName='SearchByNameMandatory_UpdateGroup')]
        [Parameter(ParameterSetName='SearchByValueMandatory_UpdateGroup')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Location},

        [Parameter(ParameterSetName='SearchByIdMandatory_UpdateGroup', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory_UpdateGroup', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory_UpdateGroup', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentPackageName},

        [Parameter(ParameterSetName='SearchByIdMandatory_UpdateGroup')]
        [Parameter(ParameterSetName='SearchByNameMandatory_UpdateGroup')]
        [Parameter(ParameterSetName='SearchByValueMandatory_UpdateGroup')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${SoftwareUpdateLanguage},

        [uint32]
        ${RetryCount},

        [uint32]
        ${RetryDelaySec},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Invoke-CMSoftwareUpdateDownload -Value Save-CMSoftwareUpdate

function Send-CMAssetIntelligenceCatalogUpdateRequest
{
    [CmdletBinding(DefaultParameterSetName='SearchByNameMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('CommonName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('SoftwareKey')]
        [string]
        ${Id},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMAadConditionalAccessPolicy
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [ValidateSet('NativeApps','BrowsersAndNativeApps')]
        [System.Object]
        ${ClientType},

        [Alias('TargetedDevicePlatforms')]
        [ValidateSet('Ios','Android','WindowsPhone','Windows','EasSupported','EasUnsupported','All')]
        [System.Object[]]
        ${TargetedDevicePlatform},

        [ValidateSet('CompliantOrDomainJoined','DomainJoined','Compliant')]
        [System.Object]
        ${WindowsDeviceState},

        [Parameter(Mandatory=$true)]
        [bool]
        ${Enabled},

        [Alias('ExcludedSecurityGroups')]
        [string[]]
        ${ExcludedSecurityGroup},

        [Parameter(Mandatory=$true)]
        [Alias('IncludedSecurityGroups')]
        [string[]]
        ${IncludedSecurityGroup},

        [switch]
        ${PassThru},

        [Parameter(Mandatory=$true)]
        [ValidateSet('ExchangeOnline','SharepointOnline','SkypeForBusiness','CrmOnline')]
        [System.Object]
        ${ServicePrincipalType},

        [ValidateNotNullOrEmpty()]
        [string]
        ${AccountId},

        [ValidateNotNullOrEmpty()]
        [string]
        ${AuthorityId},

        [ValidateNotNullOrEmpty()]
        [string]
        ${IntuneClientId},

        [ValidateNotNullOrEmpty()]
        [string]
        ${IntuneResourceId},

        [Alias('Credentials','Credential')]
        [pscredential]
        ${UserCredential},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMAccessAccount
{
    [CmdletBinding(DefaultParameterSetName='SearchByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByApplicationName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='SearchByApplicationId', Mandatory=$true)]
        [string]
        ${ApplicationId},

        [Parameter(ParameterSetName='SearchByBootImageName', Mandatory=$true)]
        [string]
        ${BootImageName},

        [Parameter(ParameterSetName='SearchByBootImageId', Mandatory=$true)]
        [string]
        ${BootImageId},

        [Parameter(ParameterSetName='SearchByDriverPackageName', Mandatory=$true)]
        [string]
        ${DriverPackageName},

        [Parameter(ParameterSetName='SearchByDriverPackageId', Mandatory=$true)]
        [string]
        ${DriverPackageId},

        [Parameter(ParameterSetName='SearchByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('DriverPackage','Application','OperatingSystemImage','OperatingSystemInstaller','Package','SoftwareUpdateDeploymentPackage','BootImage')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByOSImageName', Mandatory=$true)]
        [string]
        ${OperatingSystemImageName},

        [Parameter(ParameterSetName='SearchByOSImageId', Mandatory=$true)]
        [string]
        ${OperatingSystemImageId},

        [Parameter(ParameterSetName='SearchByOSInstallerName', Mandatory=$true)]
        [string]
        ${OperatingSystemInstallerName},

        [Parameter(ParameterSetName='SearchByOSInstallerId', Mandatory=$true)]
        [string]
        ${OperatingSystemInstallerId},

        [Parameter(ParameterSetName='SearchByPackageName', Mandatory=$true)]
        [string]
        ${PackageName},

        [Parameter(ParameterSetName='SearchByPackageId', Mandatory=$true)]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='SearchBySoftwareUpdateDeploymentPackageName', Mandatory=$true)]
        [string]
        ${SoftwareUpdateDeploymentPackageName},

        [Parameter(ParameterSetName='SearchBySoftwareUpdateDeploymentPackageId', Mandatory=$true)]
        [string]
        ${SoftwareUpdateDeploymentPackageId},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${AccountType},

        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [Parameter(Mandatory=$true)]
        [System.Object]
        ${Access},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMAccount
{
    [CmdletBinding(DefaultParameterSetName='SetAccountByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetAccountByName')]
        [Parameter(ParameterSetName='SetAccountByObject')]
        [ValidateNotNullOrEmpty()]
        [securestring]
        ${Password},

        [Parameter(ParameterSetName='SetAccountByName', Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='SetAccountByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SetAccountByObject', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Account')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_Reserved')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMActiveDirectoryForest
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByFQDN', Mandatory=$true)]
        [string]
        ${ForestFqdn},

        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('ForestId')]
        [uint32]
        ${Id},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ADForest')]
        [System.Object]
        ${InputObject},

        [string]
        ${Description},

        [bool]
        ${EnableDiscovery},

        [string]
        ${UserName},

        [securestring]
        ${Password},

        [string]
        ${PublishingPath},

        [Alias('AddPublishingSites')]
        [PSTypeName('IResultObject#SMS_SCI_SiteDefinition')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${AddPublishingSite},

        [Alias('RemovePublishingSites')]
        [PSTypeName('IResultObject#SMS_SCI_SiteDefinition')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${RemovePublishingSite},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMAdvancedThreatProtectionPolicy
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true, Position=0)]
        [Parameter(ParameterSetName='SetOrderById', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Parameter(ParameterSetName='SetOrderByName', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetOrderByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_AdvancedThreatProtectionSettings')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetOrderById', Mandatory=$true)]
        [Parameter(ParameterSetName='SetOrderByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetOrderByValue', Mandatory=$true)]
        [ValidateSet('Increase','Decrease')]
        [System.Object]
        ${Order},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [Alias('LocalizedDescription')]
        [ValidateLength(0, 512)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='SetById', ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetByName', ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetByValue', ValueFromPipeline=$true)]
        [ValidateNotNull()]
        [System.Object]
        ${Digest},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [Alias('DesiredConfigurationDigestPath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DigestPath},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DigestXml},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 255)]
        [string]
        ${NewName},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [Alias('ConfigurationFileLocation')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateSet('None','All')]
        [System.Object]
        ${SampleSharingType},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateSet('Normal','Expedited')]
        [System.Object]
        ${TelemetryReportingFrequencyType},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMAlert
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Alert')]
        [PSTypeName('IResultObject#SMS_AlertBase')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [System.Object]
        ${Severity},

        [Alias('ParameterValues')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ParameterValue},

        [Alias('Comments')]
        [string]
        ${Comment},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMAlertSubscription
{
    [CmdletBinding(DefaultParameterSetName='SetByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Subscription')]
        [System.Object]
        ${InputObject},

        [string]
        ${NewName},

        [Alias('AlertIds')]
        [ValidateNotNullOrEmpty()]
        [int[]]
        ${AlertId},

        [Alias('EmailAddresses')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${EmailAddress},

        [Alias('AddEmailAddresses')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddEmailAddress},

        [Alias('RemoveEmailAddresses')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveEmailAddress},

        [int]
        ${LocaleId},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMAndroidDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [string]
        ${DeploymentTypeName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [System.Object]
        ${Application},

        [Parameter(ParameterSetName='ByDTValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeploymentType')]
        [System.Object]
        ${InputObject},

        [Alias('NewDeploymentTypeName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ContentLocation},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [switch]
        ${PassThru},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMApkDeploymentType -Value Set-CMAndroidDeploymentType

function Set-CMAntimalwarePolicy
{
    [CmdletBinding(DefaultParameterSetName='SetByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetScheduledScanSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetScanSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDefaultActionSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetAdvancedSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetMAPSSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetExclusionSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetThreatOverridesSettingsByName', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [string]
        ${Description},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [System.Object]
        ${Priority},

        [Parameter(ParameterSetName='SetScheduledScanSettingsByName')]
        [Parameter(ParameterSetName='SetScheduledScanSettingsByValue')]
        [bool]
        ${EnableScheduledScan},

        [Parameter(ParameterSetName='SetScheduledScanSettingsByName')]
        [Parameter(ParameterSetName='SetScheduledScanSettingsByValue')]
        [System.Object]
        ${ScheduledScanType},

        [Parameter(ParameterSetName='SetScheduledScanSettingsByName')]
        [Parameter(ParameterSetName='SetScheduledScanSettingsByValue')]
        [System.Object]
        ${ScheduledScanWeekday},

        [Parameter(ParameterSetName='SetScheduledScanSettingsByName')]
        [Parameter(ParameterSetName='SetScheduledScanSettingsByValue')]
        [datetime]
        ${ScheduledScanTime},

        [Parameter(ParameterSetName='SetScheduledScanSettingsByName')]
        [Parameter(ParameterSetName='SetScheduledScanSettingsByValue')]
        [Alias('EnableQuickDailyScan')]
        [bool]
        ${EnableQuickScan},

        [Parameter(ParameterSetName='SetScheduledScanSettingsByName')]
        [Parameter(ParameterSetName='SetScheduledScanSettingsByValue')]
        [Alias('ScheduledScanQuickTime')]
        [datetime]
        ${QuickScanTime},

        [Parameter(ParameterSetName='SetScheduledScanSettingsByName')]
        [Parameter(ParameterSetName='SetScheduledScanSettingsByValue')]
        [bool]
        ${CheckLatestDefinition},

        [Parameter(ParameterSetName='SetScheduledScanSettingsByName')]
        [Parameter(ParameterSetName='SetScheduledScanSettingsByValue')]
        [bool]
        ${ScanWhenClientNotInUse},

        [Parameter(ParameterSetName='SetScheduledScanSettingsByName')]
        [Parameter(ParameterSetName='SetScheduledScanSettingsByValue')]
        [bool]
        ${EnableCatchupScan},

        [Parameter(ParameterSetName='SetScheduledScanSettingsByName')]
        [Parameter(ParameterSetName='SetScheduledScanSettingsByValue')]
        [ValidateSet('0','10','20','30','40','50','60','70','80','90')]
        [int]
        ${LimitCpuUsage},

        [Parameter(ParameterSetName='SetScanSettingsByName')]
        [Parameter(ParameterSetName='SetScanSettingsByValue')]
        [bool]
        ${ScanEmail},

        [Parameter(ParameterSetName='SetScanSettingsByName')]
        [Parameter(ParameterSetName='SetScanSettingsByValue')]
        [bool]
        ${ScanRemovableStorage},

        [Parameter(ParameterSetName='SetScanSettingsByName')]
        [Parameter(ParameterSetName='SetScanSettingsByValue')]
        [Alias('FullScanNetworkDrives')]
        [bool]
        ${FullScanNetworkDrive},

        [Parameter(ParameterSetName='SetScanSettingsByName')]
        [Parameter(ParameterSetName='SetScanSettingsByValue')]
        [Alias('ScanNetworkDrives')]
        [bool]
        ${ScanNetworkDrive},

        [Parameter(ParameterSetName='SetScanSettingsByName')]
        [Parameter(ParameterSetName='SetScanSettingsByValue')]
        [Alias('ScanArchivedFiles')]
        [bool]
        ${ScanArchive},

        [Parameter(ParameterSetName='SetScanSettingsByName')]
        [Parameter(ParameterSetName='SetScanSettingsByValue')]
        [bool]
        ${AllowClientUserConfigLimitCpuUsage},

        [Parameter(ParameterSetName='SetScanSettingsByName')]
        [Parameter(ParameterSetName='SetScanSettingsByValue')]
        [System.Object]
        ${ScheduledScanUserControl},

        [Parameter(ParameterSetName='SetDefaultActionSettingsByName')]
        [Parameter(ParameterSetName='SetDefaultActionSettingsByValue')]
        [System.Object]
        ${DefaultActionSevere},

        [Parameter(ParameterSetName='SetDefaultActionSettingsByName')]
        [Parameter(ParameterSetName='SetDefaultActionSettingsByValue')]
        [System.Object]
        ${DefaultActionHigh},

        [Parameter(ParameterSetName='SetDefaultActionSettingsByName')]
        [Parameter(ParameterSetName='SetDefaultActionSettingsByValue')]
        [System.Object]
        ${DefaultActionMedium},

        [Parameter(ParameterSetName='SetDefaultActionSettingsByName')]
        [Parameter(ParameterSetName='SetDefaultActionSettingsByValue')]
        [System.Object]
        ${DefaultActionLow},

        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByName')]
        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByValue')]
        [bool]
        ${RealTimeProtectionOn},

        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByName')]
        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByValue')]
        [bool]
        ${MonitorFileProgramActivity},

        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByName')]
        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByValue')]
        [System.Object]
        ${RealTimeScanOption},

        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByName')]
        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByValue')]
        [bool]
        ${EnableScriptScanning},

        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByName')]
        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByValue')]
        [bool]
        ${EnablePuaProtection},

        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByName')]
        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByValue')]
        [bool]
        ${ScanAllDownloaded},

        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByName')]
        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByValue')]
        [bool]
        ${UseBehaviorMonitor},

        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByName')]
        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByValue')]
        [Alias('NetworkProtectionAgainstExploits')]
        [bool]
        ${NetworkExploitProtection},

        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByName')]
        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByValue')]
        [bool]
        ${AllowClientUserConfigRealTime},

        [Parameter(ParameterSetName='SetAdvancedSettingsByName')]
        [Parameter(ParameterSetName='SetAdvancedSettingsByValue')]
        [bool]
        ${CreateSystemRestorePointBeforeClean},

        [Parameter(ParameterSetName='SetAdvancedSettingsByName')]
        [Parameter(ParameterSetName='SetAdvancedSettingsByValue')]
        [bool]
        ${EnableAutoSampleSubmission},

        [Parameter(ParameterSetName='SetAdvancedSettingsByName')]
        [Parameter(ParameterSetName='SetAdvancedSettingsByValue')]
        [bool]
        ${AllowClientUserConfigSampleSubmission},

        [Parameter(ParameterSetName='SetAdvancedSettingsByName')]
        [Parameter(ParameterSetName='SetAdvancedSettingsByValue')]
        [bool]
        ${DisableClientUI},

        [Parameter(ParameterSetName='SetAdvancedSettingsByName')]
        [Parameter(ParameterSetName='SetAdvancedSettingsByValue')]
        [Alias('ShowNotificationMessages')]
        [bool]
        ${ShowNotification},

        [Parameter(ParameterSetName='SetAdvancedSettingsByName')]
        [Parameter(ParameterSetName='SetAdvancedSettingsByValue')]
        [Alias('DeleteQuarantinedFilesPeriod')]
        [ValidateRange(0, 10000000)]
        [int]
        ${DeleteQuarantineFileDays},

        [Parameter(ParameterSetName='SetAdvancedSettingsByName')]
        [Parameter(ParameterSetName='SetAdvancedSettingsByValue')]
        [Alias('AllowUserConfigQuarantinedFileDeletionPeriod')]
        [bool]
        ${AllowDeleteQuarantineFileDaysModification},

        [Parameter(ParameterSetName='SetAdvancedSettingsByName')]
        [Parameter(ParameterSetName='SetAdvancedSettingsByValue')]
        [Alias('AllowUserAddExcludes')]
        [bool]
        ${AllowExclusionModification},

        [Parameter(ParameterSetName='SetAdvancedSettingsByName')]
        [Parameter(ParameterSetName='SetAdvancedSettingsByValue')]
        [bool]
        ${AllowUserViewHistory},

        [Parameter(ParameterSetName='SetAdvancedSettingsByName')]
        [Parameter(ParameterSetName='SetAdvancedSettingsByValue')]
        [bool]
        ${EnableReparsePointScanning},

        [Parameter(ParameterSetName='SetAdvancedSettingsByName')]
        [Parameter(ParameterSetName='SetAdvancedSettingsByValue')]
        [bool]
        ${RandomizeScheduledScanStartTime},

        [Parameter(ParameterSetName='SetMAPSSettingsByName')]
        [Parameter(ParameterSetName='SetMAPSSettingsByValue')]
        [System.Object]
        ${JoinSpyNet},

        [Parameter(ParameterSetName='SetMAPSSettingsByName')]
        [Parameter(ParameterSetName='SetMAPSSettingsByValue')]
        [Alias('AllowUserChangeSpyNetSettings')]
        [bool]
        ${AllowMapsModification},

        [Parameter(ParameterSetName='SetMAPSSettingsByName')]
        [Parameter(ParameterSetName='SetMAPSSettingsByValue')]
        [System.Object]
        ${CloudBlockLevel},

        [Parameter(ParameterSetName='SetMAPSSettingsByName')]
        [Parameter(ParameterSetName='SetMAPSSettingsByValue')]
        [int]
        ${ExtendedCloudCheckSec},

        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByName')]
        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByValue')]
        [Alias('SignatureUpdateInterval','SignatureUpdateIntervalHour')]
        [ValidateRange(0, 24)]
        [int]
        ${SignatureUpdateHr},

        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByName')]
        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByValue')]
        [datetime]
        ${SignatureUpdateTime},

        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByName')]
        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByValue')]
        [Alias('EnableSignatureUpdateCatchupInterval')]
        [bool]
        ${EnableSignatureUpdateCatchup},

        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByName')]
        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByValue')]
        [System.Object[]]
        ${FallbackOrder},

        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByName')]
        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByValue')]
        [Alias('AuGracePeriod','FallbackToAlternateSourceHour')]
        [ValidateRange(0, 720)]
        [int]
        ${FallbackToAlternateSourceHr},

        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByName')]
        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByValue')]
        [Alias('DefinitionUpdateFileSharesSources','DefinitionUpdateFileShares')]
        [string[]]
        ${DefinitionUpdateFileShare},

        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByName')]
        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByValue')]
        [switch]
        ${CleanDefinitionUpdateFileShare},

        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByName')]
        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByValue')]
        [Alias('AddDefinitionUpdateFileSharesSources','AddDefinitionUpdateFileShares')]
        [string[]]
        ${AddDefinitionUpdateFileShare},

        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByName')]
        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByValue')]
        [Alias('RemoveDefinitionUpdateFileSharesSources','RemoveDefinitionUpdateFileShares')]
        [string[]]
        ${RemoveDefinitionUpdateFileShare},

        [Parameter(ParameterSetName='SetExclusionSettingsByName')]
        [Parameter(ParameterSetName='SetExclusionSettingsByValue')]
        [Alias('ExcludedFilePaths','ExcludeFilePaths')]
        [string[]]
        ${ExcludeFilePath},

        [Parameter(ParameterSetName='SetExclusionSettingsByName')]
        [Parameter(ParameterSetName='SetExclusionSettingsByValue')]
        [switch]
        ${CleanExcludedFilePath},

        [Parameter(ParameterSetName='SetExclusionSettingsByName')]
        [Parameter(ParameterSetName='SetExclusionSettingsByValue')]
        [Alias('RemoveExcludedFilePaths')]
        [string[]]
        ${RemoveExcludedFilePath},

        [Parameter(ParameterSetName='SetExclusionSettingsByName')]
        [Parameter(ParameterSetName='SetExclusionSettingsByValue')]
        [Alias('AddExcludedFilePaths')]
        [string[]]
        ${AddExcludedFilePath},

        [Parameter(ParameterSetName='SetExclusionSettingsByName')]
        [Parameter(ParameterSetName='SetExclusionSettingsByValue')]
        [Alias('ExcludedFileTypes','ExcludeFileTypes')]
        [string[]]
        ${ExcludeFileType},

        [Parameter(ParameterSetName='SetExclusionSettingsByName')]
        [Parameter(ParameterSetName='SetExclusionSettingsByValue')]
        [switch]
        ${CleanExcludedFileType},

        [Parameter(ParameterSetName='SetExclusionSettingsByName')]
        [Parameter(ParameterSetName='SetExclusionSettingsByValue')]
        [Alias('RemoveExcludedFileTypes')]
        [string[]]
        ${RemoveExcludedFileType},

        [Parameter(ParameterSetName='SetExclusionSettingsByName')]
        [Parameter(ParameterSetName='SetExclusionSettingsByValue')]
        [Alias('AddExcludedFileTypes')]
        [string[]]
        ${AddExcludedFileType},

        [Parameter(ParameterSetName='SetExclusionSettingsByName')]
        [Parameter(ParameterSetName='SetExclusionSettingsByValue')]
        [Alias('ExcludedProcesses','ExcludeProcesses')]
        [string[]]
        ${ExcludeProcess},

        [Parameter(ParameterSetName='SetExclusionSettingsByName')]
        [Parameter(ParameterSetName='SetExclusionSettingsByValue')]
        [switch]
        ${CleanExcludedProcess},

        [Parameter(ParameterSetName='SetExclusionSettingsByName')]
        [Parameter(ParameterSetName='SetExclusionSettingsByValue')]
        [Alias('RemoveExcludedProcesses')]
        [string[]]
        ${RemoveExcludedProcess},

        [Parameter(ParameterSetName='SetExclusionSettingsByName')]
        [Parameter(ParameterSetName='SetExclusionSettingsByValue')]
        [Alias('AddExcludedProcesses')]
        [string[]]
        ${AddExcludedProcess},

        [Parameter(ParameterSetName='SetThreatOverridesSettingsByName')]
        [Parameter(ParameterSetName='SetThreatOverridesSettingsByValue')]
        [Alias('CleanThreats')]
        [switch]
        ${CleanThreat},

        [Parameter(ParameterSetName='SetThreatOverridesSettingsByName')]
        [Parameter(ParameterSetName='SetThreatOverridesSettingsByValue')]
        [Alias('RemoveThreats','RemoveThreatsByName')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveThreat},

        [Parameter(ParameterSetName='SetThreatOverridesSettingsByName')]
        [Parameter(ParameterSetName='SetThreatOverridesSettingsByValue')]
        [Alias('AddThreats')]
        [ValidateNotNullOrEmpty()]
        [hashtable]
        ${AddThreat},

        [Parameter(ParameterSetName='SetThreatOverridesSettingsByName')]
        [Parameter(ParameterSetName='SetThreatOverridesSettingsByValue')]
        [Alias('ThreatNames')]
        [string[]]
        ${ThreatName},

        [Parameter(ParameterSetName='SetThreatOverridesSettingsByName')]
        [Parameter(ParameterSetName='SetThreatOverridesSettingsByValue')]
        [Alias('OverrideActions')]
        [System.Object[]]
        ${OverrideAction},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetScheduledScanSettingsByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetScanSettingsByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetDefaultActionSettingsByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetRealtimeProtectionSettingsByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetAdvancedSettingsByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetMAPSSettingsByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetDefinitionUpdatesSettingsByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetExclusionSettingsByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetThreatOverridesSettingsByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('AntiMalwarePolicy')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMApplication
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName','ApplicationName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByModelName', Mandatory=$true)]
        [string]
        ${ModelName},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [string]
        ${Description},

        [Alias('Manufacturer')]
        [string]
        ${Publisher},

        [string]
        ${SoftwareVersion},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [string]
        ${OptionalReference},

        [datetime]
        ${ReleaseDate},

        [bool]
        ${AutoInstall},

        [string]
        ${Owner},

        [Alias('AddOwners')]
        [string[]]
        ${AddOwner},

        [Alias('RemoveOwners')]
        [string[]]
        ${RemoveOwner},

        [Alias('CleanOwners')]
        [switch]
        ${ClearOwner},

        [string]
        ${SupportContact},

        [Alias('AddSupportContacts')]
        [string[]]
        ${AddSupportContact},

        [Alias('RemoveSupportContacts')]
        [string[]]
        ${RemoveSupportContact},

        [Alias('CleanSupportContacts')]
        [switch]
        ${ClearSupportContact},

        [ValidateNotNullOrEmpty()]
        [string]
        ${LocalizedApplicationName},

        [string]
        ${UserDocumentation},

        [string]
        ${LinkText},

        [Alias('LocalizedApplicationDescription')]
        [string]
        ${LocalizedDescription},

        [Alias('Keywords')]
        [string[]]
        ${Keyword},

        [ValidateSet('High','Medium','Low')]
        [System.Object]
        ${DistributionPriority},

        [bool]
        ${SendToProtectedDistributionPoint},

        [System.Object]
        ${DistributionPointSetting},

        [Alias('UserCategories')]
        [string[]]
        ${UserCategory},

        [Alias('AddUserCategories')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${AddUserCategory},

        [Alias('RemoveUserCategoryNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveUserCategoryName},

        [Alias('CleanUserCategories')]
        [switch]
        ${CleanUserCategory},

        [Alias('AppCategories')]
        [string[]]
        ${AppCategory},

        [Alias('AddAppCategories')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${AddAppCategory},

        [Alias('RemoveAppCategoryNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveAppCategoryName},

        [Alias('CleanAppCategories')]
        [switch]
        ${CleanAppCategory},

        [string]
        ${PrivacyUrl},

        [bool]
        ${IsFeatured},

        [ValidateNotNullOrEmpty()]
        [string]
        ${IconLocationFile},

        [Alias('DisplaySupersedencesInApplicationCatalog')]
        [bool]
        ${DisplaySupersedenceInApplicationCatalog},

        [switch]
        ${PassThru},

        [Alias('ClearAppCatalogs','CleanAppCatalog','CleanAppCatalogs')]
        [switch]
        ${ClearAppCatalog},

        [Alias('RemoveAppCatalogsByLanguageId')]
        [int[]]
        ${RemoveAppCatalog},

        [Alias('AppCatalogs')]
        [System.Object[]]
        ${AddAppCatalog},

        [Alias('ApplySettingToSpecificLanguage')]
        [int]
        ${ApplyToLanguageById},

        [int]
        ${DefaultLanguageId},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMApplicationCatalogWebsitePoint
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [Alias('SiteSystemServerNameConfiguredForApplicationCatalogWebServicePoint')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ApplicationWebServicePointServerName},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateLength(0, 15)]
        [string]
        ${NetBiosName},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateLength(0, 40)]
        [string]
        ${OrganizationName},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [Alias('ClientCommunicationType')]
        [System.Object]
        ${CommunicationType},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [System.Object]
        ${ClientConnectionType},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateRange(0, 255)]
        [int]
        ${ColorRed},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateRange(0, 255)]
        [int]
        ${ColorGreen},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateRange(0, 255)]
        [int]
        ${ColorBlue},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [System.Drawing.Color]
        ${Color},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ApplicationCatalogWebsitePoint')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Portal Web Site')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMApplicationDeployment
{
    [CmdletBinding(DefaultParameterSetName='SetApplicationDeploymentByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetApplicationDeploymentByNameMandatory', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='SetApplicationDeploymentByIdMandatory', Mandatory=$true)]
        [string]
        ${ApplicationId},

        [Parameter(ParameterSetName='SetApplicationDeploymentByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application','DeploymentSummary','Assignment')]
        [System.Object]
        ${InputObject},

        [string]
        ${Comment},

        [Alias('AppRequiresApproval')]
        [bool]
        ${RequireApproval},

        [bool]
        ${PreDeploy},

        [bool]
        ${SendWakeUpPacket},

        [bool]
        ${UseMeteredNetwork},

        [System.Object]
        ${TimeBaseOn},

        [datetime]
        ${AvailableDateTime},

        [datetime]
        ${DeadlineDateTime},

        [System.Object]
        ${UserNotification},

        [bool]
        ${OverrideServiceWindow},

        [bool]
        ${RebootOutsideServiceWindow},

        [bool]
        ${PersistOnWriteFilterDevice},

        [bool]
        ${CreateAlertBaseOnPercentSuccess},

        [ValidateRange(0, 100)]
        [int]
        ${SuccessParameterValue},

        [datetime]
        ${PostponeDateTime},

        [bool]
        ${CreateAlertBaseOnPercentFailure},

        [ValidateRange(0, 99)]
        [int]
        ${FailParameterValue},

        [bool]
        ${EnableMomAlert},

        [bool]
        ${RaiseMomAlertsOnFailure},

        [bool]
        ${EnableSoftDeadline},

        [bool]
        ${ReplaceToastNotificationWithDialog},

        [switch]
        ${PassThru},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMAppv5XDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [Alias('EnableContentLocationFallback','AllowClientsToUseFallbackSourceLocationForContent')]
        [bool]
        ${ContentFallback},

        [ValidateSet('DownloadContentForStreaming','Download')]
        [System.Object]
        ${FastNetworkDeploymentMode},

        [System.Object]
        ${SlowNetworkDeploymentMode},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [string]
        ${DeploymentTypeName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [System.Object]
        ${Application},

        [Parameter(ParameterSetName='ByDTValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeploymentType')]
        [System.Object]
        ${InputObject},

        [Alias('NewDeploymentTypeName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ContentLocation},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [switch]
        ${PassThru},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMAppvDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [Alias('EnableContentLocationFallback','AllowClientsToUseFallbackSourceLocationForContent')]
        [bool]
        ${ContentFallback},

        [ValidateSet('DownloadContentForStreaming','Download')]
        [System.Object]
        ${FastNetworkDeploymentMode},

        [System.Object]
        ${SlowNetworkDeploymentMode},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [string]
        ${DeploymentTypeName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [System.Object]
        ${Application},

        [Parameter(ParameterSetName='ByDTValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeploymentType')]
        [System.Object]
        ${InputObject},

        [Alias('NewDeploymentTypeName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ContentLocation},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [switch]
        ${PassThru},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMAppVVirtualEnvironment
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int[]]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_VirtualEnvironment')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [string]
        ${Description},

        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${AddApplicationGroup},

        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${RemoveApplicationGroup},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMAssetIntelligenceCatalogItem
{
    [CmdletBinding(DefaultParameterSetName='SetById', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [string]
        ${CategoryName},

        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('CategoryId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AICategory')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewCategoryName},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [string]
        ${Description},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [int]
        ${LanguageId},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMAssetIntelligenceClass
{
    [CmdletBinding(DefaultParameterSetName='SetByAllReportClass', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetBySelectReportClass')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${EnableReportingClass},

        [Parameter(ParameterSetName='SetBySelectReportClass')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${DisableReportingClass},

        [Parameter(ParameterSetName='SetByAllReportClass', Mandatory=$true)]
        [switch]
        ${EnableAllReportingClass},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMAssetIntelligenceSynchronizationPoint
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [bool]
        ${Enable},

        [string]
        ${CertificateFile},

        [bool]
        ${EnableSynchronization},

        [Alias('ScheduleToken')]
        [AllowNull()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [Parameter(ValueFromPipeline=$true)]
        [Alias('AssetIntelligenceUpdateServicePoint')]
        [ValidateNotNull()]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMAssignedSite
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceName},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('ResourceId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceId},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_CombinedDeviceResources')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMAutoDeploymentRuleDeployment
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById', Mandatory=$true, Position=0)]
        [Alias('ActionID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('AutoDeploymentRuleDeployment')]
        [PSTypeName('IResultObject#SMS_AdrDeploymentSettings')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Collection;CollectionType=2')]
        [System.Object]
        ${Collection},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [Alias('Enable','EnabledAfterCreate','EnableAfterCreate')]
        [bool]
        ${EnableDeployment},

        [Alias('EnableWakeOnLan')]
        [bool]
        ${SendWakeupPacket},

        [System.Object]
        ${VerboseLevel},

        [bool]
        ${UseUtc},

        [bool]
        ${AvailableImmediately},

        [int]
        ${AvailableTime},

        [System.Object]
        ${AvailableTimeUnit},

        [bool]
        ${DeadlineImmediately},

        [int]
        ${DeadlineTime},

        [System.Object]
        ${DeadlineTimeUnit},

        [System.Object]
        ${UserNotification},

        [bool]
        ${AllowSoftwareInstallationOutsideMaintenanceWindow},

        [bool]
        ${AllowRestart},

        [bool]
        ${SuppressRestartServer},

        [bool]
        ${SuppressRestartWorkstation},

        [bool]
        ${WriteFilterHandling},

        [bool]
        ${GenerateSuccessAlert},

        [ValidateRange(0, 99)]
        [int]
        ${SuccessPercentage},

        [int]
        ${AlertTime},

        [System.Object]
        ${AlertTimeUnit},

        [Alias('DisableOperationManager')]
        [bool]
        ${DisableOperationsManager},

        [Alias('GenerateOperationManagerAlert')]
        [bool]
        ${GenerateOperationsManagerAlert},

        [bool]
        ${NoInstallOnRemote},

        [bool]
        ${NoInstallOnUnprotected},

        [bool]
        ${UseBranchCache},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMSoftwareUpdateAutoDeploymentRuleDeployment -Value Set-CMAutoDeploymentRuleDeployment

function Set-CMBaseline
{
    [CmdletBinding(DefaultParameterSetName='SetByIdMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByNameMandatory', Mandatory=$true)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByIdMandatory', Mandatory=$true)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 255)]
        [string]
        ${NewName},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('LocalizedDescription')]
        [ValidateLength(0, 512)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddCategory},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveCategory},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DesiredConfigurationDigestPath},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [switch]
        ${ClearRequiredConfigurationItem},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [switch]
        ${ClearProhibitedConfigurationItem},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [switch]
        ${ClearOptionalConfigurationItem},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [switch]
        ${ClearOSConfigurationItem},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [switch]
        ${ClearSoftwareUpdate},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [switch]
        ${ClearBaseline},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('RemoveRequiredConfigurationItems')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveRequiredConfigurationItem},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('RemoveProhibitedConfigurationItems')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveProhibitedConfigurationItem},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('RemoveOptionalConfigurationItems')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveOptionalConfigurationItem},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('RemoveOSConfigurationItems')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveOSConfigurationItem},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('RemoveSoftwareUpdates')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveSoftwareUpdate},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('RemoveBaselines')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveBaseline},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('AddRequiredConfigurationItems')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddRequiredConfigurationItem},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('AddProhibitedConfigurationItems')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddProhibitedConfigurationItem},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('AddOptionalConfigurationItems')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddOptionalConfigurationItem},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('AddOSConfigurationItems')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddOSConfigurationItem},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('AddSoftwareUpdates')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddSoftwareUpdate},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('AddBaselines')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddBaseline},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMBaselineDeployment
{
    [CmdletBinding(DefaultParameterSetName='SetBaselineDeploymentByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetBaselineDeploymentByNameMandatory', Mandatory=$true)]
        [string]
        ${BaselineName},

        [Parameter(ParameterSetName='SetBaselineDeploymentByIdMandatory', Mandatory=$true)]
        [string]
        ${BaselineId},

        [Parameter(ParameterSetName='SetBaselineDeploymentByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Baseline','DeploymentSummary','Assignment')]
        [System.Object]
        ${InputObject},

        [bool]
        ${EnableEnforcement},

        [bool]
        ${OverrideServiceWindow},

        [bool]
        ${GenerateAlert},

        [ValidateRange(0, 100)]
        [int]
        ${ParameterValue},

        [datetime]
        ${PostponeDateTime},

        [bool]
        ${MonitoredByScom},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [switch]
        ${PassThru},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMBaselineSummarizationSchedule
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='Set', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [int]
        ${Interval},

        [Parameter(ParameterSetName='Set')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Unit},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMBootImage
{
    [CmdletBinding(DefaultParameterSetName='SetByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('PackageId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_BootImagePackage')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 50)]
        [string]
        ${NewName},

        [string]
        ${Version},

        [string]
        ${Description},

        [Alias('ImagePath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Path},

        [bool]
        ${EnablePrestartCommand},

        [Alias('CommandLine')]
        [string]
        ${PrestartCommandLine},

        [bool]
        ${IncludeFilesForPrestart},

        [string]
        ${PrestartIncludeFilesDirectory},

        [string]
        ${BackgroundBitmapPath},

        [ValidateSet('32','64','128','256','512')]
        [uint32]
        ${ScratchSpace},

        [bool]
        ${EnableCommandSupport},

        [bool]
        ${PersistContentInCache},

        [bool]
        ${EnableBinaryDeltaReplication},

        [bool]
        ${DeployFromPxeDistributionPoint},

        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${DistributionPointUpdateSchedule},

        [string]
        ${CustomPackageShareName},

        [Alias('DisconnectUsersFromDistributionPoints')]
        [bool]
        ${DisconnectUserFromDistributionPoint},

        [Alias('DisconnectUsersFromDistributionPointsRetries')]
        [ValidateRange(0, 99)]
        [uint32]
        ${DisconnectUserFromDistributionPointRetryCount},

        [Alias('DisconnectUsersFromDistributionPointsMinutes')]
        [ValidateRange(0, 59)]
        [uint32]
        ${DisconnectUserFromDistributionPointMins},

        [Alias('AddOptionalComponents')]
        [PSTypeName('IResultObject#SMS_WinPEOptionalComponentInfo')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${AddOptionalComponent},

        [Alias('RemoveOptionalComponents')]
        [PSTypeName('IResultObject#SMS_WinPEOptionalComponentInfo')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${RemoveOptionalComponent},

        [Alias('CopyToPackageShareOnDistributionPoints')]
        [bool]
        ${CopyToPackageShareOnDistributionPoint},

        [switch]
        ${Force},

        [System.Object]
        ${Priority},

        [Alias('SendToPreferredDistributionPoints')]
        [bool]
        ${SendToPreferredDistributionPoint},

        [System.Object]
        ${PrestageBehavior},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMBoundary
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('BoundaryId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [Alias('DisplayName','Name')]
        [string]
        ${NewName},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Boundary')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [Alias('BoundaryType')]
        [System.Object]
        ${Type},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [string]
        ${Value},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [Alias('NewBoundaryType')]
        [System.Object]
        ${NewType},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [string]
        ${NewValue},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMBoundaryGroup
{
    [CmdletBinding(DefaultParameterSetName='SetByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('GroupId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_BoundaryGroup')]
        [System.Object]
        ${InputObject},

        [string]
        ${NewName},

        [string]
        ${Description},

        [string]
        ${DefaultSiteCode},

        [Alias('AddSiteSystemServers')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${AddSiteSystemServer},

        [Alias('AddSiteSystemServerNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddSiteSystemServerName},

        [Alias('RemoveSiteSystemServers')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object[]]
        ${RemoveSiteSystemServer},

        [Alias('RemoveSiteSystemServerNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveSiteSystemServerName},

        [Alias('ClearSiteSystemServers')]
        [switch]
        ${ClearSiteSystemServer},

        [bool]
        ${AllowPeerDownload},

        [Alias('PeerWithinSameSubnetOnly')]
        [bool]
        ${SubnetPeerDownloadOnly},

        [Alias('PreferDistributionPointOverPeerInSubnet')]
        [bool]
        ${PreferDPOverPeer},

        [Alias('PreferCloudDistributionPointOverDistributionPoint')]
        [bool]
        ${PreferCloudDPOverDP},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMBoundaryGroupRelationship
{
    [CmdletBinding(DefaultParameterSetName='SetByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByIdMandatory', Mandatory=$true)]
        [int]
        ${SourceGroupId},

        [Parameter(ParameterSetName='SetByIdMandatory', Mandatory=$true)]
        [int]
        ${DestinationGroupId},

        [Parameter(ParameterSetName='SetByNameMandatory', Mandatory=$true)]
        [string]
        ${SourceGroupName},

        [Parameter(ParameterSetName='SetByNameMandatory', Mandatory=$true)]
        [string]
        ${DestinationGroupName},

        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_BoundaryGroupRelationships')]
        [System.Object]
        ${InputObject},

        [ValidateRange(-1, 2147483647)]
        [int]
        ${FallbackDPMinutes},

        [ValidateRange(-1, 2147483647)]
        [int]
        ${FallbackMPMinutes},

        [ValidateRange(-1, 2147483647)]
        [int]
        ${FallbackSmpMinutes},

        [ValidateRange(-1, 2147483647)]
        [int]
        ${FallbackSupMinutes},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMCertificateProfilePfx
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_PfxCertificateSettings')]
        [System.Object]
        ${InputObject},

        [System.Object]
        ${KeyStorageProvider},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${Name},

        [string]
        ${NewName},

        [switch]
        ${PassThru},

        [Alias('SupportedPlatforms')]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${SupportedPlatform},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMCertificateProfileScep
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [bool]
        ${AllowCertificateOnAnyDevice},

        [ValidateSet('Machine','User')]
        [System.Object]
        ${CertificateStore},

        [string]
        ${CertificateTemplateName},

        [ValidateRange(1, 1825)]
        [int]
        ${CertificateValidityDays},

        [string]
        ${Description},

        [Alias('Ekus')]
        [hashtable]
        ${Eku},

        [ValidateRange(1, 99)]
        [int]
        ${EnrollmentRenewThresholdPct},

        [ValidateRange(0, 10)]
        [int]
        ${EnrollmentRetryCount},

        [ValidateRange(1, 20)]
        [int]
        ${EnrollmentRetryDelayMins},

        [Alias('HashAlgorithms')]
        [System.Object]
        ${HashAlgorithm},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_ClientAuthCertificateSettings')]
        [System.Object]
        ${InputObject},

        [ValidateSet('1024','2048','4096')]
        [int]
        ${KeySize},

        [System.Object]
        ${KeyStorageProvider},

        [Alias('KeyUsages')]
        [ValidateSet('KeyEncipherment','DigitalSignature')]
        [System.Security.Cryptography.X509Certificates.X509KeyUsageFlags]
        ${KeyUsage},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${Name},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [bool]
        ${RequireMultifactor},

        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_TrustedRootCertificateSettings')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${RootCertificate},

        [Alias('SanTypes')]
        [System.Object]
        ${SanType},

        [Alias('ScepServerUrls')]
        [string[]]
        ${ScepServerUrl},

        [Alias('SubjectTypes')]
        [System.Object]
        ${SubjectType},

        [Alias('SupportedPlatforms')]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${SupportedPlatform},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMCertificateProfileTrustedRootCA
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [string]
        ${Description},

        [Alias('Store')]
        [System.Object]
        ${DestinationStore},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_TrustedRootCertificateSettings')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${Name},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [switch]
        ${PassThru},

        [Alias('CertificatePath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Path},

        [Alias('SupportedPlatforms')]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${SupportedPlatform},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMCertificateRegistrationPoint
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Alias('AddCertificates')]
        [hashtable]
        ${AddCertificate},

        [Alias('UserName')]
        [string]
        ${ConnectionAccountUserName},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('CertificateRegistrationPoint')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Certificate Registration Point')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [ValidateRange(1, 65535)]
        [int]
        ${Port},

        [Alias('RemoveCertificates','RemoveCertificateUrl','RemoveCertificateUrls')]
        [string[]]
        ${RemoveCertificate},

        [Parameter(ParameterSetName='SetByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientCertificateProfileConfigurationItem
{
    [CmdletBinding(DefaultParameterSetName='SetByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [Alias('LocalizedDescription')]
        [ValidateLength(0, 512)]
        [string]
        ${Description},

        [Parameter(ValueFromPipeline=$true)]
        [ValidateNotNull()]
        [System.Object]
        ${Digest},

        [Alias('DesiredConfigurationDigestPath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DigestPath},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DigestXml},

        [Parameter(ParameterSetName='SetById', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 255)]
        [string]
        ${NewName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMClientAuthCertificateProfileConfigurationItem -Value Set-CMClientCertificateProfileConfigurationItem

function Set-CMClientPushInstallation
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('SiteName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByComponentValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ClientPushComponent')]
        [System.Object]
        ${InputObject},

        [Alias('ChosenAccounts')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${ChosenAccount},

        [Alias('ClearAccounts')]
        [switch]
        ${ClearAccount},

        [Alias('RemoveAccounts')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveAccount},

        [Alias('AddAccounts')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddAccount},

        [bool]
        ${EnableAutomaticClientPushInstallation},

        [bool]
        ${EnableSystemTypeConfigurationManager},

        [bool]
        ${EnableSystemTypeServer},

        [bool]
        ${EnableSystemTypeWorkstation},

        [bool]
        ${InstallClientToDomainController},

        [ValidateNotNullOrEmpty()]
        [string]
        ${InstallationProperty},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSetting
{
    [CmdletBinding(DefaultParameterSetName='SetByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetEndpointProtectionSettingsByName')]
        [Parameter(ParameterSetName='SetPowerManagementSettingsByName')]
        [Parameter(ParameterSetName='SetHardwareInventorySettingsByName')]
        [Parameter(ParameterSetName='SetMobileDeviceSettingsByName')]
        [Parameter(ParameterSetName='SetNetworkAccessProtectionSettingsByName')]
        [Parameter(ParameterSetName='SetSoftwareMeteringSettingsByName')]
        [Parameter(ParameterSetName='SetSoftwareUpdatesSettingsByName')]
        [Parameter(ParameterSetName='SetSoftwareInventorySettingsByName')]
        [Alias('EnableEndpointProtection','EnablePowerManagement','EnableHardwareInventory','EnableDeviceEnrollment','EnableNetworkAccessProtection','EnableSoftwareMetering','EnableSoftwareUpdatesOnClient','EnableSoftwareInventory')]
        [bool]
        ${Enable},

        [Parameter(ParameterSetName='SetSoftwareInventorySettingsByName')]
        [Parameter(ParameterSetName='SetSoftwareMeteringSettingsByName')]
        [Parameter(ParameterSetName='SetSoftwareDeploymentSettingsByName')]
        [Parameter(ParameterSetName='SetNetworkAccessProtectionSettingsByName')]
        [Parameter(ParameterSetName='SetHardwareInventorySettingsByName')]
        [Parameter(ParameterSetName='SetComplianceSettingsByName')]
        [Alias('InventorySchedule','NapEvaluationSchedule','EvaluationSchedule','DataCollectionSchedule','SoftwareInventorySchedule')]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetCloudSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetEndpointProtectionSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetSecurityScopeByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetPowerManagementSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetStateMessagingSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetUserDeviceAffinitySettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetBackgroundIntelligentTransferSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetClientPolicySettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetComplianceSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetComputerAgentSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetComputerRestartSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetMeteredNetworksSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetRemoteToolsSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetMobileDeviceSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetHardwareInventorySettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetNetworkAccessProtectionSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetSoftwareDeploymentSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetSoftwareMeteringSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetSoftwareUpdatesSettingsByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetSoftwareInventorySettingsByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Parameter(ParameterSetName='SetByName')]
        [string]
        ${Description},

        [Parameter(ParameterSetName='SetByName')]
        [System.Object]
        ${Priority},

        [Parameter(ParameterSetName='SetCloudSettingsByName', Mandatory=$true)]
        [Alias('CloudServicesSettings','CloudServices')]
        [switch]
        ${CloudService},

        [Parameter(ParameterSetName='SetCloudSettingsByName')]
        [bool]
        ${AllowCloudDistributionPoint},

        [Parameter(ParameterSetName='SetEndpointProtectionSettingsByName', Mandatory=$true)]
        [Alias('EndpointProtectionSettings')]
        [switch]
        ${EndpointProtection},

        [Parameter(ParameterSetName='SetEndpointProtectionSettingsByName')]
        [bool]
        ${InstallEndpointProtectionClient},

        [Parameter(ParameterSetName='SetEndpointProtectionSettingsByName')]
        [bool]
        ${RemoveThirdParty},

        [Parameter(ParameterSetName='SetEndpointProtectionSettingsByName')]
        [bool]
        ${SuppressReboot},

        [Parameter(ParameterSetName='SetEndpointProtectionSettingsByName')]
        [Alias('ForceRebootPeriod','ForceRebootHours')]
        [ValidateRange(1, 24)]
        [int]
        ${ForceRebootHr},

        [Parameter(ParameterSetName='SetEndpointProtectionSettingsByName')]
        [bool]
        ${DisableFirstSignatureUpdate},

        [Parameter(ParameterSetName='SetRemoteToolsSettingsByName', Mandatory=$true)]
        [Alias('RemoteToolsSettings','RemoteTools')]
        [switch]
        ${RemoteControl},

        [Parameter(ParameterSetName='SetRemoteToolsSettingsByName')]
        [System.Object[]]
        ${FirewallExceptionProfile},

        [Parameter(ParameterSetName='SetRemoteToolsSettingsByName')]
        [bool]
        ${AllowClientChange},

        [Parameter(ParameterSetName='SetRemoteToolsSettingsByName')]
        [bool]
        ${AllowRemoteControlOfUnattendedComputer},

        [Parameter(ParameterSetName='SetRemoteToolsSettingsByName')]
        [bool]
        ${PromptUserForPermission},

        [Parameter(ParameterSetName='SetRemoteToolsSettingsByName')]
        [bool]
        ${GrantRemoteControlPermissionToLocalAdministrator},

        [Parameter(ParameterSetName='SetRemoteToolsSettingsByName')]
        [System.Object]
        ${AccessLevel},

        [Parameter(ParameterSetName='SetRemoteToolsSettingsByName')]
        [Alias('PermittedViewers')]
        [string[]]
        ${PermittedViewer},

        [Parameter(ParameterSetName='SetRemoteToolsSettingsByName')]
        [bool]
        ${ShowNotificationIconOnTaskbar},

        [Parameter(ParameterSetName='SetRemoteToolsSettingsByName')]
        [bool]
        ${ShowSessionConnectionBar},

        [Parameter(ParameterSetName='SetRemoteToolsSettingsByName')]
        [System.Object]
        ${AudibleSignal},

        [Parameter(ParameterSetName='SetRemoteToolsSettingsByName')]
        [bool]
        ${ManageUnsolicitedRemoteAssistance},

        [Parameter(ParameterSetName='SetRemoteToolsSettingsByName')]
        [bool]
        ${ManageSolicitedRemoteAssistance},

        [Parameter(ParameterSetName='SetRemoteToolsSettingsByName')]
        [System.Object]
        ${RemoteAssistanceAccessLevel},

        [Parameter(ParameterSetName='SetRemoteToolsSettingsByName')]
        [bool]
        ${ManageRemoteDesktopSetting},

        [Parameter(ParameterSetName='SetRemoteToolsSettingsByName')]
        [Alias('AllowPermittedViewersToRemoteDesktop')]
        [bool]
        ${AllowPermittedViewer},

        [Parameter(ParameterSetName='SetRemoteToolsSettingsByName')]
        [bool]
        ${RequireAuthentication},

        [Parameter(ParameterSetName='SetPowerManagementSettingsByName', Mandatory=$true)]
        [Alias('PowerManagementSettings')]
        [switch]
        ${PowerManagement},

        [Parameter(ParameterSetName='SetPowerManagementSettingsByName')]
        [bool]
        ${AllowUserToOptOutFromPowerPlan},

        [Parameter(ParameterSetName='SetPowerManagementSettingsByName')]
        [bool]
        ${EnableWakeupProxy},

        [Parameter(ParameterSetName='SetPowerManagementSettingsByName')]
        [ValidateRange(1, 65535)]
        [int]
        ${WakeupProxyPort},

        [Parameter(ParameterSetName='SetPowerManagementSettingsByName')]
        [ValidateRange(1, 65535)]
        [int]
        ${WakeOnLanPort},

        [Parameter(ParameterSetName='SetPowerManagementSettingsByName')]
        [Alias('WindowsFirewallExceptionsForWakeUpProxy')]
        [System.Object]
        ${FirewallExceptionForWakeupProxy},

        [Parameter(ParameterSetName='SetPowerManagementSettingsByName')]
        [Alias('IPv6PrefixesForDirectAccessOrInterveningNetworkDevices')]
        [string]
        ${WakeupProxyDirectAccessPrefix},

        [Parameter(ParameterSetName='SetStateMessagingSettingsByName', Mandatory=$true)]
        [Alias('StateMessageSettings')]
        [switch]
        ${StateMessage},

        [Parameter(ParameterSetName='SetStateMessagingSettingsByName')]
        [Alias('StateMessagingReportingCycleMinutes','StateMessagingReportingCycleMins')]
        [ValidateRange(1, 43200)]
        [int]
        ${ReportingCycleMins},

        [Parameter(ParameterSetName='SetUserDeviceAffinitySettingsByName', Mandatory=$true)]
        [Alias('UserDeviceAffinitySettings')]
        [switch]
        ${UserDeviceAffinity},

        [Parameter(ParameterSetName='SetUserDeviceAffinitySettingsByName')]
        [Alias('UserAffinityLogOnThresholdMinutes','UserAffinityLogOnThresholdMins')]
        [ValidateRange(1, 999999)]
        [int]
        ${LogOnThresholdMins},

        [Parameter(ParameterSetName='SetUserDeviceAffinitySettingsByName')]
        [Alias('UserAffinityUsageThresholdDays')]
        [ValidateRange(1, 99999)]
        [int]
        ${UsageThresholdDays},

        [Parameter(ParameterSetName='SetUserDeviceAffinitySettingsByName')]
        [bool]
        ${AutoApproveAffinity},

        [Parameter(ParameterSetName='SetUserDeviceAffinitySettingsByName')]
        [bool]
        ${AllowUserAffinity},

        [Parameter(ParameterSetName='SetBackgroundIntelligentTransferSettingsByName', Mandatory=$true)]
        [Alias('BitsSettings')]
        [switch]
        ${Bits},

        [Parameter(ParameterSetName='SetBackgroundIntelligentTransferSettingsByName')]
        [bool]
        ${EnableBitsMaxBandwidth},

        [Parameter(ParameterSetName='SetBackgroundIntelligentTransferSettingsByName')]
        [Alias('MaxBandwidthValidFrom')]
        [ValidateRange(0, 23)]
        [int]
        ${MaxBandwidthBeginHr},

        [Parameter(ParameterSetName='SetBackgroundIntelligentTransferSettingsByName')]
        [Alias('MaxBandwidthValidTo')]
        [ValidateRange(0, 23)]
        [int]
        ${MaxBandwidthEndHr},

        [Parameter(ParameterSetName='SetBackgroundIntelligentTransferSettingsByName')]
        [ValidateRange(1, 9999)]
        [int]
        ${MaxTransferRateOnSchedule},

        [Parameter(ParameterSetName='SetBackgroundIntelligentTransferSettingsByName')]
        [bool]
        ${EnableDownloadOffSchedule},

        [Parameter(ParameterSetName='SetBackgroundIntelligentTransferSettingsByName')]
        [ValidateRange(1, 999999)]
        [int]
        ${MaxTransferRateOffSchedule},

        [Parameter(ParameterSetName='SetClientPolicySettingsByName', Mandatory=$true)]
        [Alias('ClientPolicySettings')]
        [switch]
        ${ClientPolicy},

        [Parameter(ParameterSetName='SetClientPolicySettingsByName')]
        [Alias('PolicyPollingInterval','PollingIntervalMins')]
        [ValidateRange(3, 1440)]
        [int]
        ${PolicyPollingMins},

        [Parameter(ParameterSetName='SetClientPolicySettingsByName')]
        [Alias('EnableUserPolicyPolling')]
        [bool]
        ${EnableUserPolicy},

        [Parameter(ParameterSetName='SetClientPolicySettingsByName')]
        [bool]
        ${EnableUserPolicyOnInternet},

        [Parameter(ParameterSetName='SetComplianceSettingsByName', Mandatory=$true)]
        [Alias('ComplianceSettings')]
        [switch]
        ${Compliance},

        [Parameter(ParameterSetName='SetComplianceSettingsByName')]
        [bool]
        ${EnableComplianceEvaluation},

        [Parameter(ParameterSetName='SetComplianceSettingsByName')]
        [bool]
        ${EnableUserDataAndProfile},

        [Parameter(ParameterSetName='SetComputerAgentSettingsByName', Mandatory=$true)]
        [Alias('ComputerAgentSettings')]
        [switch]
        ${ComputerAgent},

        [Parameter(ParameterSetName='SetComputerAgentSettingsByName')]
        [Alias('InitialReminderHoursInterval')]
        [ValidateRange(1, 999)]
        [int]
        ${InitialReminderHours},

        [Parameter(ParameterSetName='SetComputerAgentSettingsByName')]
        [Alias('InterimReminderHoursInterval')]
        [ValidateRange(1, 24)]
        [int]
        ${InterimReminderHours},

        [Parameter(ParameterSetName='SetComputerAgentSettingsByName')]
        [Alias('FinalReminderMinutesInterval')]
        [ValidateRange(5, 25)]
        [int]
        ${FinalReminderMins},

        [Parameter(ParameterSetName='SetComputerAgentSettingsByName')]
        [string]
        ${PortalUrl},

        [Parameter(ParameterSetName='SetComputerAgentSettingsByName')]
        [bool]
        ${AddPortalToTrustedSiteList},

        [Parameter(ParameterSetName='SetComputerAgentSettingsByName')]
        [bool]
        ${AllowPortalToHaveElevatedTrust},

        [Parameter(ParameterSetName='SetComputerAgentSettingsByName')]
        [System.Object]
        ${SelectApplicationCatalogWebsitePoint},

        [Parameter(ParameterSetName='SetComputerAgentSettingsByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ApplicationCatalogWebsitePointServerName},

        [Parameter(ParameterSetName='SetComputerAgentSettingsByName')]
        [ValidateLength(0, 40)]
        [string]
        ${BrandingTitle},

        [Parameter(ParameterSetName='SetComputerAgentSettingsByName')]
        [bool]
        ${UseNewSoftwareCenter},

        [Parameter(ParameterSetName='SetComputerAgentSettingsByName')]
        [System.Object]
        ${InstallRestriction},

        [Parameter(ParameterSetName='SetComputerAgentSettingsByName')]
        [System.Object]
        ${SuspendBitLocker},

        [Parameter(ParameterSetName='SetComputerAgentSettingsByName')]
        [System.Object]
        ${EnableThirdPartyOrchestration},

        [Parameter(ParameterSetName='SetComputerAgentSettingsByName')]
        [System.Object]
        ${PowerShellExecutionPolicy},

        [Parameter(ParameterSetName='SetComputerAgentSettingsByName')]
        [bool]
        ${DisplayNewProgramNotification},

        [Parameter(ParameterSetName='SetComputerRestartSettingsByName', Mandatory=$true)]
        [Alias('ComputerRestartSettings')]
        [switch]
        ${ComputerRestart},

        [Parameter(ParameterSetName='SetComputerRestartSettingsByName')]
        [Alias('RebootLogoffNotificationCountdownDurationMinutes')]
        [ValidateRange(1, 1440)]
        [int]
        ${RebootLogoffNotificationCountdownMins},

        [Parameter(ParameterSetName='SetComputerRestartSettingsByName')]
        [Alias('RebootLogoffNotificationFinalWindowMinutes')]
        [ValidateRange(1, 1440)]
        [int]
        ${RebootLogoffNotificationFinalWindowMins},

        [Parameter(ParameterSetName='SetComputerRestartSettingsByName')]
        [bool]
        ${ReplaceToastNotificationWithDialog},

        [Parameter(ParameterSetName='SetMeteredNetworksSettingsByName', Mandatory=$true)]
        [Alias('MeteredNetworkSettings')]
        [switch]
        ${MeteredNetwork},

        [Parameter(ParameterSetName='SetMeteredNetworksSettingsByName')]
        [System.Object]
        ${MeteredNetworkUsage},

        [Parameter(ParameterSetName='SetMobileDeviceSettingsByName', Mandatory=$true)]
        [Alias('EnrollmentSettings')]
        [switch]
        ${Enrollment},

        [Parameter(ParameterSetName='SetMobileDeviceSettingsByName')]
        [Alias('DeviceEnrollmentProfileName')]
        [string]
        ${EnrollmentProfileName},

        [Parameter(ParameterSetName='SetHardwareInventorySettingsByName', Mandatory=$true)]
        [Alias('HardwareInventorySettings')]
        [switch]
        ${HardwareInventory},

        [Parameter(ParameterSetName='SetHardwareInventorySettingsByName')]
        [string]
        ${InventoryReportId},

        [Parameter(ParameterSetName='SetNetworkAccessProtectionSettingsByName', Mandatory=$true)]
        [Alias('NetworkAccessProtectionSettings')]
        [switch]
        ${NetworkAccessProtection},

        [Parameter(ParameterSetName='SetNetworkAccessProtectionSettingsByName')]
        [bool]
        ${UseUtcForEvaluationTime},

        [Parameter(ParameterSetName='SetNetworkAccessProtectionSettingsByName')]
        [bool]
        ${ForceScan},

        [Parameter(ParameterSetName='SetSoftwareDeploymentSettingsByName', Mandatory=$true)]
        [Alias('SoftwareDeploymentSettings')]
        [switch]
        ${SoftwareDeployment},

        [Parameter(ParameterSetName='SetSoftwareMeteringSettingsByName', Mandatory=$true)]
        [Alias('SoftwareMeteringSettings')]
        [switch]
        ${SoftwareMetering},

        [Parameter(ParameterSetName='SetSoftwareUpdatesSettingsByName', Mandatory=$true)]
        [Alias('SoftwareUpdatesSettings')]
        [switch]
        ${SoftwareUpdate},

        [Parameter(ParameterSetName='SetSoftwareUpdatesSettingsByName')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${ScanSchedule},

        [Parameter(ParameterSetName='SetSoftwareUpdatesSettingsByName')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${DeploymentEvaluationSchedule},

        [Parameter(ParameterSetName='SetSoftwareUpdatesSettingsByName')]
        [int]
        ${BatchingTimeout},

        [Parameter(ParameterSetName='SetSoftwareUpdatesSettingsByName')]
        [bool]
        ${EnforceMandatory},

        [Parameter(ParameterSetName='SetSoftwareUpdatesSettingsByName')]
        [System.Object]
        ${TimeUnit},

        [Parameter(ParameterSetName='SetSoftwareInventorySettingsByName', Mandatory=$true)]
        [Alias('SoftwareInventorySettings')]
        [switch]
        ${SoftwareInventory},

        [Parameter(ParameterSetName='SetSoftwareInventorySettingsByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SoftwareInventoryFileName},

        [Parameter(ParameterSetName='SetSoftwareInventorySettingsByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SoftwareInventoryFileDisplayName},

        [Parameter(ParameterSetName='SetSoftwareInventorySettingsByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SoftwareInventoryFileInventoriedName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingBackgroundIntelligentTransfer
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [Alias('MaxBandwidthValidFrom')]
        [ValidateRange(0, 23)]
        [int]
        ${MaxBandwidthBeginHr},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [bool]
        ${EnableBitsMaxBandwidth},

        [Alias('MaxBandwidthValidTo')]
        [ValidateRange(0, 23)]
        [int]
        ${MaxBandwidthEndHr},

        [ValidateRange(1, 9999)]
        [int]
        ${MaxTransferRateOnSchedule},

        [bool]
        ${EnableDownloadOffSchedule},

        [ValidateRange(1, 999999)]
        [int]
        ${MaxTransferRateOffSchedule},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingClientCache
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [bool]
        ${ConfigureBranchCache},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [bool]
        ${EnableBranchCache},

        [Alias('MaximumBranchCacheSizePercent')]
        [ValidateRange(1, 100)]
        [int]
        ${MaxBranchCacheSizePercent},

        [bool]
        ${ConfigureCacheSize},

        [Alias('MaximumCacheSizeMb')]
        [ValidateRange(1, 1048576)]
        [int]
        ${MaxCacheSize},

        [Alias('MaximumCacheSizePercent')]
        [ValidateRange(1, 100)]
        [int]
        ${MaxCacheSizePercent},

        [Alias('EnableClientInFullOsToShareContent')]
        [bool]
        ${EnableSuperPeer},

        [Alias('PortForInitialNetworkBroadcast')]
        [ValidateRange(1, 65535)]
        [int]
        ${BroadcastPort},

        [Alias('EnableHttpsForClientPeerCommunication')]
        [bool]
        ${EnableHttps},

        [Alias('PortForContentDownloadFromPeer')]
        [ValidateRange(1, 65535)]
        [int]
        ${DownloadPort},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingClientPolicy
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [Alias('PolicyPollingInterval','PollingIntervalMins')]
        [ValidateRange(3, 1440)]
        [int]
        ${PolicyPollingMins},

        [Alias('EnableUserPolicyPolling')]
        [bool]
        ${EnableUserPolicy},

        [bool]
        ${EnableUserPolicyOnInternet},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingCloudService
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [bool]
        ${AllowCloudDistributionPoint},

        [bool]
        ${AutoAzureADJoin},

        [bool]
        ${AllowCloudManagementGateway},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingComplianceSetting
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetDefaultSetting')]
        [Alias('EvaluationSchedule')]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [Alias('EnableComplianceEvaluation')]
        [bool]
        ${Enable},

        [bool]
        ${EnableUserDataAndProfile},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingComputerAgent
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [Alias('InitialReminderHoursInterval','InitialReminderHours')]
        [ValidateRange(1, 999)]
        [int]
        ${InitialReminderHr},

        [Alias('InterimReminderHoursInterval','InterimReminderHours')]
        [ValidateRange(1, 24)]
        [int]
        ${InterimReminderHr},

        [Alias('FinalReminderMinutesInterval','FinalReminderMinutes')]
        [ValidateRange(5, 25)]
        [int]
        ${FinalReminderMins},

        [string]
        ${PortalUrl},

        [bool]
        ${AddPortalToTrustedSiteList},

        [bool]
        ${AllowPortalToHaveElevatedTrust},

        [Alias('SelectApplicationCatalogWebsitePoint')]
        [System.Object]
        ${SelectWebsitePoint},

        [Alias('ApplicationCatalogWebsitePointServerName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${WebsitePointServerName},

        [ValidateLength(0, 40)]
        [string]
        ${BrandingTitle},

        [bool]
        ${UseNewSoftwareCenter},

        [System.Object]
        ${InstallRestriction},

        [System.Object]
        ${SuspendBitLocker},

        [System.Object]
        ${EnableThirdPartyOrchestration},

        [System.Object]
        ${PowerShellExecutionPolicy},

        [bool]
        ${DisplayNewProgramNotification},

        [Alias('DisableDeadlineRandomization')]
        [bool]
        ${DisableDeadlineRandom},

        [Alias('EnableHealthAttestationService')]
        [bool]
        ${EnableHealthAttestation},

        [Alias('UseOnPremisesHealthAttestationService')]
        [bool]
        ${UseOnPremisesHealthAttestation},

        [Alias('OnPremisesHealthAttestationServiceUrl')]
        [string]
        ${HealthAttestationUrl},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingComputerRestart
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [Alias('RebootLogoffNotificationCountdownDurationMinutes','RebootLogoffNotificationCountdownMins')]
        [ValidateRange(1, 1440)]
        [int]
        ${CountdownMins},

        [Alias('RebootLogoffNotificationFinalWindowMinutes','RebootLogoffNotificationFinalWindowMins')]
        [ValidateRange(1, 1440)]
        [int]
        ${FinalWindowMins},

        [bool]
        ${ReplaceToastNotificationWithDialog},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingDeliveryOptimization
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [Alias('EnableDeliveryOptimization')]
        [bool]
        ${Enable},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingEndpointProtection
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [Alias('EnableEndpointProtection')]
        [bool]
        ${Enable},

        [bool]
        ${InstallEndpointProtectionClient},

        [bool]
        ${RemoveThirdParty},

        [bool]
        ${SuppressReboot},

        [Alias('ForceRebootPeriod','ForceRebootHours')]
        [ValidateRange(1, 24)]
        [int]
        ${ForceRebootHr},

        [bool]
        ${DisableFirstSignatureUpdate},

        [Alias('CommitEndpointProtectionClientInstallation')]
        [bool]
        ${PersistInstallation},

        [bool]
        ${OverrideMaintenanceWindow},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingEnrollment
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [Alias('EnableDeviceEnrollment')]
        [bool]
        ${EnableDevice},

        [Alias('EnableModernDeviceEnrollment')]
        [bool]
        ${EnableModernDevice},

        [Alias('DeviceEnrollmentProfileName','MobileDeviceEnrollmentProfileName')]
        [string]
        ${EnrollmentProfileName},

        [Alias('ModernDeviceEnrollmentProfileName')]
        [string]
        ${ModernEnrollmentProfileName},

        [Alias('PollingIntervalForModernDeviceMinutes')]
        [ValidateRange(3, 10080)]
        [int]
        ${IntervalModernMins},

        [Alias('PollingIntervalForDeviceHour')]
        [ValidateRange(1, 23)]
        [int]
        ${IntervalDeviceHr},

        [Alias('PollingIntervalForDeviceMinutes')]
        [ValidateRange(1, 59)]
        [int]
        ${IntervalDeviceMins},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingGeneral
{
    [CmdletBinding(DefaultParameterSetName='SetByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [string]
        ${Description},

        [System.Object]
        ${Priority},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingHardwareInventory
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [Alias('EnableHardwareInventory')]
        [bool]
        ${Enable},

        [Alias('InventorySchedule','HardwareInventorySchedule')]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [string]
        ${InventoryReportId},

        [switch]
        ${CleanInventoryReportClass},

        [string[]]
        ${RemoveInventoryReportClassById},

        [PSTypeName('IResultObject#SMS_InventoryReportClass')]
        [System.Object[]]
        ${AddInventoryReportClass},

        [Alias('MaximumRandomDelayMinutes')]
        [ValidateRange(0, 480)]
        [int]
        ${MaxRandomDelayMins},

        [Alias('MaximumThirdPartyMifSize')]
        [ValidateRange(1, 5120)]
        [int]
        ${MaxThirdPartyMifSize},

        [Alias('CollectMifFiles')]
        [System.Object]
        ${CollectMifFile},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingMeteredInternetConnection
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [System.Object]
        ${MeteredNetworkUsage},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingPowerManagement
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [Alias('EnablePowerManagement')]
        [bool]
        ${Enable},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [bool]
        ${AllowUserToOptOutFromPowerPlan},

        [bool]
        ${EnableWakeupProxy},

        [ValidateRange(1, 65535)]
        [int]
        ${WakeupProxyPort},

        [ValidateRange(1, 65535)]
        [int]
        ${WakeOnLanPort},

        [Alias('WindowsFirewallExceptionsForWakeupProxy')]
        [System.Object]
        ${FirewallExceptionForWakeupProxy},

        [Alias('IPv6PrefixesForDirectAccessOrInterveningNetworkDevices')]
        [string]
        ${WakeupProxyDirectAccessPrefix},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingRemoteTool
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [Alias('AllowPermittedViewersToRemoteDesktop')]
        [bool]
        ${AllowPermittedViewer},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [System.Object[]]
        ${FirewallExceptionProfile},

        [bool]
        ${AllowClientChange},

        [Alias('AllowRemoteControlOfUnattendedComputer')]
        [bool]
        ${AllowUnattendedComputer},

        [Alias('PromptUserForRemoteControlPermission')]
        [bool]
        ${PromptUserForPermission},

        [Alias('PromptUserForClipboardAccessPermission')]
        [bool]
        ${PromptUserForClipboardPermission},

        [Alias('GrantRemoteControlPermissionToLocalAdministrator')]
        [bool]
        ${GrantPermissionToLocalAdministrator},

        [System.Object]
        ${AccessLevel},

        [Alias('PermittedViewers')]
        [string[]]
        ${PermittedViewer},

        [bool]
        ${ShowNotificationIconOnTaskbar},

        [bool]
        ${ShowSessionConnectionBar},

        [System.Object]
        ${AudibleSignal},

        [bool]
        ${ManageUnsolicitedRemoteAssistance},

        [bool]
        ${ManageSolicitedRemoteAssistance},

        [System.Object]
        ${RemoteAssistanceAccessLevel},

        [bool]
        ${ManageRemoteDesktopSetting},

        [bool]
        ${RequireAuthentication},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingSoftwareCenter
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [bool]
        ${EnableCustomize},

        [ValidateNotNull()]
        [ValidateLength(0, 99)]
        [string]
        ${CompanyName},

        [System.Drawing.Color]
        ${ColorScheme},

        [string]
        ${LogoFilePath},

        [bool]
        ${HideUnapprovedApplication},

        [bool]
        ${HideInstalledApplication},

        [bool]
        ${HideApplicationCatalogLink},

        [bool]
        ${EnableApplicationsTab},

        [bool]
        ${EnableUpdatesTab},

        [bool]
        ${EnableOperatingSystemsTab},

        [bool]
        ${EnableStatusTab},

        [bool]
        ${EnableComplianceTab},

        [bool]
        ${EnableOptionsTab},

        [ValidateLength(0, 20)]
        [string]
        ${CustomTabName},

        [uri]
        ${CustomTabUrl},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingSoftwareDeployment
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [Alias('EvaluationSchedule')]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingSoftwareInventory
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [Alias('EnableSoftwareInventory')]
        [bool]
        ${Enable},

        [Alias('InventorySchedule','SoftwareInventorySchedule')]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [System.Object]
        ${ReportOption},

        [Alias('SoftwareInventoryFileName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileName},

        [Alias('SoftwareInventoryFileDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileDisplayName},

        [Alias('SoftwareInventoryFileInventoriedName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileInventoriedName},

        [Alias('AddInventoryFileTypes')]
        [ValidateNotNullOrEmpty()]
        [hashtable[]]
        ${AddInventoryFileType},

        [Alias('RemoveInventoryFileTypes')]
        [ValidateNotNullOrEmpty()]
        [hashtable[]]
        ${RemoveInventoryFileType},

        [Alias('CleanInventoryFileTypes')]
        [switch]
        ${CleanInventoryFileType},

        [Alias('AddCollectFiles')]
        [ValidateNotNullOrEmpty()]
        [hashtable[]]
        ${AddCollectFile},

        [Alias('RemoveCollectFiles')]
        [ValidateNotNullOrEmpty()]
        [hashtable[]]
        ${RemoveCollectFile},

        [Alias('CleanCollectFiles')]
        [switch]
        ${CleanCollectFile},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingSoftwareMetering
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [Alias('EnableSoftwareMetering')]
        [bool]
        ${Enable},

        [Alias('DataCollectionSchedule')]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingSoftwareUpdate
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [bool]
        ${EnforceMandatory},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [Alias('EnableSoftwareUpdatesOnClient')]
        [bool]
        ${Enable},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${ScanSchedule},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${DeploymentEvaluationSchedule},

        [int]
        ${BatchingTimeout},

        [System.Object]
        ${TimeUnit},

        [System.Nullable[bool]]
        ${Office365ManagementType},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingStateMessaging
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [Alias('StateMessagingReportingCycleMinutes','StateMessagingReportingCycleMins')]
        [ValidateRange(1, 43200)]
        [int]
        ${ReportingCycleMins},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingUserAndDeviceAffinity
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [Alias('UserAffinityLogOnThresholdMinutes','UserAffinityLogOnThresholdMins')]
        [ValidateRange(1, 999999)]
        [int]
        ${LogOnThresholdMins},

        [Alias('UserAffinityUsageThresholdDays')]
        [ValidateRange(1, 99999)]
        [int]
        ${UsageThresholdDays},

        [bool]
        ${AutoApproveAffinity},

        [bool]
        ${AllowUserAffinity},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientSettingWindowsAnalytics
{
    [CmdletBinding(DefaultParameterSetName='SetCustomSettingByName', ConfirmImpact='Medium')]
    param
    (
        [Alias('EnableWindowsAnalyticsManagement')]
        [bool]
        ${Enable},

        [string]
        ${CommercialIdKey},

        [Alias('Windows10Telemetry')]
        [ValidateSet('Basic','EnhancedLimited','Enhanced','Full')]
        [System.Object]
        ${Win10Telemetry},

        [Alias('EnableWindows81AndEarlierTelemetry')]
        [bool]
        ${EnableEarlierTelemetry},

        [Alias('EnableWindows81AndEarlierInternetExplorerDataCollectionFor')]
        [System.Object]
        ${IEDataCollectionOption},

        [Parameter(ParameterSetName='SetDefaultSetting', Mandatory=$true)]
        [switch]
        ${DefaultSetting},

        [Parameter(ParameterSetName='SetCustomSettingByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetCustomSettingByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientStatusSetting
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='Set')]
        [Alias('PolicyInactiveInterval','ClientPolicyDayInterval')]
        [ValidateRange(1, 30)]
        [int]
        ${ClientPolicyDays},

        [Parameter(ParameterSetName='Set')]
        [Alias('DdrInactiveInterval','HeartbeatDiscoveryDayInterval')]
        [ValidateRange(1, 30)]
        [int]
        ${HeartbeatDiscoveryDays},

        [Parameter(ParameterSetName='Set')]
        [Alias('HWInactiveInterval','HardwareInventoryDayInterval')]
        [ValidateRange(1, 30)]
        [int]
        ${HardwareInventoryDays},

        [Parameter(ParameterSetName='Set')]
        [Alias('SWInactiveInterval','SoftwareInventoryDayInterval')]
        [ValidateRange(1, 30)]
        [int]
        ${SoftwareInventoryDays},

        [Parameter(ParameterSetName='Set')]
        [Alias('StatusInactiveInterval','StatusMessageDayInterval')]
        [ValidateRange(1, 30)]
        [int]
        ${StatusMessageDays},

        [Parameter(ParameterSetName='Set')]
        [Alias('CleanUpInterval','HistoryCleanupDayInterval')]
        [ValidateRange(0, 90)]
        [int]
        ${HistoryCleanupDays},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMClientStatusUpdateSchedule
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='Set', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [int]
        ${Interval},

        [Parameter(ParameterSetName='Set', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${UnitType},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMCloudDistributionPoint
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('AzureServiceId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AzureService')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [string]
        ${Description},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [Alias('TrafficOutInGB')]
        [int]
        ${TrafficOutGB},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [Alias('StorageQuotaInGB')]
        [ValidateNotNullOrEmpty()]
        [int]
        ${StorageQuotaGB},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [bool]
        ${StorageQuotaGrow},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [bool]
        ${TrafficOutStopService},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMCloudManagementGateway
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('AzureServiceId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AzureService')]
        [System.Object]
        ${InputObject},

        [string]
        ${Description},

        [ValidateRange(1, 2147483647)]
        [int]
        ${TrafficOutGB},

        [ValidateRange(1, 100)]
        [int]
        ${TrafficWarningPct},

        [ValidateRange(1, 100)]
        [int]
        ${TrafficCriticalPct},

        [ValidateRange(1, 16)]
        [int]
        ${VMInstancesCount},

        [bool]
        ${CheckClientCertRevocation},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMCloudManagementGatewayConnectionPoint
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CloudManagementGatewayName},

        [Parameter(ParameterSetName='SetByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('GatewayConnectionPoint')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Cloud Proxy Connector')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMCollection
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Collection')]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 255)]
        [string]
        ${NewName},

        [string]
        ${Comment},

        [Alias('LimitToCollectionId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${LimitingCollectionId},

        [Alias('LimitToCollectionName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${LimitingCollectionName},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${LimitingCollection},

        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${RefreshSchedule},

        [System.Object]
        ${RefreshType},

        [Alias('DeviceCollectionVariablePrecedence')]
        [ValidateRange(1, 9)]
        [int]
        ${VariablePriority},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMDeviceCollection Set-CMUserCollection -Value Set-CMCollection Set-CMCollection

function Set-CMCollectionMembershipEvaluationComponent
{
    [CmdletBinding(ConfirmImpact='None')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameOrSiteCode')]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByNameOrSiteCode')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByNameOrSiteCode', Mandatory=$true)]
        [Alias('MinutesInterval')]
        [int]
        ${EvaluationMins},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMCollectionPowerManagement
{
    [CmdletBinding(DefaultParameterSetName='ByValueApply', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByNameNone', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameNever', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameApply', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='ByIdNone', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdNever', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdApply', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='ByValueNone', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueNever', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueApply', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Collection','CollectionSettings')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByNameNone', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdNone', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueNone', Mandatory=$true)]
        [switch]
        ${None},

        [Parameter(ParameterSetName='ByNameNever', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdNever', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueNever', Mandatory=$true)]
        [switch]
        ${NeverApply},

        [Parameter(ParameterSetName='ByNameApply')]
        [Parameter(ParameterSetName='ByIdApply')]
        [Parameter(ParameterSetName='ByValueApply')]
        [switch]
        ${Apply},

        [Parameter(ParameterSetName='ByNameApply')]
        [Parameter(ParameterSetName='ByIdApply')]
        [Parameter(ParameterSetName='ByValueApply')]
        [Alias('PeakStartHour')]
        [datetime]
        ${PeakStartTime},

        [Parameter(ParameterSetName='ByNameApply')]
        [Parameter(ParameterSetName='ByIdApply')]
        [Parameter(ParameterSetName='ByValueApply')]
        [datetime]
        ${PeakEndTime},

        [Parameter(ParameterSetName='ByNameApply')]
        [Parameter(ParameterSetName='ByIdApply')]
        [Parameter(ParameterSetName='ByValueApply')]
        [System.Nullable[datetime]]
        ${WakeupTime},

        [Parameter(ParameterSetName='ByNameApply')]
        [Parameter(ParameterSetName='ByIdApply')]
        [Parameter(ParameterSetName='ByValueApply')]
        [System.Object]
        ${PeakPlan},

        [Parameter(ParameterSetName='ByNameApply')]
        [Parameter(ParameterSetName='ByIdApply')]
        [Parameter(ParameterSetName='ByValueApply')]
        [System.Object]
        ${NonPeakPlan},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceRuleAssembly
{
    [CmdletBinding(DefaultParameterSetName='ByCIToken', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByCICulture', Mandatory=$true)]
        [Parameter(ParameterSetName='ByRuleCulture', Mandatory=$true)]
        [switch]
        ${Culture},

        [Parameter(ParameterSetName='ByCICulture', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByCIToken', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ConfigurationItem')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByCIToken', Mandatory=$true)]
        [Parameter(ParameterSetName='ByRuleToken', Mandatory=$true)]
        [switch]
        ${PublicKeyToken},

        [Parameter(ParameterSetName='ByRuleCulture', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByRuleToken', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${Rule},

        [Parameter(ParameterSetName='ByCICulture', Mandatory=$true)]
        [Parameter(ParameterSetName='ByCIToken', Mandatory=$true)]
        [string]
        ${RuleName},

        [System.Object]
        ${ExpressionOperator},

        [bool]
        ${ReportNoncompliance},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewRuleName},

        [switch]
        ${PassThru},

        [bool]
        ${Remediate},

        [Alias('ExpectedValues')]
        [string[]]
        ${ExpectedValue},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceRuleExistential
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [System.Object]
        ${Existence},

        [ValidateSet('IsEquals','NotEquals','GreaterThan','GreaterEquals','LessThan','LessEquals','Between','OneOf','NoneOf')]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(ParameterSetName='ByCI', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ConfigurationItem')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewRuleName},

        [switch]
        ${PassThru},

        [bool]
        ${Remediate},

        [Parameter(ParameterSetName='ByRule', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${Rule},

        [Parameter(ParameterSetName='ByCI', Mandatory=$true)]
        [string]
        ${RuleName},

        [Alias('ExpectedValues')]
        [string[]]
        ${ExpectedValue},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceRuleFileFolderAttribute
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [bool]
        ${Archive},

        [bool]
        ${Compressed},

        [bool]
        ${Encrypted},

        [bool]
        ${Hidden},

        [bool]
        ${ReadOnly},

        [bool]
        ${System},

        [bool]
        ${ReportNoncompliance},

        [Parameter(ParameterSetName='ByCI', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ConfigurationItem')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewRuleName},

        [switch]
        ${PassThru},

        [bool]
        ${Remediate},

        [Parameter(ParameterSetName='ByRule', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${Rule},

        [Parameter(ParameterSetName='ByCI', Mandatory=$true)]
        [string]
        ${RuleName},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceRuleFileFolderDate
{
    [CmdletBinding(DefaultParameterSetName='ByCICreation', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByCICreation', Mandatory=$true)]
        [Parameter(ParameterSetName='ByRuleCreation', Mandatory=$true)]
        [switch]
        ${Creation},

        [Parameter(ParameterSetName='ByCICreation', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByCIModified', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ConfigurationItem')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByRuleCreation', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByRuleModified', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${Rule},

        [Parameter(ParameterSetName='ByCICreation', Mandatory=$true)]
        [Parameter(ParameterSetName='ByCIModified', Mandatory=$true)]
        [string]
        ${RuleName},

        [Alias('ExpectedValues','ExpectedDate','ExpectedDates')]
        [datetime[]]
        ${ExpectedValue},

        [ValidateSet('IsEquals','NotEquals','GreaterThan','LessThan','Between','GreaterEquals','LessEquals','OneOf','NoneOf')]
        [System.Object]
        ${ExpressionOperator},

        [Parameter(ParameterSetName='ByCIModified', Mandatory=$true)]
        [Parameter(ParameterSetName='ByRuleModified', Mandatory=$true)]
        [switch]
        ${Modification},

        [bool]
        ${ReportNoncompliance},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewRuleName},

        [switch]
        ${PassThru},

        [bool]
        ${Remediate},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceRuleFileFolderPermission
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Alias('ExpectedPermissions')]
        [System.Object[]]
        ${AddExpectedPermission},

        [hashtable]
        ${AddExpectedUserAccess},

        [bool]
        ${IsExclusive},

        [string[]]
        ${RemoveExpectedUserAccess},

        [bool]
        ${ReportNoncompliance},

        [Parameter(ParameterSetName='ByCI', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ConfigurationItem')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewRuleName},

        [switch]
        ${PassThru},

        [bool]
        ${Remediate},

        [Parameter(ParameterSetName='ByRule', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${Rule},

        [Parameter(ParameterSetName='ByCI', Mandatory=$true)]
        [string]
        ${RuleName},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceRuleFileFolderSimple
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [ValidateSet('Company','ProductName','SHA1Hash')]
        [System.Object]
        ${PropertyType},

        [System.Object]
        ${ExpressionOperator},

        [bool]
        ${ReportNoncompliance},

        [Parameter(ParameterSetName='ByCI', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ConfigurationItem')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewRuleName},

        [switch]
        ${PassThru},

        [bool]
        ${Remediate},

        [Parameter(ParameterSetName='ByRule', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${Rule},

        [Parameter(ParameterSetName='ByCI', Mandatory=$true)]
        [string]
        ${RuleName},

        [Alias('ExpectedValues')]
        [string[]]
        ${ExpectedValue},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceRuleFileFolderSize
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Alias('ExpectedValues','ExpectedSize','ExpectedSizes')]
        [long[]]
        ${ExpectedValue},

        [ValidateSet('IsEquals','NotEquals','GreaterThan','LessThan','Between','GreaterEquals','LessEquals','OneOf','NoneOf')]
        [System.Object]
        ${ExpressionOperator},

        [bool]
        ${ReportNoncompliance},

        [Parameter(ParameterSetName='ByCI', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ConfigurationItem')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewRuleName},

        [switch]
        ${PassThru},

        [bool]
        ${Remediate},

        [Parameter(ParameterSetName='ByRule', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${Rule},

        [Parameter(ParameterSetName='ByCI', Mandatory=$true)]
        [string]
        ${RuleName},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceRuleRegistryKeyPermission
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Alias('ExpectedPermissions')]
        [System.Object[]]
        ${AddExpectedPermission},

        [hashtable]
        ${AddExpectedUserAccess},

        [bool]
        ${IsExclusive},

        [string[]]
        ${RemoveExpectedUserAccess},

        [bool]
        ${ReportNoncompliance},

        [Parameter(ParameterSetName='ByCI', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ConfigurationItem')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewRuleName},

        [switch]
        ${PassThru},

        [bool]
        ${Remediate},

        [Parameter(ParameterSetName='ByRule', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${Rule},

        [Parameter(ParameterSetName='ByCI', Mandatory=$true)]
        [string]
        ${RuleName},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceRuleValue
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [AllowNull()]
        [string[]]
        ${ExpectedValue},

        [ValidateSet('IsEquals','NotEquals','BeginsWith','NotBeginsWith','EndsWith','NotEndsWith','Contains','NotContains','OneOf','NoneOf')]
        [System.Object]
        ${ExpressionOperator},

        [bool]
        ${ReportNoncompliance},

        [Parameter(ParameterSetName='ByCI', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ConfigurationItem')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewRuleName},

        [switch]
        ${PassThru},

        [bool]
        ${Remediate},

        [Parameter(ParameterSetName='ByRule', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${Rule},

        [Parameter(ParameterSetName='ByCI', Mandatory=$true)]
        [string]
        ${RuleName},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceRuleVersion
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Alias('ExpectedVersion','ExpectedValues','ExpectedVersions')]
        [ValidateNotNullOrEmpty()]
        [version[]]
        ${ExpectedValue},

        [ValidateSet('IsEquals','NotEquals','GreaterThan','LessThan','Between','GreaterEquals','LessEquals','OneOf','NoneOf')]
        [System.Object]
        ${ExpressionOperator},

        [bool]
        ${ReportNoncompliance},

        [Parameter(ParameterSetName='ByCI', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ConfigurationItem')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewRuleName},

        [switch]
        ${PassThru},

        [bool]
        ${Remediate},

        [Parameter(ParameterSetName='ByRule', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${Rule},

        [Parameter(ParameterSetName='ByCI', Mandatory=$true)]
        [string]
        ${RuleName},

        [System.Object]
        ${NoncomplianceSeverity},

        [string]
        ${RuleDescription},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceSettingActiveDirectoryQuery
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Alias('DN')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DistinguishedName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${LdapPrefix},

        [Alias('ADProperty')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Property},

        [Alias('LdapFilter')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SearchFilter},

        [System.Object]
        ${SearchScope},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${SettingName},

        [Alias('NewName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewSettingName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceSettingAssembly
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [ValidateLength(1, 255)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${AssemblyName},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${SettingName},

        [Alias('NewName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewSettingName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceSettingDirectory
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${DirectoryName},

        [bool]
        ${IncludeSubfolders},

        [bool]
        ${Is64Bit},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Path},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${SettingName},

        [Alias('NewName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewSettingName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceSettingFile
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileName},

        [bool]
        ${IncludeSubfolders},

        [bool]
        ${Is64Bit},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Path},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${SettingName},

        [Alias('NewName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewSettingName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceSettingIisMetabase
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Alias('MetabasePath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Path},

        [uint32]
        ${PropertyId},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${SettingName},

        [Alias('NewName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewSettingName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceSettingRegistryKey
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [bool]
        ${Is64Bit},

        [Alias('RegistryKey')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${KeyName},

        [Alias('RegistryHive')]
        [System.Object]
        ${Hive},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${SettingName},

        [Alias('NewName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewSettingName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceSettingRegistryKeyValue
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [bool]
        ${Is64Bit},

        [Alias('RegistryKey')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${KeyName},

        [Alias('RegistryHive')]
        [System.Object]
        ${Hive},

        [Alias('RegistryValueName')]
        [string]
        ${ValueName},

        [bool]
        ${RemediateDword},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${SettingName},

        [Alias('NewName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewSettingName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceSettingScript
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${DiscoveryScriptFile},

        [System.Object]
        ${DiscoveryScriptLanguage},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DiscoveryScriptText},

        [bool]
        ${Is64Bit},

        [bool]
        ${IsPerUser},

        [ValidateNotNullOrEmpty()]
        [string]
        ${RemediationScriptFile},

        [System.Object]
        ${RemediationScriptLanguage},

        [ValidateNotNullOrEmpty()]
        [string]
        ${RemediationScriptText},

        [switch]
        ${RemoveRemediationScript},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${SettingName},

        [Alias('NewName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewSettingName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceSettingSqlQuery
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${ColumnName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DatabaseName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${InstanceName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SqlStatementFile},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SqlStatementText},

        [ValidateSet('All','Default','Named')]
        [System.Object]
        ${InstanceType},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${SettingName},

        [Alias('NewName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewSettingName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceSettingWqlQuery
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${ClassName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Namespace},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Property},

        [ValidateLength(0, 32767)]
        [string]
        ${WhereClause},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${SettingName},

        [Alias('NewName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewSettingName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceSettingXPathQuery
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Alias('AddXmlNamespaces')]
        [hashtable]
        ${AddXmlNamespace},

        [Alias('ClearXmlNamespaces')]
        [switch]
        ${ClearXmlNamespace},

        [bool]
        ${IncludeSubfolders},

        [bool]
        ${Is64Bit},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Path},

        [Alias('RemoveXmlNamespaces')]
        [string[]]
        ${RemoveXmlNamespace},

        [ValidateNotNullOrEmpty()]
        [string]
        ${XmlFileName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${XPathQueryFile},

        [ValidateNotNullOrEmpty()]
        [string]
        ${XPathQueryText},

        [string]
        ${Description},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${SettingName},

        [Alias('NewName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewSettingName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComplianceSupportedPlatform
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMComputerAssociation
{
    [CmdletBinding(DefaultParameterSetName='SearchByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByName', Mandatory=$true)]
        [Alias('RestoreName')]
        [string]
        ${DestinationComputer},

        [Parameter(ParameterSetName='SearchByName', Mandatory=$true)]
        [Alias('SourceName')]
        [string]
        ${SourceComputer},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${MigrationId},

        [Parameter(ParameterSetName='SearchByName')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [System.Object]
        ${MigrationBehavior},

        [Parameter(ParameterSetName='SearchByName')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddMigrationUserName},

        [Parameter(ParameterSetName='SearchByName')]
        [Parameter(ParameterSetName='SearchByIdMandatory')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveMigrationUserName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMConditionalAccessPolicy
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Alias('AddExcludedCollections')]
        [PSTypeName('IResultObject#SMS_Collection;CollectionType=1')]
        [System.Object[]]
        ${AddExcludedCollection},

        [Alias('AddExcludedCollectionIds')]
        [string[]]
        ${AddExcludedCollectionId},

        [Alias('AddExcludedCollectionNames')]
        [string[]]
        ${AddExcludedCollectionName},

        [Alias('AddTargetedCollections')]
        [PSTypeName('IResultObject#SMS_Collection;CollectionType=1')]
        [System.Object[]]
        ${AddTargetedCollection},

        [Alias('AddTargetedCollectionIds')]
        [string[]]
        ${AddTargetedCollectionId},

        [Alias('AddTargetedCollectionNames')]
        [string[]]
        ${AddTargetedCollectionName},

        [Alias('ClearExcludedCollections')]
        [switch]
        ${ClearExcludedCollection},

        [Alias('ClearTargetedCollections')]
        [switch]
        ${ClearTargetedCollection},

        [bool]
        ${DefaultRuleOverride},

        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConditionAccessManagement')]
        [System.Object]
        ${InputObject},

        [string]
        ${NotificationText},

        [switch]
        ${PassThru},

        [Alias('RemoveExcludedCollections')]
        [PSTypeName('IResultObject#SMS_Collection;CollectionType=1')]
        [System.Object[]]
        ${RemoveExcludedCollection},

        [Alias('RemoveExcludedCollectionIds')]
        [string[]]
        ${RemoveExcludedCollectionId},

        [Alias('RemoveExcludedCollectionNames')]
        [string[]]
        ${RemoveExcludedCollectionName},

        [Alias('RemoveTargetedCollections')]
        [PSTypeName('IResultObject#SMS_Collection;CollectionType=1')]
        [System.Object[]]
        ${RemoveTargetedCollection},

        [Alias('RemoveTargetedCollectionIds')]
        [string[]]
        ${RemoveTargetedCollectionId},

        [Alias('RemoveTargetedCollectionNames')]
        [string[]]
        ${RemoveTargetedCollectionName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMOnPremConditionalAccessPolicy -Value Set-CMConditionalAccessPolicy

function Set-CMConfigurationItem
{
    [CmdletBinding(DefaultParameterSetName='SetByIdMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 255)]
        [string]
        ${NewName},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('LocalizedDescription')]
        [ValidateLength(0, 512)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddCategory},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveCategory},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('DesiredConfigurationDigestPath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DigestPath},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DigestXml},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [ValidateNotNull()]
        [System.Object]
        ${Digest},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMConfigurationPolicyDeployment
{
    [CmdletBinding(DefaultParameterSetName='SetPoicyByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetUSMPolicyDeploymentByNameMandatory', Mandatory=$true)]
        [string]
        ${UserDataAndProfileName},

        [Parameter(ParameterSetName='SetUSMPolicyDeploymentByIdMandatory', Mandatory=$true)]
        [string]
        ${UserDataAndProfileId},

        [Parameter(ParameterSetName='SetRemoteConnectionDeploymentByNameMandatory', Mandatory=$true)]
        [string]
        ${RemoteConnectionProfileName},

        [Parameter(ParameterSetName='SetRemoteConnectionDeploymentByIdMandatory', Mandatory=$true)]
        [string]
        ${RemoteConnectionProfileId},

        [Parameter(ParameterSetName='SetFWPolicyDeploymentByNameMandatory', Mandatory=$true)]
        [string]
        ${FirewallPolicyName},

        [Parameter(ParameterSetName='SetFWPolicyDeploymentByIdMandatory', Mandatory=$true)]
        [string]
        ${FirewallPolicyId},

        [Parameter(ParameterSetName='SetPoicyByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('UserDataAndProfile','FirewallPolicy','RemoteConnectionProfile','DeploymentSummary','Assignment')]
        [System.Object]
        ${InputObject},

        [bool]
        ${EnableEnforcement},

        [bool]
        ${OverrideServiceWindow},

        [bool]
        ${GenerateAlert},

        [ValidateRange(0, 100)]
        [int]
        ${ParameterValue},

        [datetime]
        ${PostponeDateTime},

        [bool]
        ${MonitoredByScom},

        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [switch]
        ${PassThru},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMDatabaseProperty
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [bool]
        ${EnableDataCompression},

        [ValidateRange(1, 65535)]
        [int]
        ${SqlServerServiceBrokerPort},

        [Alias('DataRetentionPeriodDays')]
        [ValidateRange(1, 14)]
        [int]
        ${DataRetentionDays},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMDatabaseReplicationLinkProperty
{
    [CmdletBinding(DefaultParameterSetName='SetBySiteCodeMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetBySiteCodeMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SetScheduleBySiteCodeMandatory', Mandatory=$true)]
        [Alias('Site1')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ParentSiteCode},

        [Parameter(ParameterSetName='SetBySiteCodeMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SetScheduleBySiteCodeMandatory', Mandatory=$true)]
        [Alias('Site2')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ChildSiteCode},

        [Parameter(ParameterSetName='SetBySiteCodeMandatory')]
        [bool]
        ${EnableDistributedViewForHardwareInventory},

        [Parameter(ParameterSetName='SetBySiteCodeMandatory')]
        [bool]
        ${EnableDistributedViewForSoftwareInventory},

        [Parameter(ParameterSetName='SetBySiteCodeMandatory')]
        [bool]
        ${EnableDistributedViewForStatusMessage},

        [Parameter(ParameterSetName='SetBySiteCodeMandatory')]
        [Alias('ReplicationDataTrafficSummarizationIntervalMinutes')]
        [ValidateRange(5, 60)]
        [int]
        ${ReplicationDataTrafficSummarizationMins},

        [Parameter(ParameterSetName='SetBySiteCodeMandatory')]
        [ValidateRange(1, 300)]
        [int]
        ${DegradedLinkStatusRetryCount},

        [Parameter(ParameterSetName='SetBySiteCodeMandatory')]
        [ValidateRange(1, 300)]
        [int]
        ${FailedLinkStatusRetryCount},

        [Parameter(ParameterSetName='SetBySiteCodeMandatory')]
        [bool]
        ${GenerateReplicationDownAlert},

        [Parameter(ParameterSetName='SetBySiteCodeMandatory')]
        [Alias('ReplicationDownAlertThresholdMinutes')]
        [ValidateRange(1, 32767)]
        [int]
        ${ReplicationDownAlertMins},

        [Parameter(ParameterSetName='SetScheduleBySiteCodeMandatory', Mandatory=$true)]
        [System.Object[]]
        ${DaysOfWeek},

        [Parameter(ParameterSetName='SetScheduleBySiteCodeMandatory', Mandatory=$true)]
        [Alias('TimePeriodStart','ReplicationStartHour')]
        [ValidateRange(0, 23)]
        [int]
        ${ReplicationStartHr},

        [Parameter(ParameterSetName='SetScheduleBySiteCodeMandatory', Mandatory=$true)]
        [Alias('TimePeriodEnd','ReplicationEndHour')]
        [ValidateRange(0, 23)]
        [int]
        ${ReplicationEndHr},

        [Parameter(ParameterSetName='SetScheduleBySiteCodeMandatory', Mandatory=$true)]
        [System.Object]
        ${AvailabilityLevel},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMDataWarehouseServicePoint
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DataWarehouseDatabaseServerName},

        [string]
        ${DataWarehouseInstanceName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DataWarehouseDatabaseName},

        [ValidateRange(1, 65535)]
        [int]
        ${DataWarehouseSqlPort},

        [ValidateNotNullOrEmpty()]
        [datetime]
        ${StartAftertime},

        [ValidateRange(1, 4)]
        [int]
        ${WeekFrequency},

        [ValidateRange(1, 127)]
        [System.Object]
        ${DaysOfWeek},

        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [ValidateRange(60, 2186)]
        [int]
        ${DataRetentionDays},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DataWarehouseServicePoint')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=Data Warehouse Service Point')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='SetByValuePriority', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByNamePropertyOtherInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByNamePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyAppVInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyMacInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWmInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWindowsStoreInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWebAppInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyMobileMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMobileMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyOtherInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByValuePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyAppVInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyMacInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWmInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsStoreInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWebAppInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWindowsPhoneStoreInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsPhoneStoreInstaller')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${AdministratorComment},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByNamePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyWindows8Installer')]
        [Alias('AllowClientsToShareContentOnSameSubnet')]
        [bool]
        ${EnableBranchCache},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByNamePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByNamePropertyAppVInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByValuePropertyAppVInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyAppV5xInstaller')]
        [Alias('AllowClientsToUseFallbackSourceLocationForContent')]
        [bool]
        ${EnableContentLocationFallback},

        [Parameter(ParameterSetName='SetByNamePropertyWmInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWmInstaller')]
        [Alias('AllowUserToUninstall','AllowsUsersToUninstallThisContent')]
        [bool]
        ${EnableUserUninstall},

        [Parameter(ParameterSetName='SetByNamePropertyAppV5xInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyAppV5xInstaller', Mandatory=$true)]
        [switch]
        ${AppV5xInstaller},

        [Parameter(ParameterSetName='SetByNamePropertyWindowsPhoneStoreInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsPhoneStoreInstaller', Mandatory=$true)]
        [switch]
        ${WindowsPhoneStoreInstaller},

        [Parameter(ParameterSetName='SetByNamePropertyAppVInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyAppVInstaller', Mandatory=$true)]
        [switch]
        ${AppVInstaller},

        [Parameter(ParameterSetName='SetByNamePriority', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByIdPriority', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyOtherInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyWindows8Installer', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyAppV5xInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyAppVInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyMacInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyWmInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyWindowsStoreInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyWebAppInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyMobileMsiConfigureRule', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyWindowsPhoneStoreInstaller', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='SetByNamePropertyWindowsStoreInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsStoreInstaller')]
        [string]
        ${ApplicationNameInWindowsStore},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByNamePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByNamePropertyOtherInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyMacInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWmInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyMobileMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByNamePropertyWindowsPhoneStoreInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyMobileMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByValuePropertyOtherInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyMacInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWmInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsPhoneStoreInstaller')]
        [Alias('InstallationFileLocation')]
        [string]
        ${ContentLocation},

        [Parameter(ParameterSetName='SetByNamePropertyWindowsStoreInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsStoreInstaller', Mandatory=$true)]
        [Alias('DeepLinkInstaller')]
        [switch]
        ${WindowsStoreInstaller},

        [Parameter(ParameterSetName='SetByIdPriority', Mandatory=$true)]
        [Alias('CIId','CI_ID','Id')]
        [ValidateNotNullOrEmpty()]
        [int]
        ${DeploymentTypeId},

        [Parameter(ParameterSetName='SetByNamePriority', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyOtherInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyWindows8Installer', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyAppV5xInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyAppVInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyMacInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyWmInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyWindowsStoreInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyWebAppInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyMobileMsiConfigureRule', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNamePropertyWindowsPhoneStoreInstaller', Mandatory=$true)]
        [Alias('LocalizedDisplayName','Name')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentTypeName},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [switch]
        ${DetectDeploymentTypeByCustomScript},

        [Parameter(ParameterSetName='SetByNamePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyAppVInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyAppVInstaller')]
        [bool]
        ${EnablePeerToPeerContentDistribution},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [Alias('EstimatedInstallationTimeMinutes')]
        [ValidateRange(0, 32767)]
        [int]
        ${EstimatedInstallationTimeMins},

        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyOtherInstaller', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyWindows8Installer', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyAppV5xInstaller', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyAppVInstaller', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyMacInstaller', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyWmInstaller', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsStoreInstaller', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyWebAppInstaller', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetByValuePriority', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyMobileMsiConfigureRule', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsPhoneStoreInstaller', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeploymentType')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_DeploymentType')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [System.Object]
        ${InstallationBehaviorType},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByNamePropertyMacInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMacInstaller')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 1024)]
        [string]
        ${InstallationProgram},

        [Parameter(ParameterSetName='SetByNamePropertyMobileMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMobileMsiConfigureRule')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 512)]
        [string]
        ${InstallationCommandLine},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [System.Object]
        ${InstallationProgramVisibility},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(0, 512)]
        [string]
        ${InstallationStartIn},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByNamePropertyOtherInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByNamePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyAppVInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyMacInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWmInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWindowsStoreInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWebAppInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyOtherInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByValuePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyAppVInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyMacInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWmInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsStoreInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWebAppInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWindowsPhoneStoreInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsPhoneStoreInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyMobileMsiConfigureRule', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyMobileMsiConfigureRule', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Language},

        [Parameter(ParameterSetName='SetByNamePropertyAppVInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyAppVInstaller')]
        [bool]
        ${LoadContentIntoAppVCacheBeforeLaunch},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [System.Object]
        ${LogonRequirementType},

        [Parameter(ParameterSetName='SetByNamePropertyMacInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyMacInstaller', Mandatory=$true)]
        [switch]
        ${MacInstaller},

        [Parameter(ParameterSetName='SetByNamePropertyMacInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyMacInstaller')]
        [System.Object]
        ${MacRebootBehavior},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByNamePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByNamePropertyWindowsStoreInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsStoreInstaller')]
        [Alias('MaximumAllowedRunTimeMinutes')]
        [ValidateRange(1, 65535)]
        [int]
        ${MaximumAllowedRunTimeMins},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule', Mandatory=$true)]
        [switch]
        ${MsiOrScriptInstaller},

        [Parameter(ParameterSetName='SetByNamePropertyMobileMsiConfigureRule', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyMobileMsiConfigureRule', Mandatory=$true)]
        [switch]
        ${MobileMsiInstaller},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByNamePropertyOtherInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByNamePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyAppVInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyMacInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWmInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWindowsStoreInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWebAppInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyMobileMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByNamePropertyWindowsPhoneStoreInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyMobileMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyOtherInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByValuePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyAppVInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyMacInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWmInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsStoreInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWebAppInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsPhoneStoreInstaller')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewDeploymentTypeName},

        [Parameter(ParameterSetName='SetByNamePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyAppVInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyAppVInstaller')]
        [System.Object]
        ${OnFastNetworkMode},

        [Parameter(ParameterSetName='SetByNamePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByNamePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByNamePropertyAppVInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByValuePropertyAppVInstaller')]
        [System.Object]
        ${OnSlowNetworkMode},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByNamePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByNamePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyAppVInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByValuePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyAppVInstaller')]
        [bool]
        ${PersistContentInClientCache},

        [Parameter(ParameterSetName='SetByNamePriority')]
        [Parameter(ParameterSetName='SetByIdPriority')]
        [Parameter(ParameterSetName='SetByValuePriority')]
        [System.Object]
        ${Priority},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [string]
        ${ProductCode},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [System.Object]
        ${RebootBehavior},

        [Parameter(ParameterSetName='SetByNamePropertyWindowsStoreInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsStoreInstaller')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RemoteComputerName},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [Alias('RequiresUserInteraction')]
        [bool]
        ${RequireUserInteraction},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [Alias('RunInstallationAndUninstallProgramAs32BitProcessOn64BitClient')]
        [bool]
        ${Force32BitInstaller},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [Alias('RunScriptAs32BitProcessOn64BitClient')]
        [bool]
        ${Force32BitDetectionScript},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ScriptContent},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [Microsoft.ConfigurationManagement.AdminConsole.CreateDT.CreateDtConstantsUtilities+ScriptLanguage]
        ${ScriptType},

        [Parameter(ParameterSetName='SetByNamePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByValuePropertyWindows8Installer')]
        [bool]
        ${TriggerVpn},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 1024)]
        [string]
        ${UninstallProgram},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(0, 512)]
        [string]
        ${UninstallStartIn},

        [Parameter(ParameterSetName='SetByNamePropertyWmInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyWmInstaller', Mandatory=$true)]
        [Alias('WMInstaller')]
        [switch]
        ${WindowsMobileInstaller},

        [Parameter(ParameterSetName='SetByNamePropertyWebAppInstaller', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyWebAppInstaller', Mandatory=$true)]
        [switch]
        ${WebAppInstaller},

        [Parameter(ParameterSetName='SetByNamePropertyWindows8Installer', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByValuePropertyWindows8Installer', Mandatory=$true)]
        [switch]
        ${Windows8AppInstaller},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByNamePropertyOtherInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByNamePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyAppVInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyMacInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWmInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWindowsStoreInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWebAppInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyMobileMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMobileMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyOtherInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByValuePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyAppVInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyMacInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWmInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsStoreInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWebAppInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWindowsPhoneStoreInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsPhoneStoreInstaller')]
        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByNamePropertyOtherInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByNamePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyAppVInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyMacInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWmInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWindowsStoreInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWebAppInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyMobileMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMobileMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyOtherInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByValuePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyAppVInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyMacInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWmInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsStoreInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWebAppInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWindowsPhoneStoreInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsPhoneStoreInstaller')]
        [System.Object[]]
        ${RemoveRequirement},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByNamePropertyOtherInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByNamePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyAppVInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyMacInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWmInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWindowsStoreInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWebAppInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyMobileMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMobileMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyOtherInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindows8Installer')]
        [Parameter(ParameterSetName='SetByValuePropertyAppV5xInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyAppVInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyMacInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWmInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsStoreInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWebAppInstaller')]
        [Parameter(ParameterSetName='SetByNamePropertyWindowsPhoneStoreInstaller')]
        [Parameter(ParameterSetName='SetByValuePropertyWindowsPhoneStoreInstaller')]
        [switch]
        ${ClearRequirements},

        [Parameter(ParameterSetName='SetByNamePropertyMsiConfigureRule')]
        [Parameter(ParameterSetName='SetByValuePropertyMsiConfigureRule')]
        [string]
        ${SourceUpdateProductCode},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMDeploymentTypeDependency
{
    [CmdletBinding(DefaultParameterSetName='GeneralConfig', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_DeploymentType')]
        [System.Object]
        ${DeploymentTypeDependency},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Group')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='IncreasePriority', Mandatory=$true)]
        [switch]
        ${IncreasePriority},

        [Parameter(ParameterSetName='DecreasePriority', Mandatory=$true)]
        [switch]
        ${DecreasePriority},

        [Parameter(ParameterSetName='GeneralConfig', Mandatory=$true)]
        [bool]
        ${IsAutoInstall},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMDeploymentTypeDependencyGroup
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Group')]
        [System.Object]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('GroupName','NewGroupName')]
        [string]
        ${NewName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMDeploymentTypeSupersedence
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SupersededDeploymentType')]
        [PSTypeName('IResultObject#SMS_DeploymentType')]
        [System.Object]
        ${InputObject},

        [bool]
        ${IsUninstall},

        [Parameter(Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_DeploymentType')]
        [System.Object]
        ${SupersedingDeploymentType},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMDeviceCategory
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('CategoryId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Category')]
        [PSTypeName('IResultObject#SMS_MDMDeviceCategory')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 80)]
        [string]
        ${NewName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMDeviceCollectionVariable
{
    [CmdletBinding(DefaultParameterSetName='SetByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Collection')]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetByIdMandatory', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='SetByNameMandatory', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='SetByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByNameMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true)]
        [string]
        ${VariableName},

        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [string]
        ${NewVariableName},

        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewVariableValue},

        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [bool]
        ${IsMask},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMDeviceOwnership
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceName},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('ResourceId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceId},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_CombinedDeviceResources')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true)]
        [System.Object]
        ${OwnershipType},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMDeviceVariable
{
    [CmdletBinding(DefaultParameterSetName='SetByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Device')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetByIdMandatory', Mandatory=$true)]
        [string]
        ${ResourceId},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${DeviceName},

        [Parameter(ParameterSetName='SetByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${VariableName},

        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [string]
        ${NewVariableName},

        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewVariableValue},

        [Parameter(ParameterSetName='SetByIdMandatory')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [bool]
        ${IsMask},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMDiscoveryMethod
{
    [CmdletBinding(DefaultParameterSetName='SearchByActiveDirectoryForestDiscovery', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNetworkDiscovery', Mandatory=$true)]
        [switch]
        ${NetworkDiscovery},

        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery', Mandatory=$true)]
        [switch]
        ${ActiveDirectorySystemDiscovery},

        [Parameter(ParameterSetName='SearchByActiveDirectoryUserDiscovery', Mandatory=$true)]
        [switch]
        ${ActiveDirectoryUserDiscovery},

        [Parameter(ParameterSetName='SearchByActiveDirectoryGroupDiscovery', Mandatory=$true)]
        [switch]
        ${ActiveDirectoryGroupDiscovery},

        [Parameter(ParameterSetName='SearchByActiveDirectoryForestDiscovery', Mandatory=$true)]
        [switch]
        ${ActiveDirectoryForestDiscovery},

        [Parameter(ParameterSetName='SearchByHeartbeat', Mandatory=$true)]
        [switch]
        ${Heartbeat},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByNetworkDiscovery')]
        [Parameter(ParameterSetName='SearchByHeartbeat')]
        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryUserDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryGroupDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryForestDiscovery')]
        [bool]
        ${Enabled},

        [Parameter(ParameterSetName='SearchByActiveDirectoryGroupDiscovery')]
        [System.Object[]]
        ${AddGroupDiscoveryScope},

        [Parameter(ParameterSetName='SearchByActiveDirectoryGroupDiscovery')]
        [string[]]
        ${RemoveGroupDiscoveryScope},

        [Parameter(ParameterSetName='SearchByNetworkDiscovery')]
        [bool]
        ${SlowNetworkSpeed},

        [Parameter(ParameterSetName='SearchByNetworkDiscovery')]
        [System.Object]
        ${NetworkDiscoveryType},

        [Parameter(ParameterSetName='SearchByHeartbeat')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryForestDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryUserDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryGroupDiscovery')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${PollingSchedule},

        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryUserDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryGroupDiscovery')]
        [bool]
        ${EnableDeltaDiscovery},

        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryUserDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryGroupDiscovery')]
        [Alias('DeltaDiscoveryIntervalMinutes','DeltaDiscoveryIntervalMins')]
        [ValidateRange(5, 60)]
        [int]
        ${DeltaDiscoveryMins},

        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryUserDiscovery')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddAdditionalAttribute},

        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryUserDiscovery')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveAdditionalAttribute},

        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryGroupDiscovery')]
        [bool]
        ${EnableFilteringExpiredLogon},

        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryGroupDiscovery')]
        [ValidateRange(14, 720)]
        [int]
        ${TimeSinceLastLogonDays},

        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryGroupDiscovery')]
        [bool]
        ${EnableFilteringExpiredPassword},

        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryGroupDiscovery')]
        [ValidateRange(30, 720)]
        [int]
        ${TimeSinceLastPasswordUpdateDays},

        [Parameter(ParameterSetName='SearchByActiveDirectoryGroupDiscovery')]
        [Alias('DiscoverDistributionGroupsMembership')]
        [bool]
        ${DiscoverDistributionGroupMembership},

        [Parameter(ParameterSetName='SearchByActiveDirectoryForestDiscovery')]
        [bool]
        ${EnableActiveDirectorySiteBoundaryCreation},

        [Parameter(ParameterSetName='SearchByActiveDirectoryForestDiscovery')]
        [bool]
        ${EnableSubnetBoundaryCreation},

        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryUserDiscovery')]
        [string[]]
        ${ActiveDirectoryContainer},

        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryUserDiscovery')]
        [switch]
        ${Recursive},

        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryUserDiscovery')]
        [bool]
        ${EnableRecursive},

        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryUserDiscovery')]
        [Alias('IncludeGroups')]
        [switch]
        ${IncludeGroup},

        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryUserDiscovery')]
        [Alias('EnableIncludeGroups')]
        [bool]
        ${EnableIncludeGroup},

        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryUserDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryGroupDiscovery')]
        [switch]
        ${ClearActiveDirectoryContainer},

        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryUserDiscovery')]
        [Alias('RemoveActiveDirectoryContainers')]
        [string[]]
        ${RemoveActiveDirectoryContainer},

        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryUserDiscovery')]
        [Alias('AddActiveDirectoryContainers')]
        [string[]]
        ${AddActiveDirectoryContainer},

        [Parameter(ParameterSetName='SearchByActiveDirectorySystemDiscovery')]
        [Parameter(ParameterSetName='SearchByActiveDirectoryUserDiscovery')]
        [Alias('DiscoveryAccountUserName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMDistributionPoint
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('DistributionPoint')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Distribution Point')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SetByName')]
        [string]
        ${SiteCode},

        [string]
        ${Description},

        [System.Object]
        ${ClientCommunicationType},

        [System.Object]
        ${ClientConnectionType},

        [Alias('EnableCloudGateway')]
        [bool]
        ${AllowProxyTraffic},

        [bool]
        ${EnableAnonymous},

        [datetime]
        ${CertificateExpirationTimeUtc},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CertificatePath},

        [securestring]
        ${CertificatePassword},

        [bool]
        ${AllowPreStaging},

        [Alias('EnablePxeSupport')]
        [bool]
        ${EnablePxe},

        [bool]
        ${KeepWds},

        [Alias('AllowRespondIncomingPxeRequest')]
        [bool]
        ${AllowPxeResponse},

        [bool]
        ${EnableUnknownComputerSupport},

        [bool]
        ${EnableNonWdsPxe},

        [Alias('ComputersUsePxePassword')]
        [securestring]
        ${PxePassword},

        [System.Object]
        ${UserDeviceAffinity},

        [switch]
        ${RespondToAllNetwork},

        [string[]]
        ${MacAddressForRespondingPxeRequest},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddMacAddressForRespondingPxeRequest},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveMacAddressForRespondingPxeRequest},

        [switch]
        ${ClearMacAddressForRespondingPxeRequest},

        [Alias('PxeServerResponseDelaySeconds')]
        [ValidateRange(0, 32)]
        [int]
        ${PxeServerResponseDelaySec},

        [bool]
        ${EnableMulticast},

        [switch]
        ${UseComputerAccount},

        [string]
        ${UserName},

        [switch]
        ${UseAnyRangeIP},

        [ValidateNotNullOrEmpty()]
        [string]
        ${StartIPAddress},

        [ValidateNotNullOrEmpty()]
        [string]
        ${EndIPAddress},

        [ValidateRange(1, 65535)]
        [int]
        ${StartUdpPort},

        [ValidateRange(1, 65535)]
        [int]
        ${EndUdpPort},

        [System.Object]
        ${ClientTransferRate},

        [ValidateRange(1, 10000)]
        [int]
        ${MulticastMaximumClientCount},

        [bool]
        ${EnableScheduledMulticast},

        [Alias('SessionStartDelayMinutes')]
        [ValidateRange(1, 99)]
        [int]
        ${SessionStartDelayMins},

        [ValidateRange(1, 99)]
        [int]
        ${MinimumSessionSize},

        [Alias('EnableValidateContent')]
        [bool]
        ${EnableContentValidation},

        [Alias('ValidateContentSchedule')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${ContentValidationSchedule},

        [System.Object]
        ${ContentMonitoringPriority},

        [bool]
        ${EnablePullDP},

        [Alias('SourceDistributionPoints')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${SourceDistributionPoint},

        [Alias('SourceDPRanks')]
        [ValidateRange(1, 100)]
        [int[]]
        ${SourceDPRank},

        [bool]
        ${AllowFallbackForContent},

        [Alias('AddBoundaryGroupNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddBoundaryGroupName},

        [Alias('RemoveBoundaryGroupNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveBoundaryGroupName},

        [bool]
        ${EnableBranchCache},

        [switch]
        ${PassThru},

        [bool]
        ${EnableLedbat},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMDistributionPointGroup
{
    [CmdletBinding(DefaultParameterSetName='SetByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('GroupId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_DistributionPointGroup')]
        [System.Object]
        ${InputObject},

        [string]
        ${Description},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMDriver
{
    [CmdletBinding(DefaultParameterSetName='SetDriverByResultObject', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetDriverByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetDriverById', Mandatory=$true)]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetDriverByResultObject', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Driver')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 127)]
        [string]
        ${NewName},

        [string]
        ${Description},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DriverSource},

        [bool]
        ${EnableAndAllowInstall},

        [PSTypeName('IResultObject#SMS_CategoryInstance')]
        [System.Object[]]
        ${AdministrativeCategory},

        [Alias('AddAdministrativeCategories')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_CategoryInstance')]
        [System.Object[]]
        ${AddAdministrativeCategory},

        [Alias('RemoveAdministrativeCategories')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_CategoryInstance')]
        [System.Object[]]
        ${RemoveAdministrativeCategory},

        [Alias('ClearAdministrativeCategories')]
        [switch]
        ${ClearAdministrativeCategory},

        [switch]
        ${RunOnAnyPlatform},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${SupportedPlatformName},

        [Alias('AddSupportedPlatformNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddSupportedPlatformName},

        [Alias('RemoveSupportedPlatformNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveSupportedPlatformName},

        [Alias('ClearSupportedPlatformNames')]
        [switch]
        ${ClearSupportedPlatformName},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_DriverPackage')]
        [System.Object[]]
        ${AddDriverPackage},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_DriverPackage')]
        [System.Object[]]
        ${RemoveDriverPackage},

        [Alias('UpdateDistributionPointsForDriverPackage','UpdateDriverDistributionPoints')]
        [bool]
        ${UpdateDriverDistributionPoint},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_BootImagePackage')]
        [System.Object[]]
        ${AddBootImagePackage},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_BootImagePackage')]
        [System.Object[]]
        ${RemoveBootImagePackage},

        [Alias('UpdateDistributionPointsForBootImagePackage','UpdateBootImageDistributionPoints')]
        [bool]
        ${UpdateBootImageDistributionPoint},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMDriverBootImage
{
    [CmdletBinding(DefaultParameterSetName='SetDriverBootImagesById_Id', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [System.Object]
        ${SetDriveBootImageAction},

        [Parameter(ParameterSetName='SetDriverBootImagesById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDriverBootImagesById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDriverBootImagesById_Object', Mandatory=$true)]
        [Alias('Id','CIId','CI_ID')]
        [int]
        ${DriverId},

        [Parameter(ParameterSetName='SetDriverBootImagesByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDriverBootImagesByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDriverBootImagesByName_Object', Mandatory=$true)]
        [string]
        ${DriverName},

        [Parameter(ParameterSetName='SetDriverBootImagesByObject_Id', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetDriverBootImagesByObject_Name', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetDriverBootImagesByObject_Object', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Driver')]
        [System.Object]
        ${Driver},

        [Parameter(ParameterSetName='SetDriverBootImagesById_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDriverBootImagesByName_Id', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDriverBootImagesByObject_Id', Mandatory=$true)]
        [string]
        ${BootImageId},

        [Parameter(ParameterSetName='SetDriverBootImagesById_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDriverBootImagesByName_Name', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDriverBootImagesByObject_Name', Mandatory=$true)]
        [string]
        ${BootImageName},

        [Parameter(ParameterSetName='SetDriverBootImagesById_Object', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDriverBootImagesByName_Object', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDriverBootImagesByObject_Object', Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_BootImagePackage')]
        [System.Object]
        ${BootImage},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMDriverPackage
{
    [CmdletBinding(DefaultParameterSetName='SetByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('PackageId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_DriverPackage')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [string]
        ${Description},

        [string]
        ${Version},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DriverPackageSource},

        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${DistributionPointUpdateSchedule},

        [Alias('DisconnectUsersFromDistributionPoints')]
        [bool]
        ${DisconnectUserFromDistributionPoint},

        [Alias('DisconnectUsersFromDistributionPointsRetries')]
        [ValidateRange(0, 99)]
        [uint32]
        ${DisconnectUserFromDistributionPointRetryCount},

        [Alias('DisconnectUsersFromDistributionPointsMinutes')]
        [ValidateRange(0, 59)]
        [uint32]
        ${DisconnectUserFromDistributionPointMins},

        [string]
        ${CustomPackageShareName},

        [Alias('CopyToPackageShareOnDistributionPoints')]
        [bool]
        ${CopyToPackageShareOnDistributionPoint},

        [bool]
        ${MulticastAllow},

        [bool]
        ${MulticastEncrypt},

        [bool]
        ${MulticastTransferOnly},

        [System.Object]
        ${Priority},

        [Alias('SendToPreferredDistributionPoints')]
        [bool]
        ${SendToPreferredDistributionPoint},

        [System.Object]
        ${PrestageBehavior},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMEmailNotificationComponent
{
    [CmdletBinding(DefaultParameterSetName='Enable', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='Disable', Mandatory=$true, Position=0)]
        [switch]
        ${DisableEmailNotification},

        [Parameter(ParameterSetName='Enable', Mandatory=$true, Position=0)]
        [switch]
        ${EnableEmailNotification},

        [Parameter(ParameterSetName='Enable', Mandatory=$true)]
        [string]
        ${SmtpServerFqdn},

        [Parameter(ParameterSetName='Enable')]
        [bool]
        ${UseSsl},

        [Parameter(ParameterSetName='Enable')]
        [ValidateRange(1, 65535)]
        [int]
        ${Port},

        [Parameter(ParameterSetName='Enable', Mandatory=$true)]
        [System.Object]
        ${TypeOfAuthentication},

        [Parameter(ParameterSetName='Enable')]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='Enable', Mandatory=$true)]
        [string]
        ${SendFrom},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMEmailProfile
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [ValidateSet('domain','ntdomain')]
        [string]
        ${AccountDomainActiveDirectory},

        [string]
        ${AccountDomainCustom},

        [ValidateNotNullOrEmpty()]
        [string]
        ${AccountName},

        [ValidateSet('mail','sAMAccountName','userPrincipalName')]
        [string]
        ${AccountUserNameType},

        [bool]
        ${AllowMessageMove},

        [bool]
        ${AllowThirdPartyApplication},

        [string]
        ${Description},

        [ValidateSet('mail','userPrincipalName')]
        [string]
        ${EmailAddressType},

        [bool]
        ${EnableSmime},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${Id},

        [System.Object]
        ${IdentityCertificate},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_CommunicationsProvisioningSettings')]
        [System.Object]
        ${InputObject},

        [System.Nullable[System.Object]]
        ${MailSyncDays},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${Name},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [switch]
        ${PassThru},

        [System.Object]
        ${SigningCertificate},

        [Alias('SupportedPlatforms')]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Alias('SyncContentTypes')]
        [System.Object]
        ${SyncContentType},

        [bool]
        ${SynchronizeRecentlyUsed},

        [System.Nullable[System.Object]]
        ${SyncSchedule},

        [bool]
        ${UseSsl},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMEndpointProtectionPoint
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetByValue', Mandatory=$true)]
        [System.Object]
        ${ProtectionService},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('EndpointProtectionPoint')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Endpoint Protection Point')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMEndpointProtectionSummarizationSchedule
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='Set', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [int]
        ${Interval},

        [Parameter(ParameterSetName='Set')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Unit},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMEnrollmentPoint
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [switch]
        ${UseComputerAccount},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('EnrollmentPoint')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Enrollment Server')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMExchangeServer
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [string]
        ${SiteCode},

        [Parameter(Mandatory=$true)]
        [string]
        ${ServerAddress},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewServerAddress},

        [bool]
        ${IsHosted},

        [ValidateNotNullOrEmpty()]
        [System.Collections.Generic.Dictionary[string,string][]]
        ${ExchangeClientAccessServer},

        [string]
        ${UserName},

        [string]
        ${NotificationUserName},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${FullSyncSchedule},

        [Alias('DeltaSyncInterval')]
        [ValidateRange(5, 1440)]
        [int]
        ${DeltaSyncMins},

        [Alias('MaximumInactiveDay')]
        [ValidateRange(1, 365)]
        [int]
        ${MaximumInactiveDays},

        [switch]
        ${FindAll},

        [Alias('ActiveDirectoryContainers')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${ActiveDirectoryContainer},

        [System.Object]
        ${GeneralSetting},

        [System.Object]
        ${PasswordSetting},

        [System.Object]
        ${EmailManagementSetting},

        [System.Object]
        ${SecuritySetting},

        [System.Object]
        ${ApplicationSetting},

        [bool]
        ${AllowExternalDeviceManagement},

        [bool]
        ${EnableAccessRule},

        [System.Object]
        ${AccessLevel},

        [Alias('AccessRules')]
        [System.Object[]]
        ${AccessRule},

        [Alias('EmailAddresses')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${EmailAddress},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMFallbackStatusPoint
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('FallbackStatusPoint')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Fallback Status Point')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SetByValue')]
        [Parameter(ParameterSetName='SetByName')]
        [Alias('StateMessagesCount')]
        [ValidateRange(100, 100000)]
        [int]
        ${StateMessageCount},

        [Parameter(ParameterSetName='SetByValue')]
        [Parameter(ParameterSetName='SetByName')]
        [ValidateRange(60, 86400)]
        [int]
        ${ThrottleSec},

        [Parameter(ParameterSetName='SetByValue')]
        [Parameter(ParameterSetName='SetByName')]
        [Alias('ThrottleMinutesInterval')]
        [ValidateRange(1, 1440)]
        [int]
        ${ThrottleMins},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMFileReplicationRoute
{
    [CmdletBinding(DefaultParameterSetName='SetFileReplicationAccount', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('SiteCode')]
        [string]
        ${SourceSiteCode},

        [Parameter(Mandatory=$true)]
        [Alias('DesSiteCode','DestSiteCode','ServerFqdn')]
        [string]
        ${DestinationSiteCode},

        [Parameter(ParameterSetName='SetFileReplicationAccount')]
        [Parameter(ParameterSetName='SetFileReplicationRouteByUnlimited')]
        [Parameter(ParameterSetName='SetFileReplicationRouteByPulseMode')]
        [Parameter(ParameterSetName='SetFileReplicationRouteByLimited')]
        [string]
        ${FileReplicationAccountName},

        [Parameter(ParameterSetName='SetFileReplicationRouteByUnlimited', Mandatory=$true)]
        [switch]
        ${Unlimited},

        [Parameter(ParameterSetName='SetFileReplicationRouteByPulseMode', Mandatory=$true)]
        [switch]
        ${PulseMode},

        [Parameter(ParameterSetName='SetFileReplicationRouteByPulseMode')]
        [ValidateRange(1, 256)]
        [int]
        ${DataBlockSizeKB},

        [Parameter(ParameterSetName='SetFileReplicationRouteByPulseMode')]
        [Alias('DelayBetweenDataBlocksSeconds','DelayBetweenDataBlocksSec')]
        [ValidateRange(1, 30)]
        [int]
        ${DelayBetweenDataBlockSec},

        [Parameter(ParameterSetName='SetFileReplicationRouteByLimited', Mandatory=$true)]
        [switch]
        ${Limited},

        [Parameter(ParameterSetName='SetFileReplicationRouteByLimited')]
        [Alias('LimitedTimePeriodStart','LimitedBeginHour')]
        [ValidateRange(0, 23)]
        [int]
        ${LimitedBeginHr},

        [Parameter(ParameterSetName='SetFileReplicationRouteByLimited')]
        [Alias('LimitedTimePeriodEnd','LimitedEndHour')]
        [ValidateRange(0, 23)]
        [int]
        ${LimitedEndHr},

        [Parameter(ParameterSetName='SetFileReplicationRouteByLimited')]
        [Alias('LimitAvailableBandwidthPercentage')]
        [ValidateRange(1, 100)]
        [int]
        ${LimitAvailableBandwidthPercent},

        [Parameter(ParameterSetName='SetFileReplicationRouteBySchedule', Mandatory=$true)]
        [switch]
        ${ControlNetworkLoadSchedule},

        [Parameter(ParameterSetName='SetFileReplicationRouteBySchedule')]
        [System.Object[]]
        ${DaysOfWeek},

        [Parameter(ParameterSetName='SetFileReplicationRouteBySchedule')]
        [Alias('TimePeriodStart','BeginHour')]
        [ValidateRange(0, 23)]
        [int]
        ${BeginHr},

        [Parameter(ParameterSetName='SetFileReplicationRouteBySchedule')]
        [Alias('TimePeriodEnd','EndHour')]
        [ValidateRange(0, 23)]
        [int]
        ${EndHr},

        [Parameter(ParameterSetName='SetFileReplicationRouteBySchedule')]
        [System.Object]
        ${AvailabilityLevel},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMDistributionPointDataTransferRoute -Value Set-CMFileReplicationRoute

function Set-CMGlobalCondition
{
    [CmdletBinding(DefaultParameterSetName='SetGeneral', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetGeneral')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Parameter(ParameterSetName='SetGeneral')]
        [string]
        ${Description},

        [Parameter(ParameterSetName='SetADQuery')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${LdapPrefix},

        [Parameter(ParameterSetName='SetADQuery')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DistinguishedName},

        [Parameter(ParameterSetName='SetADQuery')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${LdapFilter},

        [Parameter(ParameterSetName='SetADQuery')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${SearchScope},

        [Parameter(ParameterSetName='SetADQuery')]
        [Parameter(ParameterSetName='SetWqlQuery')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Property},

        [Parameter(ParameterSetName='SetAssembly')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${AssemblyName},

        [Parameter(ParameterSetName='SetFileSystem')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Path},

        [Parameter(ParameterSetName='SetFileSystem')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileOrFolderName},

        [Parameter(ParameterSetName='SetFileSystemFile')]
        [Parameter(ParameterSetName='SetScript')]
        [Parameter(ParameterSetName='SetSqlQueryDefaultInstance')]
        [Parameter(ParameterSetName='SetSqlQueryAllInstances')]
        [Parameter(ParameterSetName='SetSqlQuerySpecificInstance')]
        [Parameter(ParameterSetName='SetXPathQuery')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='SetFileSystem')]
        [Parameter(ParameterSetName='SetFileSystemFile')]
        [Parameter(ParameterSetName='SetXPathQuery')]
        [Alias('IncludeSubfolders')]
        [bool]
        ${IncludeSubfolder},

        [Parameter(ParameterSetName='SetFileSystem')]
        [Parameter(ParameterSetName='SetFileSystemFile')]
        [Parameter(ParameterSetName='SetRegistryKey')]
        [Parameter(ParameterSetName='SetRegistryValue')]
        [Parameter(ParameterSetName='SetXPathQuery')]
        [bool]
        ${Is64Bit},

        [Parameter(ParameterSetName='SetIisMetabase')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MetabasePath},

        [Parameter(ParameterSetName='SetIisMetabase')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${PropertyId},

        [Parameter(ParameterSetName='SetRegistryKey')]
        [Parameter(ParameterSetName='SetRegistryValue')]
        [System.Object]
        ${RegistryHive},

        [Parameter(ParameterSetName='SetRegistryKey')]
        [Parameter(ParameterSetName='SetRegistryValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${KeyName},

        [Parameter(ParameterSetName='SetRegistryValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ValueName},

        [Parameter(ParameterSetName='SetScript')]
        [System.Object]
        ${ScriptLanguage},

        [Parameter(ParameterSetName='SetScript')]
        [Alias('UseLoggedOnUserCredentials')]
        [bool]
        ${UseLoggedOnUserCredential},

        [Parameter(ParameterSetName='SetScript')]
        [bool]
        ${Use32BitHost},

        [Parameter(ParameterSetName='SetSqlQueryDefaultInstance')]
        [switch]
        ${UseDefaultInstance},

        [Parameter(ParameterSetName='SetSqlQueryAllInstances')]
        [switch]
        ${UseAllInstances},

        [Parameter(ParameterSetName='SetSqlQuerySpecificInstance')]
        [string]
        ${InstanceName},

        [Parameter(ParameterSetName='SetSqlQueryDefaultInstance')]
        [Parameter(ParameterSetName='SetSqlQueryAllInstances')]
        [Parameter(ParameterSetName='SetSqlQuerySpecificInstance')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Database},

        [Parameter(ParameterSetName='SetSqlQueryDefaultInstance')]
        [Parameter(ParameterSetName='SetSqlQueryAllInstances')]
        [Parameter(ParameterSetName='SetSqlQuerySpecificInstance')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Column},

        [Parameter(ParameterSetName='SetWqlQuery')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Namespace},

        [Parameter(ParameterSetName='SetWqlQuery')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Class},

        [Parameter(ParameterSetName='SetWqlQuery')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${WhereClause},

        [Parameter(ParameterSetName='SetXPathQuery')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${XmlFilePath},

        [Parameter(ParameterSetName='SetXPathQuery')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${XPathQuery},

        [Parameter(ParameterSetName='SetXPathQuery')]
        [Alias('XmlNamespaces')]
        [string[]]
        ${XmlNamespace},

        [Parameter(ParameterSetName='SetOmaUri', Mandatory=$true)]
        [string]
        ${OmaUri},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMGlobalConditionActiveDirectoryQuery
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [string]
        ${LdapPrefix},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DistinguishedName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${LdapFilter},

        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${SearchScope},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Property},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMGlobalConditionAssembly
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${AssemblyName},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMGlobalConditionFile
{
    [CmdletBinding(DefaultParameterSetName='SetFileSystemFile', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetFileSystem')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Path},

        [Parameter(ParameterSetName='SetFileSystem')]
        [Alias('FileName','FolderName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileOrFolderName},

        [Parameter(ParameterSetName='SetFileSystemFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='SetFileSystem')]
        [Parameter(ParameterSetName='SetFileSystemFile')]
        [Alias('IncludeSubfolders')]
        [bool]
        ${IncludeSubfolder},

        [Parameter(ParameterSetName='SetFileSystem')]
        [Parameter(ParameterSetName='SetFileSystemFile')]
        [bool]
        ${Is64Bit},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMGlobalConditionGeneral
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [string]
        ${Description},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMGlobalConditionIisMetabase
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${MetabasePath},

        [ValidateRange(0, 65535)]
        [int]
        ${PropertyId},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMGlobalConditionOmaUri
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [string]
        ${OmaUri},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMGlobalConditionRegistryKey
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [bool]
        ${Is64Bit},

        [System.Object]
        ${RegistryHive},

        [ValidateNotNullOrEmpty()]
        [string]
        ${KeyName},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMGlobalConditionRegistryValue
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [bool]
        ${Is64Bit},

        [System.Object]
        ${RegistryHive},

        [ValidateNotNullOrEmpty()]
        [string]
        ${KeyName},

        [string]
        ${ValueName},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMGlobalConditionScript
{
    [CmdletBinding(DefaultParameterSetName='SetScriptFromFile', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetScriptFromFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='SetScriptFromText')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ScriptText},

        [ValidateSet('JScript','PowerShell','VBScript')]
        [System.Object]
        ${ScriptLanguage},

        [Alias('UseLoggedOnUserCredentials')]
        [bool]
        ${UseLoggedOnUserCredential},

        [bool]
        ${Use32BitHost},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMGlobalConditionSqlQuery
{
    [CmdletBinding(DefaultParameterSetName='SetQueryFromFile', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetQueryFromFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='SetQueryFromText')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${QueryText},

        [switch]
        ${UseDefaultInstance},

        [switch]
        ${UseAllInstances},

        [string]
        ${InstanceName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Database},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Column},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMGlobalConditionWqlQuery
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${Property},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Namespace},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Class},

        [ValidateLength(0, 200000)]
        [string]
        ${WhereClause},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMGlobalConditionXPathQuery
{
    [CmdletBinding(DefaultParameterSetName='SetQueryFromFile', ConfirmImpact='Medium')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${XmlFilePath},

        [Alias('IncludeSubfolders')]
        [bool]
        ${IncludeSubfolder},

        [bool]
        ${Is64Bit},

        [Parameter(ParameterSetName='SetQueryFromFile')]
        [string]
        ${XPathQueryFilePath},

        [Parameter(ParameterSetName='SetQueryFromText')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${XPathQuery},

        [Alias('XmlNamespaces')]
        [string[]]
        ${XmlNamespace},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMGooglePlayDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [Alias('ContentLocation')]
        [string]
        ${Url},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [string]
        ${DeploymentTypeName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [System.Object]
        ${Application},

        [Parameter(ParameterSetName='ByDTValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeploymentType')]
        [System.Object]
        ${InputObject},

        [Alias('NewDeploymentTypeName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [switch]
        ${PassThru},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMHardwareRequirement
{
    [CmdletBinding(DefaultParameterSetName='SetByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Product},

        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_AIHardwareRequirements')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [int]
        ${MinCpu},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [long]
        ${MinDiskFree},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [long]
        ${MinDiskSize},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [long]
        ${MinRam},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMHierarchySetting
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [bool]
        ${UseFallbackSite},

        [ValidateNotNullOrEmpty()]
        [string]
        ${FallbackSiteCode},

        [System.Object]
        ${ApprovalMethod},

        [Alias('AutomaticallyResolveConfictingRecord','AutomaticallyResolveConflictingRecord')]
        [bool]
        ${AutoResolveClientConflict},

        [Alias('EnableProgram')]
        [bool]
        ${EnableAutoClientUpgrade},

        [Alias('AutomaticallyUpgradeDays')]
        [ValidateRange(1, 31)]
        [int]
        ${AutoUpgradeDays},

        [bool]
        ${AllowPrestage},

        [Alias('ExcludeServers')]
        [bool]
        ${ExcludeServer},

        [bool]
        ${EnablePreProduction},

        [Alias('PreProductionCollectionId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${TargetCollectionId},

        [Alias('PreProductionCollectionName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${TargetCollectionName},

        [Alias('PreProductionCollection')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Collection;CollectionType=2')]
        [System.Object]
        ${TargetCollection},

        [Alias('UnlimitPreProductionCollectionMemberCount')]
        [switch]
        ${UnlimitTargetCollectionMember},

        [bool]
        ${EnableExclusionCollection},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ExclusionCollectionId},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ExclusionCollectionName},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Collection;CollectionType=2')]
        [System.Object]
        ${ExclusionCollection},

        [switch]
        ${Force},

        [switch]
        ${PassThru},

        [Alias('EnablePrereleaseFeatures')]
        [switch]
        ${EnablePrereleaseFeature},

        [Alias('PreferBoundaryGroupManagementPoints')]
        [bool]
        ${PreferBoundaryGroupManagementPoint},

        [Alias('DiagnosticLevel')]
        [System.Object]
        ${TelemetryLevel},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMIntuneSubscription
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [System.Drawing.Color]
        ${ColorScheme},

        [string]
        ${CompanyLogoPath},

        [string]
        ${CompanyLogoThemedPath},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CompanyName},

        [bool]
        ${CompanyNameWithLogo},

        [string]
        ${ContactAdditional},

        [string]
        ${ContactEmail},

        [string]
        ${ContactName},

        [string]
        ${ContactPhoneNumber},

        [ValidateRange(1, 15)]
        [int]
        ${MaximumUserDevice},

        [bool]
        ${MultifactorEnabled},

        [switch]
        ${NoCompanyLogo},

        [bool]
        ${OnPremOnly},

        [switch]
        ${PassThru},

        [string]
        ${PrivacyUrl},

        [string]
        ${SupportSiteName},

        [string]
        ${SupportUrl},

        [Alias('Collection')]
        [PSTypeName('IResultObject#SMS_Collection;CollectionType=1')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${UserCollection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMIntuneSubscriptionAndroidProperty
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Alias('Enabled')]
        [bool]
        ${Enable},

        [bool]
        ${BlockPersonalDevice},

        [string]
        ${PreventMinimumVersion},

        [string]
        ${PreventMaximumVersion},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMIntuneSubscriptionAndroidProperties -Value Set-CMIntuneSubscriptionAndroidProperty

function Set-CMIntuneSubscriptionAppleDepProperty
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Alias('EnableDep','Enabled')]
        [bool]
        ${Enable},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DepTokenPath},

        [ValidateNotNullOrEmpty()]
        [string]
        ${AppleId},

        [Alias('Credentials','Credential')]
        [pscredential]
        ${IntuneCredential},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMIntuneSubscriptionAppleProperty
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Alias('Enabled','EnableIosEnrollment','EnableMacEnrollment','EnableMdmEnrollment')]
        [bool]
        ${Enable},

        [Alias('Path','CertificatePath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ApnsCertificatePath},

        [Alias('CertificatePassword')]
        [securestring]
        ${ApnsCertificatePassword},

        [Alias('ApnsCertificateExpiryAlertDays')]
        [System.Nullable[int]]
        ${CertificateExpiryAlertDays},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMIntuneSubscriptionPassportForWorkProperty
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Alias('Enabled')]
        [bool]
        ${Enable},

        [bool]
        ${RequireTpm},

        [ValidateRange(4, 126)]
        [int]
        ${MinPinLength},

        [ValidateRange(5, 127)]
        [int]
        ${MaxPinLength},

        [Alias('RequireUppercase')]
        [bool]
        ${AllowUppercase},

        [Alias('RequireLowercase')]
        [bool]
        ${AllowLowercase},

        [Alias('RequireSpecialChar')]
        [bool]
        ${AllowSpecialChar},

        [System.Nullable[int]]
        ${PinExpirationDays},

        [System.Nullable[int]]
        ${PreventPinReuseCount},

        [Alias('EnableGestures','EnableBiometrics')]
        [bool]
        ${EnableBiometric},

        [Alias('EnableEnhancedAntiSpoofing','EnableEnhancedBiometrics')]
        [System.Nullable[bool]]
        ${EnableEnhancedBiometric},

        [bool]
        ${UseRemotePassport},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMIntuneSubscriptionWindowsPhoneProperty
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [bool]
        ${EnableWindowsPhone8},

        [Alias('EnableWindowsMobile10')]
        [bool]
        ${EnableWindowsPhone81},

        [ValidateNotNullOrEmpty()]
        [string]
        ${AetTokenFilePath},

        [ValidateNotNullOrEmpty()]
        [string]
        ${AetXmlFilePath},

        [ValidateNotNullOrEmpty()]
        [string]
        ${PfxFilePath},

        [ValidateNotNullOrEmpty()]
        [securestring]
        ${PfxFilePassword},

        [switch]
        ${NoToken},

        [Alias('SymantecCertificateExpiryAlertDays')]
        [ValidateRange(0, 100)]
        [System.Nullable[int]]
        ${CertificateExpiryAlertDays},

        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${CompanyPortalApplication},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMIntuneSubscriptionWindowsPhoneProperties -Value Set-CMIntuneSubscriptionWindowsPhoneProperty

function Set-CMIntuneSubscriptionWindowsProperty
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Alias('Enabled')]
        [bool]
        ${Enable},

        [Alias('CodeSigningCertificatePath')]
        [string]
        ${CertificatePath},

        [securestring]
        ${CertificatePassword},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMIntuneSubscriptionWindowsProperties -Value Set-CMIntuneSubscriptionWindowsProperty

function Set-CMIosAppStoreDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [Alias('ContentLocation')]
        [string]
        ${Url},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [string]
        ${DeploymentTypeName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [System.Object]
        ${Application},

        [Parameter(ParameterSetName='ByDTValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeploymentType')]
        [System.Object]
        ${InputObject},

        [Alias('NewDeploymentTypeName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [switch]
        ${PassThru},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMAppleAppStoreDeploymentType Set-CMIosDeepLinkDeploymentType -Value Set-CMIosAppStoreDeploymentType Set-CMIosAppStoreDeploymentType

function Set-CMIosDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [string]
        ${DeploymentTypeName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [System.Object]
        ${Application},

        [Parameter(ParameterSetName='ByDTValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeploymentType')]
        [System.Object]
        ${InputObject},

        [Alias('NewDeploymentTypeName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ContentLocation},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [switch]
        ${PassThru},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMIpaDeploymentType -Value Set-CMIosDeploymentType

function Set-CMIosEnrollmentProfile
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [Alias('ProfileName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('ProfileId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Profile')]
        [PSTypeName('IResultObject#SMS_MDMCorpEnrollmentProfiles')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Alias('ProfileDescription')]
        [string]
        ${Description},

        [Alias('UserAffinity')]
        [System.Object]
        ${Affinity},

        [Alias('ConfigureDeviceEnrollmentProgram')]
        [bool]
        ${IsDepEnable},

        [string]
        ${Department},

        [Alias('SupportPhoneNumber')]
        [string]
        ${SupportPhone},

        [System.Object]
        ${Preparation},

        [Alias('LockEnrollmentProfileToDevice')]
        [bool]
        ${IsMdmRemovable},

        [bool]
        ${Passcode},

        [bool]
        ${Location},

        [bool]
        ${Restore},

        [bool]
        ${AppleId},

        [bool]
        ${TermAndCondition},

        [bool]
        ${TouchId},

        [bool]
        ${ApplePay},

        [bool]
        ${Zoom},

        [bool]
        ${Siri},

        [bool]
        ${Diagnostic},

        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${AllowPairingType},

        [Alias('ClearCertificate')]
        [switch]
        ${ClearCertificatePath},

        [Alias('RemoveCertificatePaths')]
        [string[]]
        ${RemoveCertificatePath},

        [Alias('AddCertificatePaths')]
        [string[]]
        ${AddCertificatePath},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMIosEnrollmentProfileAssignment
{
    [CmdletBinding(DefaultParameterSetName='ByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Alias('ProfileName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('ProfileId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('AddDevices')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_MDMCorpOwnedDevices')]
        [System.Object[]]
        ${AddDevice},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('EnrollmentProfile')]
        [PSTypeName('IResultObject#SMS_MDMCorpEnrollmentProfiles')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMMacDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [Alias('AddDetectionClauses')]
        [System.Object[]]
        ${AddDetectionClause},

        [Alias('RemoveDetectionClauses')]
        [string[]]
        ${RemoveDetectionClause},

        [Alias('GroupDetectionClausesByLogicalName')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${GroupDetectionClauses},

        [Alias('DetectionClauseConnectors')]
        [ValidateNotNullOrEmpty()]
        [hashtable[]]
        ${DetectionClauseConnector},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [string]
        ${DeploymentTypeName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [System.Object]
        ${Application},

        [Parameter(ParameterSetName='ByDTValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeploymentType')]
        [System.Object]
        ${InputObject},

        [Alias('NewDeploymentTypeName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ContentLocation},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [switch]
        ${PassThru},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMMaintenanceWindow
{
    [CmdletBinding(DefaultParameterSetName='ByValueMWValue', ConfirmImpact='Medium')]
    param
    (
        [System.Object]
        ${ApplyTo},

        [Parameter(ParameterSetName='ByValueMWName', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueMWValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Collection','Site')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByCollectionIdMWName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByCollectionIdMWValue', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='ByCollectionNameMWName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByCollectionNameMWValue', Mandatory=$true)]
        [string]
        ${CollectionName},

        [bool]
        ${IsEnabled},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [Parameter(ParameterSetName='ByCollectionNameMWName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByCollectionIdMWName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueMWName', Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${MaintenanceWindowName},

        [Parameter(ParameterSetName='ByCollectionNameMWValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByCollectionIdMWValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueMWValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ScheduleWindow')]
        [PSTypeName('IResultObject#SMS_ServiceWindow')]
        [System.Object]
        ${MaintenanceWindow},

        [switch]
        ${ApplyToTaskSequenceOnly},

        [switch]
        ${ApplyToSoftwareUpdateOnly},

        [switch]
        ${PassThru},

        [bool]
        ${IsUtc},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMManagementPoint
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ManagementPoint')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Management Point')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SetByName')]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [bool]
        ${EnableSsl},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [bool]
        ${EnableCloudGateway},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateSet('Internet','Intranet','InternetAndIntranet')]
        [System.Object]
        ${ClientConnectionType},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [bool]
        ${AllowDevice},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [bool]
        ${GenerateAlert},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [bool]
        ${UseSiteDatabase},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [Alias('SqlServerFqdnName')]
        [string]
        ${SqlServerFqdn},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [string]
        ${SqlServerInstanceName},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateLength(1, 63)]
        [string]
        ${DatabaseName},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [switch]
        ${UseComputerAccount},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMManagementPointComponent
{
    [CmdletBinding(DefaultParameterSetName='SearchBySiteCodeMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('SiteName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [bool]
        ${PublishDns},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMMigrationExclusionList
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [Parameter(ParameterSetName='EditExclusionListByName', Mandatory=$true)]
        [Alias('EntityName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMMigrationJob
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('MigrationJobId')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('MigrationJob')]
        [PSTypeName('IResultObject#SMS_MigrationJob')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [string]
        ${Description},

        [bool]
        ${UtcTime},

        [datetime]
        ${MigrationJobSchedule},

        [bool]
        ${OverwriteAllObject},

        [Alias('TransferOrganizationalFolderStructure','MigrateWithFolders')]
        [bool]
        ${MigrateWithFolder},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMMigrationSource
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetMigrationSource', Mandatory=$true)]
        [string]
        ${SourceSiteServerName},

        [Parameter(ParameterSetName='SetMigrationSource')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SmsProviderAccount},

        [Parameter(ParameterSetName='SetMigrationSource')]
        [string]
        ${SqlServerAccount},

        [Parameter(ParameterSetName='SetMigrationSource')]
        [bool]
        ${EnableDistributionPointSharing},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMMobileMsiDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 512)]
        [string]
        ${InstallCommand},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [string]
        ${DeploymentTypeName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [System.Object]
        ${Application},

        [Parameter(ParameterSetName='ByDTValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeploymentType')]
        [System.Object]
        ${InputObject},

        [Alias('NewDeploymentTypeName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ContentLocation},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [switch]
        ${PassThru},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMMsiDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [Alias('AddDetectionClauses')]
        [System.Object[]]
        ${AddDetectionClause},

        [Alias('RemoveDetectionClauses')]
        [string[]]
        ${RemoveDetectionClause},

        [Alias('GroupDetectionClausesByLogicalName')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${GroupDetectionClauses},

        [Alias('DetectionClauseConnectors')]
        [ValidateNotNullOrEmpty()]
        [hashtable[]]
        ${DetectionClauseConnector},

        [string]
        ${ContentLocation},

        [Alias('AllowClientsToShareContentOnSameSubnet')]
        [bool]
        ${EnableBranchCache},

        [Alias('EstimatedInstallationTimeMinutes','EstimatedInstallationTimeMins','EstimatedRunTimeMinutes')]
        [ValidateRange(0, 32767)]
        [int]
        ${EstimatedRuntimeMins},

        [Alias('InstallationProgram')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 1024)]
        [string]
        ${InstallCommand},

        [Alias('UninstallationProgram')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 1024)]
        [string]
        ${UninstallCommand},

        [Alias('InstallationProgramVisibility')]
        [System.Object]
        ${UserInteractionMode},

        [System.Object]
        ${LogonRequirementType},

        [Alias('MaximumAllowedRunTimeMinutes','MaximumAllowedRunTimeMins','MaximumRunTimeMinutes')]
        [ValidateRange(15, 720)]
        [int]
        ${MaximumRuntimeMins},

        [Alias('PersistContentInClientCache')]
        [bool]
        ${CacheContent},

        [Alias('RequiresUserInteraction')]
        [bool]
        ${RequireUserInteraction},

        [Alias('EnableContentLocationFallback','AllowClientsToUseFallbackSourceLocationForContent')]
        [bool]
        ${ContentFallback},

        [ValidateSet('DoNothing','Download')]
        [System.Object]
        ${SlowNetworkDeploymentMode},

        [Alias('InstallationStartIn','InstallFolder')]
        [ValidateLength(0, 512)]
        [string]
        ${InstallWorkingDirectory},

        [Alias('UninstallationStartIn','UninstallFolder')]
        [string]
        ${UninstallWorkingDirectory},

        [Alias('Force32BitInstaller')]
        [bool]
        ${Force32Bit},

        [string]
        ${ProductCode},

        [Alias('ScriptContent','Script')]
        [string]
        ${ScriptText},

        [string]
        ${ScriptFile},

        [Alias('Force32BitDetectionScript')]
        [bool]
        ${ForceScriptDetection32Bit},

        [Alias('ScriptType')]
        [System.Object]
        ${ScriptLanguage},

        [string]
        ${SourceUpdateProductCode},

        [System.Object]
        ${InstallationBehaviorType},

        [ValidateSet('BasedOnExitCode','NoAction','ForceReboot','ProgramReboot')]
        [System.Object]
        ${RebootBehavior},

        [string]
        ${UninstallContentLocation},

        [System.Object]
        ${UninstallOption},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [string]
        ${DeploymentTypeName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [System.Object]
        ${Application},

        [Parameter(ParameterSetName='ByDTValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeploymentType')]
        [System.Object]
        ${InputObject},

        [Alias('NewDeploymentTypeName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [switch]
        ${PassThru},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMMulticastServicePoint
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [System.Object]
        ${ClientTransferRate},

        [string]
        ${EndIPAddress},

        [ValidateRange(2, 65535)]
        [int]
        ${EndUdpPort},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('MulticastServicePoint')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Multicast Service Point')]
        [System.Object]
        ${InputObject},

        [System.Nullable[bool]]
        ${EnableScheduledMulticast},

        [Alias('MinimumSessionSize')]
        [ValidateRange(1, 99)]
        [int]
        ${MinimumClientCount},

        [Alias('MulticastMaximumClientCount')]
        [ValidateRange(1, 10000)]
        [int]
        ${MaximumClientCount},

        [switch]
        ${PassThru},

        [Alias('SessionStartDelayMinutes')]
        [ValidateRange(1, 99)]
        [int]
        ${SessionStartDelayMins},

        [Parameter(ParameterSetName='ByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [string]
        ${StartIPAddress},

        [ValidateRange(1, 65534)]
        [int]
        ${StartUdpPort},

        [switch]
        ${UseAnyRangeIP},

        [string]
        ${UserName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMObjectSecurityScope
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object[]]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [Alias('SecurityScopeAction')]
        [System.Object]
        ${Action},

        [Parameter(Mandatory=$true)]
        [Alias('SecurityScopeName')]
        [string]
        ${Name},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMOperatingSystemImage
{
    [CmdletBinding(DefaultParameterSetName='SetByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('PackageId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ImagePackage')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('PackageSourcePath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Path},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [string]
        ${Version},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [string]
        ${Description},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${DistributionPointUpdateSchedule},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('DisconnectUsersFromDistributionPoints')]
        [bool]
        ${DisconnectUserFromDistributionPoint},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('DisconnectUsersFromDistributionPointsRetries')]
        [ValidateRange(0, 99)]
        [uint32]
        ${DisconnectUserFromDistributionPointRetryCount},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('DisconnectUsersFromDistributionPointsMinutes')]
        [ValidateRange(0, 59)]
        [uint32]
        ${DisconnectUserFromDistributionPointMins},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [string]
        ${CustomPackageShareName},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('CopyToPackageShareOnDistributionPoints')]
        [bool]
        ${CopyToPackageShareOnDistributionPoint},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [bool]
        ${MulticastAllow},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [bool]
        ${MulticastEncrypt},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [bool]
        ${MulticastTransferOnly},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [System.Object]
        ${Priority},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('SendToPreferredDistributionPoints')]
        [bool]
        ${SendToPreferredDistributionPoint},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [System.Object]
        ${PrestageBehavior},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [bool]
        ${PersistContentInCache},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [bool]
        ${EnableBinaryDeltaReplication},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMOperatingSystemInstaller
{
    [CmdletBinding(DefaultParameterSetName='SetById', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('PackageId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_OperatingSystemInstallPackage')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Alias('PackageSourcePath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Path},

        [string]
        ${Version},

        [string]
        ${Description},

        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${DistributionPointUpdateSchedule},

        [Alias('DisconnectUsersFromDistributionPoints')]
        [bool]
        ${DisconnectUserFromDistributionPoint},

        [Alias('DisconnectUsersFromDistributionPointsRetries')]
        [ValidateRange(0, 99)]
        [uint32]
        ${DisconnectUserFromDistributionPointRetryCount},

        [Alias('DisconnectUsersFromDistributionPointsMinutes')]
        [ValidateRange(0, 59)]
        [uint32]
        ${DisconnectUserFromDistributionPointMins},

        [string]
        ${CustomPackageShareName},

        [Alias('CopyToPackageShareOnDistributionPoints')]
        [bool]
        ${CopyToPackageShareOnDistributionPoint},

        [bool]
        ${MulticastAllow},

        [bool]
        ${MulticastEncrypt},

        [bool]
        ${MulticastTransferOnly},

        [System.Object]
        ${Priority},

        [Alias('SendToPreferredDistributionPoints')]
        [bool]
        ${SendToPreferredDistributionPoint},

        [System.Object]
        ${PrestageBehavior},

        [bool]
        ${PersistContentInCache},

        [bool]
        ${EnableBinaryDeltaReplication},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMPackage
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('PackageId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [string]
        ${Version},

        [string]
        ${Manufacturer},

        [string]
        ${Language},

        [string]
        ${Description},

        [Alias('PackageSourcePath')]
        [string]
        ${Path},

        [string]
        ${MifFileName},

        [string]
        ${MifName},

        [string]
        ${MifPublisher},

        [string]
        ${MifVersion},

        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${DistributionPointUpdateSchedule},

        [Alias('ForceDisconnectEnabled','DisconnectUsersFromDistributionPoints')]
        [bool]
        ${DisconnectUserFromDistributionPoint},

        [Alias('ForceDisconnectNumRetries','DisconnectUsersFromDistributionPointsRetries')]
        [ValidateRange(0, 99)]
        [uint32]
        ${DisconnectUserFromDistributionPointRetry},

        [Alias('ForcedDisconnectDelay','DisconnectUsersFromDistributionPointsMinutes','DisconnectUserFromDistributionPointsMins','DisconnectUserFromDistributionPointsMinutes')]
        [ValidateRange(0, 59)]
        [uint32]
        ${DisconnectUserFromDistributionPointMins},

        [Alias('ShareName')]
        [string]
        ${CustomPackageShareName},

        [Alias('ShareContent','CopyToPackageShareOnDistributionPoints')]
        [bool]
        ${CopyToPackageShareOnDistributionPoint},

        [bool]
        ${MulticastAllow},

        [bool]
        ${MulticastEncrypt},

        [bool]
        ${MulticastTransferOnly},

        [Alias('DistributionPriority')]
        [System.Object]
        ${Priority},

        [Alias('SendToPreferredDistributionPoints')]
        [bool]
        ${SendToPreferredDistributionPoint},

        [System.Object]
        ${PrestageBehavior},

        [bool]
        ${PersistContentInCache},

        [bool]
        ${EnableBinaryDeltaReplication},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMPackageDeployment
{
    [CmdletBinding(DefaultParameterSetName='SetStandardProgramDeploymentByPackageValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageName', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${PackageName},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageId', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageId', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Package','DeploymentSummary','Advertisement')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageId', Mandatory=$true)]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageValue', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${StandardProgramName},

        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageId', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageValue', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceProgramName},

        [string]
        ${Comment},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageValue')]
        [bool]
        ${SendWakeupPacket},

        [bool]
        ${UseMeteredNetwork},

        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageValue')]
        [datetime]
        ${DeploymentStartDateTime},

        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageValue')]
        [bool]
        ${UseUtc},

        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageValue')]
        [bool]
        ${UseRecurrencePattern},

        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageValue')]
        [int]
        ${RecurValue},

        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageValue')]
        [System.Object]
        ${RecurUnit},

        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetDeviceProgramDeploymentByPackageValue')]
        [bool]
        ${Rerun},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageValue')]
        [datetime]
        ${DeploymentAvailableDateTime},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageValue')]
        [bool]
        ${UseUtcForAvailableSchedule},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageValue')]
        [bool]
        ${EnableExpireSchedule},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageValue')]
        [datetime]
        ${DeploymentExpireDateTime},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageValue')]
        [bool]
        ${UseUtcForExpireSchedule},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageValue')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${ScheduleEvent},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageValue')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${Schedule},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageValue')]
        [System.Object]
        ${RerunBehavior},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageValue')]
        [Alias('AllowUsersRunIndependently')]
        [bool]
        ${RunFromSoftwareCenter},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageValue')]
        [bool]
        ${SoftwareInstallation},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageValue')]
        [bool]
        ${SystemRestart},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageValue')]
        [bool]
        ${PersistOnWriteFilterDevice},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageValue')]
        [System.Object]
        ${FastNetworkOption},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageValue')]
        [System.Object]
        ${SlowNetworkOption},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageValue')]
        [bool]
        ${AllowSharedContent},

        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageName')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageId')]
        [Parameter(ParameterSetName='SetStandardProgramDeploymentByPackageValue')]
        [bool]
        ${AllowFallback},

        [switch]
        ${PassThru},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMProgram
{
    [CmdletBinding(DefaultParameterSetName='SetStandardProgramByProgramValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetStandardProgramByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDeviceProgramByName', Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${PackageName},

        [Parameter(ParameterSetName='SetStandardProgramById', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDeviceProgramById', Mandatory=$true)]
        [Alias('Id')]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='SetStandardProgramByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetDeviceProgramByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetDeviceProgramByProgramValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ProgramPackage','Package','Program')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetStandardProgramByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetStandardProgramById', Mandatory=$true)]
        [Parameter(ParameterSetName='SetStandardProgramByValue', Mandatory=$true)]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue', Mandatory=$true)]
        [switch]
        ${StandardProgram},

        [Parameter(ParameterSetName='SetDeviceProgramByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDeviceProgramById', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDeviceProgramByValue', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDeviceProgramByProgramValue', Mandatory=$true)]
        [switch]
        ${DeviceProgram},

        [Parameter(ParameterSetName='SetStandardProgramByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetStandardProgramById', Mandatory=$true)]
        [Parameter(ParameterSetName='SetStandardProgramByValue', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDeviceProgramByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDeviceProgramById', Mandatory=$true)]
        [Parameter(ParameterSetName='SetDeviceProgramByValue', Mandatory=$true)]
        [Alias('StandardProgramName','DeviceProgramName')]
        [string]
        ${ProgramName},

        [string]
        ${Comment},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CommandLine},

        [string]
        ${WorkingDirectory},

        [Parameter(ParameterSetName='SetStandardProgramByName')]
        [Parameter(ParameterSetName='SetStandardProgramById')]
        [Parameter(ParameterSetName='SetStandardProgramByValue')]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue')]
        [System.Object]
        ${RunType},

        [Parameter(ParameterSetName='SetStandardProgramByName')]
        [Parameter(ParameterSetName='SetStandardProgramById')]
        [Parameter(ParameterSetName='SetStandardProgramByValue')]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue')]
        [System.Object]
        ${AfterRunningType},

        [Parameter(ParameterSetName='SetStandardProgramByName')]
        [Parameter(ParameterSetName='SetStandardProgramById')]
        [Parameter(ParameterSetName='SetStandardProgramByValue')]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue')]
        [string]
        ${Category},

        [string]
        ${DiskSpaceRequirement},

        [System.Object]
        ${DiskSpaceUnit},

        [Parameter(ParameterSetName='SetStandardProgramByName')]
        [Parameter(ParameterSetName='SetStandardProgramById')]
        [Parameter(ParameterSetName='SetStandardProgramByValue')]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue')]
        [int]
        ${Duration},

        [string]
        ${Requirement},

        [Parameter(ParameterSetName='SetStandardProgramByName')]
        [Parameter(ParameterSetName='SetStandardProgramById')]
        [Parameter(ParameterSetName='SetStandardProgramByValue')]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue')]
        [System.Object]
        ${ProgramRunType},

        [Parameter(ParameterSetName='SetStandardProgramByName')]
        [Parameter(ParameterSetName='SetStandardProgramById')]
        [Parameter(ParameterSetName='SetStandardProgramByValue')]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue')]
        [System.Object]
        ${RunMode},

        [Parameter(ParameterSetName='SetStandardProgramByName')]
        [Parameter(ParameterSetName='SetStandardProgramById')]
        [Parameter(ParameterSetName='SetStandardProgramByValue')]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue')]
        [bool]
        ${UserInteraction},

        [Parameter(ParameterSetName='SetStandardProgramByName')]
        [Parameter(ParameterSetName='SetStandardProgramById')]
        [Parameter(ParameterSetName='SetStandardProgramByValue')]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue')]
        [System.Object]
        ${DriveMode},

        [Parameter(ParameterSetName='SetStandardProgramByName')]
        [Parameter(ParameterSetName='SetStandardProgramById')]
        [Parameter(ParameterSetName='SetStandardProgramByValue')]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DriveLetter},

        [Parameter(ParameterSetName='SetStandardProgramByName')]
        [Parameter(ParameterSetName='SetStandardProgramById')]
        [Parameter(ParameterSetName='SetStandardProgramByValue')]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue')]
        [bool]
        ${Reconnect},

        [Parameter(ParameterSetName='SetStandardProgramByName')]
        [Parameter(ParameterSetName='SetStandardProgramById')]
        [Parameter(ParameterSetName='SetStandardProgramByValue')]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue')]
        [System.Object]
        ${ProgramAssignedType},

        [Parameter(ParameterSetName='SetStandardProgramByName')]
        [Parameter(ParameterSetName='SetStandardProgramById')]
        [Parameter(ParameterSetName='SetStandardProgramByValue')]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue')]
        [bool]
        ${SuppressProgramNotification},

        [Parameter(ParameterSetName='SetStandardProgramByName')]
        [Parameter(ParameterSetName='SetStandardProgramById')]
        [Parameter(ParameterSetName='SetStandardProgramByValue')]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue')]
        [bool]
        ${DisableProgram},

        [Parameter(ParameterSetName='SetStandardProgramByName')]
        [Parameter(ParameterSetName='SetStandardProgramById')]
        [Parameter(ParameterSetName='SetStandardProgramByValue')]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue')]
        [bool]
        ${EnableTaskSequence},

        [Parameter(ParameterSetName='SetStandardProgramByName')]
        [Parameter(ParameterSetName='SetStandardProgramById')]
        [Parameter(ParameterSetName='SetStandardProgramByValue')]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue')]
        [bool]
        ${DisableMomAlertOnRun},

        [Parameter(ParameterSetName='SetStandardProgramByName')]
        [Parameter(ParameterSetName='SetStandardProgramById')]
        [Parameter(ParameterSetName='SetStandardProgramByValue')]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue')]
        [bool]
        ${GenerateMomAlertOnFail},

        [Parameter(ParameterSetName='SetDeviceProgramByName')]
        [Parameter(ParameterSetName='SetDeviceProgramById')]
        [Parameter(ParameterSetName='SetDeviceProgramByValue')]
        [Parameter(ParameterSetName='SetDeviceProgramByProgramValue')]
        [string]
        ${CommandLineFolder},

        [Parameter(ParameterSetName='SetDeviceProgramByName')]
        [Parameter(ParameterSetName='SetDeviceProgramById')]
        [Parameter(ParameterSetName='SetDeviceProgramByValue')]
        [Parameter(ParameterSetName='SetDeviceProgramByProgramValue')]
        [System.Object]
        ${DownloadProgramType},

        [Parameter(ParameterSetName='SetStandardProgramByName')]
        [Parameter(ParameterSetName='SetStandardProgramById')]
        [Parameter(ParameterSetName='SetStandardProgramByValue')]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue')]
        [Alias('AddSupportedOperatingSystemPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${AddSupportedOperatingSystemPlatform},

        [Parameter(ParameterSetName='SetStandardProgramByName')]
        [Parameter(ParameterSetName='SetStandardProgramById')]
        [Parameter(ParameterSetName='SetStandardProgramByValue')]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue')]
        [Alias('RemoveSupportedOperatingSystemPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${RemoveSupportedOperatingSystemPlatform},

        [Parameter(ParameterSetName='SetStandardProgramByName')]
        [Parameter(ParameterSetName='SetStandardProgramById')]
        [Parameter(ParameterSetName='SetStandardProgramByValue')]
        [Parameter(ParameterSetName='SetStandardProgramByProgramValue')]
        [Alias('ClearSupportedOperatingSystemPlatforms')]
        [switch]
        ${RunOnAnyPlatform},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMQuery
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('QueryId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Query')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [string]
        ${Comment},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Expression},

        [string]
        ${LimitToCollectionId},

        [string]
        ${TargetClassName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMQueryResultMaximum
{
    [CmdletBinding(DefaultParameterSetName='Value', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='Value', Mandatory=$true, Position=0)]
        [int]
        ${Maximum},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMRemoteConnectionProfileConfigurationItem
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_RemoteConnectionSettings')]
        [System.Object]
        ${InputObject},

        [bool]
        ${EnableNla},

        [Alias('EnablePrimaryUsers')]
        [bool]
        ${EnablePrimaryUser},

        [bool]
        ${EnableTSFirewallRule},

        [bool]
        ${EnableTSConnection},

        [Alias('EnableConnectionSettings')]
        [bool]
        ${Enable},

        [ValidateLength(1, 255)]
        [string]
        ${RDGatewayServer},

        [Alias('LocalizedDescription')]
        [ValidateLength(0, 512)]
        [string]
        ${Description},

        [Parameter(ValueFromPipeline=$true)]
        [ValidateNotNull()]
        [System.Object]
        ${Digest},

        [Alias('DesiredConfigurationDigestPath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DigestPath},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DigestXml},

        [Parameter(ParameterSetName='SetById', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 255)]
        [string]
        ${NewName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMReportingServicePoint
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DatabaseServerName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DatabaseName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ReportingServicePoint')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS SRS Reporting Point')]
        [System.Object]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMScriptDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [string]
        ${ContentLocation},

        [Alias('AddDetectionClauses')]
        [System.Object[]]
        ${AddDetectionClause},

        [Alias('RemoveDetectionClauses')]
        [string[]]
        ${RemoveDetectionClause},

        [Alias('GroupDetectionClausesByLogicalName')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${GroupDetectionClauses},

        [Alias('DetectionClauseConnectors')]
        [ValidateNotNullOrEmpty()]
        [hashtable[]]
        ${DetectionClauseConnector},

        [Alias('AllowClientsToShareContentOnSameSubnet')]
        [bool]
        ${EnableBranchCache},

        [Alias('EstimatedInstallationTimeMinutes','EstimatedInstallationTimeMins','EstimatedRunTimeMinutes')]
        [ValidateRange(0, 32767)]
        [int]
        ${EstimatedRuntimeMins},

        [Alias('InstallationProgram')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 1024)]
        [string]
        ${InstallCommand},

        [Alias('UninstallationProgram')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 1024)]
        [string]
        ${UninstallCommand},

        [Alias('InstallationProgramVisibility')]
        [System.Object]
        ${UserInteractionMode},

        [System.Object]
        ${LogonRequirementType},

        [Alias('MaximumAllowedRunTimeMinutes','MaximumAllowedRunTimeMins','MaximumRunTimeMinutes')]
        [ValidateRange(15, 720)]
        [int]
        ${MaximumRuntimeMins},

        [Alias('PersistContentInClientCache')]
        [bool]
        ${CacheContent},

        [Alias('RequiresUserInteraction')]
        [bool]
        ${RequireUserInteraction},

        [Alias('EnableContentLocationFallback','AllowClientsToUseFallbackSourceLocationForContent')]
        [bool]
        ${ContentFallback},

        [ValidateSet('DoNothing','Download')]
        [System.Object]
        ${SlowNetworkDeploymentMode},

        [Alias('InstallationStartIn','InstallFolder')]
        [ValidateLength(0, 512)]
        [string]
        ${InstallWorkingDirectory},

        [Alias('UninstallationStartIn','UninstallFolder')]
        [string]
        ${UninstallWorkingDirectory},

        [Alias('Force32BitInstaller')]
        [bool]
        ${Force32Bit},

        [string]
        ${ProductCode},

        [Alias('ScriptContent','Script')]
        [string]
        ${ScriptText},

        [string]
        ${ScriptFile},

        [Alias('Force32BitDetectionScript')]
        [bool]
        ${ForceScriptDetection32Bit},

        [Alias('ScriptType')]
        [System.Object]
        ${ScriptLanguage},

        [string]
        ${SourceUpdateProductCode},

        [System.Object]
        ${InstallationBehaviorType},

        [ValidateSet('BasedOnExitCode','NoAction','ForceReboot','ProgramReboot')]
        [System.Object]
        ${RebootBehavior},

        [string]
        ${UninstallContentLocation},

        [System.Object]
        ${UninstallOption},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [string]
        ${DeploymentTypeName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [System.Object]
        ${Application},

        [Parameter(ParameterSetName='ByDTValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeploymentType')]
        [System.Object]
        ${InputObject},

        [Alias('NewDeploymentTypeName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [switch]
        ${PassThru},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMSecurityRole
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('RoleId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [Alias('RoleName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Role')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [Alias('RoleDescription')]
        [string]
        ${Description},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMSecurityScope
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('CategoryId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [Alias('CategoryName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SecuredCategory')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [Alias('CategoryDescription')]
        [string]
        ${Description},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMServiceConnectionPoint
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [System.Object]
        ${Mode},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('ServiceConnectionPoint')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Dmp Connector')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMSettingDefinition
{
    [CmdletBinding(DefaultParameterSetName='SetByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [Alias('CategoryInstanceIds')]
        [string[]]
        ${CategoryInstanceId},

        [Alias('LocalizedDescription')]
        [ValidateLength(0, 512)]
        [string]
        ${Description},

        [Parameter(ValueFromPipeline=$true)]
        [ValidateNotNull()]
        [System.Object]
        ${Digest},

        [Alias('DesiredConfigurationDigestPath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DigestPath},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DigestXml},

        [Parameter(ParameterSetName='SetById', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 255)]
        [string]
        ${NewName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMSite
{
    [CmdletBinding(DefaultParameterSetName='SetByObject', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByNameMandatory', Mandatory=$true)]
        [Alias('SiteName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetBySiteCodeMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SetByObject', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Site')]
        [System.Object]
        ${InputObject},

        [string]
        ${Comment},

        [bool]
        ${EnableWakeOnLan},

        [System.Object]
        ${WakeOnLanType},

        [System.Object]
        ${WakeOnLanTransmissionMethodType},

        [ValidateRange(1, 5)]
        [int]
        ${RetryNumberOfSendingWakeupPacketTransmission},

        [Alias('SendingWakeupPacketTransmissionDelayMinutes')]
        [ValidateRange(1, 5)]
        [int]
        ${SendingWakeupPacketTransmissionDelayMins},

        [ValidateRange(1000, 300000)]
        [int]
        ${MaximumNumberOfSendingWakeupPacketBeforePausing},

        [Alias('SendingWakeupPacketBeforePausingWaitSeconds')]
        [ValidateRange(0, 100)]
        [int]
        ${SendingWakeupPacketBeforePausingWaitSec},

        [ValidateRange(1, 9)]
        [int]
        ${ThreadNumberOfSendingWakeupPacket},

        [Alias('SendingWakeupPacketTransmissionOffsetMinutes')]
        [ValidateRange(0, 60)]
        [int]
        ${SendingWakeupPacketTransmissionOffsetMins},

        [System.Object]
        ${AddClientRequestServiceType},

        [ValidateRange(1, 65535)]
        [int]
        ${PortForClientRequestServiceType},

        [System.Object]
        ${RemoveClientRequestServiceType},

        [bool]
        ${UseCustomWebsite},

        [ValidateRange(1, 999)]
        [int]
        ${MaximumConcurrentSendingForAllSite},

        [ValidateRange(1, 999)]
        [int]
        ${MaximumConcurrentSendingForPerSite},

        [ValidateRange(1, 99)]
        [int]
        ${RetryNumberForConcurrentSending},

        [Alias('ConcurrentSendingDelayBeforeRetryingMinutes')]
        [ValidateRange(1, 99)]
        [int]
        ${ConcurrentSendingDelayBeforeRetryingMins},

        [PSTypeName('IResultObject#SMS_ADForest')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${AddActiveDirectoryForest},

        [PSTypeName('IResultObject#SMS_ADForest')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${RemoveActiveDirectoryForest},

        [System.Object]
        ${ClientComputerCommunicationType},

        [bool]
        ${UsePkiClientCertificate},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SetByObject')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ClientCertificateCustomStoreName},

        [Parameter(ParameterSetName='SetByNameMandatory')]
        [Parameter(ParameterSetName='SetBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SetByObject')]
        [System.Object]
        ${ClientCertificateSelectionCriteriaType},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ClientCertificateSelectionCriteriaValue},

        [System.Object]
        ${TakeActionForMultipleCertificateMatchCriteria},

        [bool]
        ${ClientCheckCertificateRevocationListForSiteSystem},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddCertificateByPath},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveCertificateByKey},

        [Alias('GenerateAlertWhenFreeDiskSpaceOnSiteDatabaseIsLow')]
        [bool]
        ${EnableLowFreeSpaceAlert},

        [Alias('WarningAlertWhenFreeDiskSpaceFallBelowFollowingValueGB')]
        [ValidateRange(1, 32767)]
        [int]
        ${FreeSpaceThresholdWarningGB},

        [Alias('CriticalAlertWhenFreeDiskSpaceFallBelowFollowingValueGB')]
        [ValidateRange(1, 32767)]
        [int]
        ${FreeSpaceThresholdCriticalGB},

        [bool]
        ${RequireSigning},

        [bool]
        ${RequireSha256},

        [bool]
        ${UseEncryption},

        [Alias('SizeOfCustomCollectionCanSelectByDefault')]
        [ValidateRange(0, 1000000)]
        [int]
        ${ThresholdOfSelectCollectionByDefault},

        [Alias('SizeOfCustomCollectionCanSelectMaximum')]
        [ValidateRange(0, 1000000)]
        [int]
        ${ThresholdOfSelectCollectionMax},

        [Alias('BehaviorWhenCollectionIncludesComputerHostSiteSystemRole')]
        [System.Object]
        ${SiteSystemCollectionBehavior},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMSiteMaintenanceTask
{
    [CmdletBinding(DefaultParameterSetName='SetSummaryTaskByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetMaintenanceTasksByValue')]
        [Parameter(ParameterSetName='SetMaintenanceTasksByTaskName')]
        [Parameter(ParameterSetName='SetMaintenanceTasksByName')]
        [Alias('DeleteOlderThan','DeleteThanOlderDays')]
        [int]
        ${DeleteOlderThanDays},

        [Parameter(ParameterSetName='SetMaintenanceTasksByValue')]
        [Parameter(ParameterSetName='SetMaintenanceTasksByTaskName')]
        [Parameter(ParameterSetName='SetMaintenanceTasksByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceName},

        [Parameter(ParameterSetName='SetMaintenanceTasksByTaskName', Mandatory=$true)]
        [Alias('MaintenanceTaskName','TaskName','ItemName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetMaintenanceTasksByName', Mandatory=$true)]
        [System.Object]
        ${MaintenanceTask},

        [Parameter(ParameterSetName='SetSummaryTaskByName', Mandatory=$true)]
        [System.Object]
        ${SummaryTask},

        [Parameter(ParameterSetName='SetMaintenanceTasksByValue')]
        [Parameter(ParameterSetName='SetMaintenanceTasksByTaskName')]
        [Parameter(ParameterSetName='SetMaintenanceTasksByName')]
        [bool]
        ${Enabled},

        [Parameter(ParameterSetName='SetSummaryTaskByName')]
        [switch]
        ${RunNow},

        [Parameter(ParameterSetName='SetSummaryTaskByName')]
        [Alias('RunIntervalMinutes')]
        [ValidateRange(1, 1440)]
        [int]
        ${RunIntervalMins},

        [Parameter(ParameterSetName='SetSummaryTaskByName')]
        [Alias('FixedRunInterval','DisableFixedRunInterval')]
        [switch]
        ${FixedRun},

        [Parameter(ParameterSetName='SetMaintenanceTasksByValue')]
        [Parameter(ParameterSetName='SetMaintenanceTasksByTaskName')]
        [Parameter(ParameterSetName='SetMaintenanceTasksByName')]
        [datetime]
        ${BeginTime},

        [Parameter(ParameterSetName='SetMaintenanceTasksByValue')]
        [Parameter(ParameterSetName='SetMaintenanceTasksByTaskName')]
        [Parameter(ParameterSetName='SetMaintenanceTasksByName')]
        [datetime]
        ${LatestBeginTime},

        [Parameter(ParameterSetName='SetMaintenanceTasksByValue')]
        [Parameter(ParameterSetName='SetMaintenanceTasksByTaskName')]
        [Parameter(ParameterSetName='SetMaintenanceTasksByName')]
        [System.Object[]]
        ${DaysOfWeek},

        [Parameter(ParameterSetName='SetMaintenanceTasksByValue')]
        [Parameter(ParameterSetName='SetMaintenanceTasksByTaskName')]
        [Parameter(ParameterSetName='SetMaintenanceTasksByName')]
        [Alias('EnabledAlert')]
        [bool]
        ${EnableAlert},

        [Parameter(ParameterSetName='SetMaintenanceTasksByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('MaintenanceTaskObject')]
        [PSTypeName('IResultObject#SMS_SCI_SQLTask')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMSiteSummaryTask
{
    [CmdletBinding(DefaultParameterSetName='SetSummaryTaskByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetSummaryTaskByName', Mandatory=$true)]
        [Alias('SummaryTaskName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${TaskName},

        [Parameter(ParameterSetName='SetSummaryTaskById', Mandatory=$true)]
        [Alias('SummaryTaskId')]
        [int]
        ${Id},

        [switch]
        ${RunNow},

        [Alias('RunIntervalMinutes')]
        [ValidateRange(1, 1440)]
        [int]
        ${RunIntervalMins},

        [Alias('DisableFixedRunInterval')]
        [switch]
        ${DisableFixedRun},

        [Parameter(ParameterSetName='SetSummaryTaskByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SummaryTaskObject')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SummaryTask')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMSiteSystemServer
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [string]
        ${PublicFqdn},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [bool]
        ${FdmOperation},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [switch]
        ${UseSiteServerAccount},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [string]
        ${AccountName},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [bool]
        ${EnableProxy},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ProxyServerName},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [ValidateRange(1, 65535)]
        [uint32]
        ${ProxyServerPort},

        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [PSTypeName('IResultObject#SMS_SCI_Reserved')]
        [System.Object]
        ${ProxyAccessAccount},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SiteSystemServer')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Site System')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMSoftwareDistributionComponent
{
    [CmdletBinding(DefaultParameterSetName='SearchBySiteCodeMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory_ClientComputerAccount')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory_ClientComputerAccount')]
        [ValidateRange(1, 50)]
        [int]
        ${MaximumPackageCount},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory_ClientComputerAccount')]
        [Alias('MaximumThreadsPerPackage')]
        [ValidateRange(1, 999)]
        [int]
        ${MaximumThreadCountPerPackage},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory_ClientComputerAccount')]
        [ValidateRange(1, 1000)]
        [int]
        ${RetryCount},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory_ClientComputerAccount')]
        [Alias('DelayBeforeRetryingMinutes')]
        [ValidateRange(1, 1440)]
        [int]
        ${DelayBeforeRetryingMins},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory_ClientComputerAccount')]
        [ValidateRange(1, 1000)]
        [int]
        ${MulticastRetryCount},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory_ClientComputerAccount')]
        [Alias('MulticastDelayBeforeRetryingMinutes')]
        [ValidateRange(1, 1440)]
        [int]
        ${MulticastDelayBeforeRetryingMins},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory_ClientComputerAccount')]
        [switch]
        ${ClientComputerAccount},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Alias('NetworkAccessAccountNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${NetworkAccessAccountName},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Alias('AddNetworkAccessAccountNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddNetworkAccessAccountName},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Alias('RemoveNetworkAccessAccountNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveNetworkAccessAccountName},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Alias('CleanNetworkAccessAccountNames')]
        [switch]
        ${CleanNetworkAccessAccountName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMSoftwareInventory
{
    [CmdletBinding(DefaultParameterSetName='SetById', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('SoftwareKey')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [Alias('CommonName')]
        [string[]]
        ${Name},

        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AISoftwareList')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('CommonPublisher')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Publisher},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [int]
        ${FamilyId},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [int]
        ${CategoryId},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('Label1Id')]
        [int]
        ${Tag1Id},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('Label2Id')]
        [int]
        ${Tag2Id},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('Label3Id')]
        [int]
        ${Tag3Id},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('CleanLabel1')]
        [switch]
        ${CleanTag1},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('CleanLabel2')]
        [switch]
        ${CleanTag2},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [Alias('CleanLabel3')]
        [switch]
        ${CleanTag3},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [string]
        ${ParentSoftwareId},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMSoftwareMeteringRule
{
    [CmdletBinding(DefaultParameterSetName='SetByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('RuleId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_MeteredProductRule')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [string]
        ${FileName},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [string]
        ${OriginalFileName},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [string]
        ${Comment},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [int]
        ${LanguageId},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [string]
        ${ProductName},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewProductName},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByValueMandatory')]
        [string]
        ${Path},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMSoftwareMeteringSetting
{
    [CmdletBinding(DefaultParameterSetName='SetByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByName')]
        [ValidateRange(30, 180)]
        [int]
        ${DataRetentionDayCount},

        [Parameter(ParameterSetName='SetByName')]
        [bool]
        ${AutoCreateDisabledRule},

        [Parameter(ParameterSetName='SetByName')]
        [ValidateRange(1, 99)]
        [int]
        ${AutoCreatePercentage},

        [Parameter(ParameterSetName='SetByName')]
        [ValidateRange(1, 1000)]
        [int]
        ${AutoCreateThreshold},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMSoftwareUpdate
{
    [CmdletBinding(DefaultParameterSetName='SetById', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('CIId','CI_ID')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SoftwareUpdate')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [Alias('MaximumExecutionMinutes')]
        [ValidateRange(5, 9999)]
        [int]
        ${MaximumExecutionMins},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [System.Object]
        ${CustomSeverity},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMSoftwareUpdateAutoDeploymentRule
{
    [CmdletBinding(DefaultParameterSetName='SearchByNameMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('AutoDeploymentId')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_AutoDeployment')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [string]
        ${Description},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [bool]
        ${AddToExistingSoftwareUpdateGroup},

        [Alias('EnableAfterCreate')]
        [bool]
        ${EnabledAfterCreate},

        [Alias('Enabled','EnableDeployment')]
        [bool]
        ${Enable},

        [bool]
        ${SendWakeupPacket},

        [System.Object]
        ${VerboseLevel},

        [bool]
        ${DeployWithoutLicense},

        [System.Object]
        ${RunType},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [bool]
        ${UseUtc},

        [bool]
        ${AvailableImmediately},

        [int]
        ${AvailableTime},

        [System.Object]
        ${AvailableTimeUnit},

        [bool]
        ${DeadlineImmediately},

        [int]
        ${DeadlineTime},

        [System.Object]
        ${DeadlineTimeUnit},

        [System.Object]
        ${UserNotification},

        [bool]
        ${AllowSoftwareInstallationOutsideMaintenanceWindow},

        [bool]
        ${AllowRestart},

        [bool]
        ${SuppressRestartServer},

        [bool]
        ${SuppressRestartWorkstation},

        [bool]
        ${WriteFilterHandling},

        [bool]
        ${GenerateFailureAlert},

        [bool]
        ${GenerateSuccessAlert},

        [ValidateRange(0, 99)]
        [int]
        ${SuccessPercentage},

        [int]
        ${AlertTime},

        [System.Object]
        ${AlertTimeUnit},

        [bool]
        ${DisableOperationManager},

        [bool]
        ${GenerateOperationManagerAlert},

        [bool]
        ${NoInstallOnRemote},

        [bool]
        ${NoInstallOnUnprotected},

        [bool]
        ${UseBranchCache},

        [bool]
        ${DownloadFromMicrosoftUpdate},

        [bool]
        ${AllowUseMeteredNetwork},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${LanguageSelection},

        [string[]]
        ${ArticleId},

        [string[]]
        ${BulletinId},

        [System.Object[]]
        ${CustomSeverity},

        [System.Object[]]
        ${CMTag},

        [System.Nullable[System.Object]]
        ${DateReleasedOrRevised},

        [string[]]
        ${UpdateDescription},

        [bool]
        ${DownloadFromInternet},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Location},

        [Alias('Languages','UpdateLocales','UpdateLocale')]
        [string[]]
        ${Language},

        [string[]]
        ${Required},

        [Alias('Severities')]
        [System.Object[]]
        ${Severity},

        [System.Nullable[bool]]
        ${Superseded},

        [Alias('Titles')]
        [string[]]
        ${Title},

        [Alias('UpdateClassifications')]
        [string[]]
        ${UpdateClassification},

        [Alias('Products')]
        [string[]]
        ${Product},

        [bool]
        ${MicrosoftAsVendor},

        [Alias('Vendors')]
        [ValidateNotNullOrEmpty()]
        [ValidateSet('Microsoft','Local Publisher')]
        [string[]]
        ${Vendor},

        [switch]
        ${Force},

        [switch]
        ${PassThru},

        [System.Object]
        ${DeploymentRing},

        [Alias('UpdateDeploymentWaitDays')]
        [int]
        ${UpdateDeploymentWaitDay},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMAutoDeploymentRule Set-CMWindowsServicingPlan -Value Set-CMSoftwareUpdateAutoDeploymentRule Set-CMSoftwareUpdateAutoDeploymentRule

function Set-CMSoftwareUpdateBasedClientInstallation
{
    [CmdletBinding(DefaultParameterSetName='SearchBySiteCodeMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('SiteName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory', Mandatory=$true)]
        [bool]
        ${EnableWsus},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMSoftwareUpdateDeployment
{
    [CmdletBinding(DefaultParameterSetName='SetByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetSoftwareUpdateDeploymentByNameMandatory', Mandatory=$true)]
        [string]
        ${SoftwareUpdateName},

        [Parameter(ParameterSetName='SetSoftwareUpdateDeploymentByIdMandatory', Mandatory=$true)]
        [string]
        ${SoftwareUpdateId},

        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SoftwareUpdate','DeploymentSummary','SoftwareUpdateGroup','Assignment')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetSoftwareUpdateGroupDeploymentByNameMandatory', Mandatory=$true)]
        [string]
        ${SoftwareUpdateGroupName},

        [Parameter(ParameterSetName='SetSoftwareUpdateGroupDeploymentByIdMandatory', Mandatory=$true)]
        [string]
        ${SoftwareUpdateGroupId},

        [string]
        ${DeploymentName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewDeploymentName},

        [string]
        ${Description},

        [System.Object]
        ${DeploymentType},

        [bool]
        ${SendWakeupPacket},

        [System.Object]
        ${VerbosityLevel},

        [System.Object]
        ${TimeBasedOn},

        [datetime]
        ${AvailableDateTime},

        [datetime]
        ${AlertDateTime},

        [datetime]
        ${DeploymentExpireDateTime},

        [System.Object]
        ${UserNotification},

        [bool]
        ${SoftwareInstallation},

        [bool]
        ${AllowRestart},

        [bool]
        ${RestartServer},

        [bool]
        ${RestartWorkstation},

        [bool]
        ${PersistOnWriteFilterDevice},

        [bool]
        ${GenerateSuccessAlert},

        [ValidateRange(0, 99)]
        [int]
        ${PercentSuccess},

        [bool]
        ${DisableOperationsManagerAlert},

        [bool]
        ${GenerateOperationsManagerAlert},

        [System.Object]
        ${ProtectedType},

        [System.Object]
        ${UnprotectedType},

        [bool]
        ${UseBranchCache},

        [bool]
        ${DownloadFromMicrosoftUpdate},

        [bool]
        ${AllowUseMeteredNetwork},

        [bool]
        ${Enable},

        [bool]
        ${RequirePostRebootFullScan},

        [switch]
        ${PassThru},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMSoftwareUpdateDeploymentPackage
{
    [CmdletBinding(DefaultParameterSetName='SetById', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('PackageId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_SoftwareUpdatesPackage')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [string]
        ${Description},

        [Alias('PackageSourcePath','PkgSourcePath')]
        [string]
        ${Path},

        [System.Object]
        ${Priority},

        [Alias('RemoveDownloadedExpiredSoftwareUpdateFromPackage')]
        [switch]
        ${RemoveExpired},

        [Alias('RemoveDownloadedSupersededSoftwareUpdateFromPackage')]
        [switch]
        ${RemoveSuperseded},

        [Alias('RefreshDistributionPointAfterRemoveSoftwareUpdateFromPackage')]
        [switch]
        ${RefreshDistributionPoint},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMSoftwareUpdateGroup
{
    [CmdletBinding(DefaultParameterSetName='SetById', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AuthorizationList')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Alias('LocalizedDescription')]
        [string]
        ${Description},

        [Alias('AddSoftwareUpdates')]
        [PSTypeName('IResultObject#SMS_SoftwareUpdate')]
        [System.Object[]]
        ${AddSoftwareUpdate},

        [Alias('RemoveSoftwareUpdates')]
        [PSTypeName('IResultObject#SMS_SoftwareUpdate')]
        [System.Object[]]
        ${RemoveSoftwareUpdate},

        [switch]
        ${ClearSoftwareUpdate},

        [switch]
        ${ClearExpiredSoftwareUpdate},

        [switch]
        ${ClearSupersededSoftwareUpdate},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMSoftwareUpdatePoint
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByValue')]
        [Parameter(ParameterSetName='ByName')]
        [Alias('WsusIisPort')]
        [int]
        ${HttpPort},

        [Parameter(ParameterSetName='ByValue')]
        [Parameter(ParameterSetName='ByName')]
        [Alias('WsusIisSslPort')]
        [int]
        ${HttpsPort},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SoftwareUpdatePoint')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Software Update Point')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='ByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${ClientConnectionType},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('SslWsus','WsusSsl')]
        [bool]
        ${EnableSsl},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${EnableCloudGateway},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${UseProxy},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${UseProxyForAutoDeploymentRule},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${AnonymousWsusAccess},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [string]
        ${WsusAccessAccount},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [AllowEmptyString()]
        [AllowNull()]
        [string]
        ${NlbVirtualIP},

        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [string]
        ${PublicVirtualIP},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMSoftwareUpdatePointComponent
{
    [CmdletBinding(DefaultParameterSetName='SearchBySiteCodeMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('SiteName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [string]
        ${DefaultWsusServer},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [System.Object]
        ${SynchronizeAction},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [string]
        ${UpstreamSourceLocation},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [System.Object]
        ${ReportingEvent},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveUpdateClassification},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddUpdateClassification},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Alias('AddCompanies')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddCompany},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Alias('RemoveCompanies')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveCompany},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Alias('AddProductFamilies')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddProductFamily},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Alias('RemoveProductFamilies')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveProductFamily},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Alias('AddProducts')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddProduct},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Alias('RemoveProducts')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveProduct},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [bool]
        ${EnableSynchronization},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [bool]
        ${EnableSyncFailureAlert},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Alias('ImmediatelyExpireSupersedenceForNonFeature')]
        [bool]
        ${ImmediatelyExpireSupersedence},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [bool]
        ${ImmediatelyExpireSupersedenceForFeature},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [bool]
        ${EnableCallWsusCleanupWizard},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Alias('WaitMonthForNonFeature')]
        [ValidateRange(1, 99)]
        [int]
        ${WaitMonth},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [ValidateRange(1, 99)]
        [int]
        ${WaitMonthForFeature},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddLanguageUpdateFile},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveLanguageUpdateFile},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Alias('AddLanguageSummaryDetails')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddLanguageSummaryDetail},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [Alias('RemoveLanguageSummaryDetails')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveLanguageSummaryDetail},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [Parameter(ParameterSetName='SearchByNameMandatory')]
        [Parameter(ParameterSetName='SearchByValueMandatory')]
        [ValidateSet('FullFilesOnly','ExpressForWindows10Only')]
        [System.Object]
        ${ContentFileOption},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Site','SiteComponent')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMSoftwareUpdateSummarizationSchedule
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(Mandatory=$true)]
        [int]
        ${Interval},

        [Parameter(Mandatory=$true)]
        [ValidateSet('Days','Hours','Minutes')]
        [System.Object]
        ${Unit},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMStateMigrationPoint
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Alias('Name','ServerName')]
        [string]
        ${SiteSystemServerName},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${AddStorageFolder},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${RemoveStorageFolder},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [switch]
        ${DeleteImmediately},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [int]
        ${TimeDeleteAfter},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [System.Object]
        ${TimeUnit},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [bool]
        ${EnableRestoreOnlyMode},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [bool]
        ${AllowFallbackSourceLocationForContent},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${AddBoundaryGroupName},

        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveBoundaryGroupName},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('StateMigrationPoint')]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS State Migration Point')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMStatusFilterRule
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [string]
        ${SiteCode},

        [Parameter(Mandatory=$true)]
        [string]
        ${Name},

        [ValidateSet('Increase','Decrease')]
        [System.Object]
        ${Priority},

        [ValidateNotNullOrEmpty()]
        [string]
        ${Source},

        [string]
        ${StatusFilterRuleSiteCode},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteSystemServerName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ComponentName},

        [System.Object]
        ${MessageType},

        [System.Object]
        ${SeverityType},

        [ValidateRange(0, 65535)]
        [int]
        ${MessageId},

        [string]
        ${PropertyId},

        [ValidateNotNullOrEmpty()]
        [string]
        ${PropertyValue},

        [bool]
        ${WriteToDatabase},

        [Alias('AllowUserDeleteMessagesAfterThresholdDays')]
        [ValidateRange(1, 999)]
        [int]
        ${AllowDeleteAfterDays},

        [bool]
        ${ReportToEventLog},

        [bool]
        ${ReplicateToParentSite},

        [ValidateSet('High','Medium','Low')]
        [System.Object]
        ${ReplicationPriority},

        [bool]
        ${RunProgram},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ProgramPath},

        [bool]
        ${ForwardToStatusSummarizer},

        [bool]
        ${ProcessLowerPriorityRule},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMStatusMessageQuery
{
    [CmdletBinding(DefaultParameterSetName='SetStatusMessageQueryByObjectMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetStatusMessageQueryByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='DeleteMessageByIdMandatory', Mandatory=$true)]
        [Alias('QueryId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SetStatusMessageQueryByNameMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='DeleteMessageByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetStatusMessageQueryByObjectMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='DeleteMessageByObjectMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Query')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetStatusMessageQueryByIdMandatory')]
        [Parameter(ParameterSetName='SetStatusMessageQueryByNameMandatory')]
        [Parameter(ParameterSetName='SetStatusMessageQueryByObjectMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Parameter(ParameterSetName='SetStatusMessageQueryByIdMandatory')]
        [Parameter(ParameterSetName='SetStatusMessageQueryByNameMandatory')]
        [Parameter(ParameterSetName='SetStatusMessageQueryByObjectMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Expression},

        [Parameter(ParameterSetName='SetStatusMessageQueryByIdMandatory')]
        [Parameter(ParameterSetName='SetStatusMessageQueryByNameMandatory')]
        [Parameter(ParameterSetName='SetStatusMessageQueryByObjectMandatory')]
        [Alias('Comments')]
        [string]
        ${Comment},

        [Parameter(ParameterSetName='DeleteMessageByObjectMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='DeleteMessageByNameMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='DeleteMessageByIdMandatory', Mandatory=$true)]
        [switch]
        ${DeleteMessage},

        [Parameter(ParameterSetName='DeleteMessageByObjectMandatory')]
        [Parameter(ParameterSetName='DeleteMessageByNameMandatory')]
        [Parameter(ParameterSetName='DeleteMessageByIdMandatory')]
        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMStatusReportingComponent
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('SiteName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Site')]
        [System.Object]
        ${InputObject},

        [bool]
        ${ServerReportChecked},

        [System.Object]
        ${ServerReportType},

        [bool]
        ${ServerReportFailureChecked},

        [bool]
        ${ServerLogChecked},

        [System.Object]
        ${ServerLogType},

        [bool]
        ${ServerLogFailureChecked},

        [bool]
        ${ClientReportChecked},

        [System.Object]
        ${ClientReportType},

        [bool]
        ${ClientReportFailureChecked},

        [bool]
        ${ClientLogChecked},

        [System.Object]
        ${ClientLogType},

        [bool]
        ${ClientLogFailureChecked},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMStatusSummarizer
{
    [CmdletBinding(DefaultParameterSetName='SetComponentStatusSummarizer', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetAppDeploymentSummarizer')]
        [Parameter(ParameterSetName='SetAppStatisticsSummarizer')]
        [Parameter(ParameterSetName='SetComponentStatusSummarizer')]
        [Parameter(ParameterSetName='SetSiteSystemStatusSummarizer')]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SetComponentStatusSummarizer', Mandatory=$true)]
        [switch]
        ${ComponentStatusSummarizer},

        [Parameter(ParameterSetName='SetComponentStatusSummarizer')]
        [Parameter(ParameterSetName='SetSiteSystemStatusSummarizer')]
        [bool]
        ${EnableStatusSummarizer},

        [Parameter(ParameterSetName='SetComponentStatusSummarizer')]
        [Parameter(ParameterSetName='SetSiteSystemStatusSummarizer')]
        [bool]
        ${ReplicateToParentSite},

        [Parameter(ParameterSetName='SetComponentStatusSummarizer')]
        [Parameter(ParameterSetName='SetSiteSystemStatusSummarizer')]
        [System.Object]
        ${ReplicationPriority},

        [Parameter(ParameterSetName='SetComponentStatusSummarizer')]
        [Alias('ThresholdPeriod')]
        [ValidateNotNullOrEmpty()]
        [ValidateSet('Since 0:00:00','Since 4:00:00','Since 8:00:00','Since 12:00:00','Since 16:00:00','Since 20:00:00','Since Sunday','Since Monday','Since Tuesday','Since Wednesday','Since Thursday','Since Friday','Since Saturday','Since 15th of the Month','Since 1st of the Month','Since Site Installation')]
        [string]
        ${TimeThreshold},

        [Parameter(ParameterSetName='SetSiteSystemStatusSummarizer', Mandatory=$true)]
        [switch]
        ${SiteSystemStatusSummarizer},

        [Parameter(ParameterSetName='SetSiteSystemStatusSummarizer')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [Parameter(ParameterSetName='SetSiteSystemStatusSummarizer')]
        [ValidateNotNullOrEmpty()]
        [ValidateRange(0, 2147483647)]
        [int]
        ${WarningSizeKB},

        [Parameter(ParameterSetName='SetSiteSystemStatusSummarizer')]
        [ValidateRange(0, 2147483647)]
        [int]
        ${CriticalSizeKB},

        [Parameter(ParameterSetName='SetAppDeploymentSummarizer', Mandatory=$true)]
        [switch]
        ${ApplicationDeploymentSummarizer},

        [Parameter(ParameterSetName='SetAppStatisticsSummarizer', Mandatory=$true)]
        [Alias('ApplicationStatisticsSummarizer')]
        [switch]
        ${ApplicationStatisticSummarizer},

        [Parameter(ParameterSetName='SetAppDeploymentSummarizer')]
        [Parameter(ParameterSetName='SetAppStatisticsSummarizer')]
        [Alias('MinuteInterval')]
        [ValidateNotNullOrEmpty()]
        [ValidateRange(5, 1440)]
        [int]
        ${Minutes},

        [Parameter(ParameterSetName='SetAppDeploymentSummarizer')]
        [Parameter(ParameterSetName='SetAppStatisticsSummarizer')]
        [Alias('HourInterval')]
        [ValidateRange(1, 168)]
        [int]
        ${Hours},

        [Parameter(ParameterSetName='SetAppDeploymentSummarizer')]
        [Parameter(ParameterSetName='SetAppStatisticsSummarizer')]
        [Alias('DayInterval')]
        [ValidateRange(1, 90)]
        [int]
        ${Days},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMTaskSequence
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [Alias('Name')]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [string]
        ${Description},

        [string]
        ${Category},

        [bool]
        ${UseDefaultText},

        [string]
        ${CustomText},

        [bool]
        ${RunAnotherProgram},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentPackageId},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ProgramName},

        [bool]
        ${RunEveryTime},

        [bool]
        ${SuppressNotification},

        [Alias('EnableNotifications')]
        [bool]
        ${EnableNotification},

        [bool]
        ${DisableTaskSequence},

        [bool]
        ${EnableTaskSequence},

        [Alias('Duration')]
        [ValidateRange(0, 1440)]
        [long]
        ${MaxRunTimeMins},

        [bool]
        ${UseBootImage},

        [ValidateNotNullOrEmpty()]
        [string]
        ${BootImageId},

        [Alias('AddSupportedOperatingSystemPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${AddSupportedOperatingSystemPlatform},

        [Alias('RemoveSupportedOperatingSystemPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${RemoveSupportedOperatingSystemPlatform},

        [Alias('ClearSupportedOperatingSystemPlatforms')]
        [switch]
        ${RunOnAnyPlatform},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMTaskSequenceDeployment
{
    [CmdletBinding(DefaultParameterSetName='SetTaskSequenceDeploymentByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetTaskSequenceDeploymentByNameMandatory', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='SetTaskSequenceDeploymentByIdMandatory', Mandatory=$true)]
        [string]
        ${TaskSequencePackageId},

        [Parameter(ParameterSetName='SetTaskSequenceDeploymentByDeploymentIdMandatory', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${TaskSequenceDeploymentId},

        [Parameter(ParameterSetName='SetTaskSequenceDeploymentByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Deployment','DeploymentSummary','TaskSequence','Advertisement')]
        [System.Object]
        ${InputObject},

        [string]
        ${Comment},

        [bool]
        ${SendWakeupPacket},

        [bool]
        ${UseMeteredNetwork},

        [System.Object]
        ${MakeAvailableTo},

        [datetime]
        ${DeploymentAvailableDateTime},

        [bool]
        ${UseUtcForAvailableSchedule},

        [System.Nullable[datetime]]
        ${DeploymentExpireDateTime},

        [bool]
        ${UseUtcForExpireSchedule},

        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${ScheduleEvent},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object[]]
        ${Schedule},

        [System.Object]
        ${RerunBehavior},

        [bool]
        ${AllowUsersRunIndependently},

        [bool]
        ${ShowTaskSequenceProgress},

        [bool]
        ${SoftwareInstallation},

        [bool]
        ${SystemRestart},

        [bool]
        ${PersistOnWriteFilterDevice},

        [bool]
        ${InternetOption},

        [System.Object]
        ${DeploymentOption},

        [Alias('AllowUseRemoteDistributionPoint')]
        [bool]
        ${AllowSharedContent},

        [bool]
        ${AllowFallback},

        [Alias('CreateAlertBaseOnPercentSuccess')]
        [bool]
        ${CreateAlertOnSuccess},

        [ValidateRange(0, 99)]
        [int]
        ${PercentSuccess},

        [datetime]
        ${AlertDateTime},

        [Alias('CreateAlertBaseOnPercentFailure')]
        [bool]
        ${CreateAlertOnFailure},

        [ValidateRange(0, 99)]
        [int]
        ${PercentFailure},

        [switch]
        ${PassThru},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [PSTypeName('IResultObject#SMS_Collection')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMTaskSequenceGroup
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearSteps','ClearStep','CleanSteps')]
        [switch]
        ${CleanStep},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddSteps')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_Step')]
        [System.Object[]]
        ${AddStep},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('InsertStepsStartIndex')]
        [int]
        ${InsertStepStartIndex},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMTSStepApplyDataImage
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [PSTypeName('IResultObject#SMS_ImagePackage')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${ImagePackage},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${ImagePackageIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('DestinationVariableName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DestinationVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${Destination},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateRange(0, 99)]
        [int]
        ${DestinationDisk},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateRange(0, 99)]
        [int]
        ${DestinationPartition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('DestinationLogicalDrive')]
        [string]
        ${DestinationDriveLetter},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('WipePartitionBeforeApplyImage')]
        [bool]
        ${WipePartition},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepApplyDataImage -Value Set-CMTSStepApplyDataImage

function Set-CMTSStepApplyDriverPackage
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${EnableRecurse},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${EnableUnsignedDriver},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${BootCriticalDriverId},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${BootCriticalContentUniqueId},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${BootCriticalInfFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${BootCriticalHardwareComponent},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${BootCriticalId},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepApplyDriverPackage -Value Set-CMTSStepApplyDriverPackage

function Set-CMTSStepApplyNetworkSetting
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [string]
        ${WorkgroupName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [string]
        ${DomainName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [string]
        ${DomainOU},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('DomainUserName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('DomainUserPassword')]
        [securestring]
        ${UserPassword},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [string]
        ${DnsSuffix},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${EnableTcpIpFiltering},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${CleanAdapterSetting},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('RemoveAdapterSettingNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${RemoveAdapterSettingName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddAdapterSettings')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_NetworkAdapterSettings')]
        [System.Object[]]
        ${AddAdapterSetting},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepApplyNetworkSetting -Value Set-CMTSStepApplyNetworkSetting

function Set-CMTSStepApplyOperatingSystem
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [PSTypeName('IResultObject#SMS_ImagePackage')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${ImagePackage},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${ImagePackageIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('UpgradePackage')]
        [PSTypeName('IResultObject#SMS_OperatingSystemInstallPackage')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${InstallPackage},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('UpgradePackageIndex')]
        [int]
        ${InstallPackageIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AnswerFilePackage')]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object]
        ${ConfigFilePackage},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AnswerFileName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConfigFileName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('DestinationVariableName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DestinationVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${Destination},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateRange(0, 99)]
        [int]
        ${DestinationDisk},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateRange(1, 99)]
        [int]
        ${DestinationPartition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('DestinationLogicalDrive')]
        [string]
        ${DestinationDriveLetter},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AllowAccessFromDistributionPoint')]
        [bool]
        ${RunFromNet},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepApplyOperatingSystem -Value Set-CMTSStepApplyOperatingSystem

function Set-CMTSStepApplyWindowsSetting
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('RegisteredUserName')]
        [ValidateLength(1, 50)]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('RegisteredOrganizationName')]
        [ValidateLength(1, 50)]
        [string]
        ${OrganizationName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ProductKey},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${ServerLicensing},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateRange(5, 9999)]
        [int]
        ${MaximumConnection},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [securestring]
        ${Password},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.TimeZoneInfo]
        ${TimeZone},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepApplyWindowsSetting -Value Set-CMTSStepApplyWindowsSetting

function Set-CMTSStepAutoApplyDriver
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('DriverCategories')]
        [PSTypeName('IResultObject#SMS_CategoryInstance')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${DriverCategory},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${ConsiderAllCategories},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${InstallDriverOption},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${IsAllowedUnsignedDriver},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepAutoApplyDriver -Value Set-CMTSStepAutoApplyDriver

function Set-CMTSStepCaptureNetworkSettings
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${MigrateAdapterSettings},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${MigrateNetworkMembership},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepCaptureNetworkSettings -Value Set-CMTSStepCaptureNetworkSettings

function Set-CMTSStepCaptureSystemImage
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('CaptureDestination')]
        [string]
        ${Path},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [string]
        ${ImageDescription},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [string]
        ${ImageVersion},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [string]
        ${ImageCreator},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('CaptureUserName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('CapturePassword')]
        [securestring]
        ${Password},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMTSStepCaptureUserState
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('UserStateMigrationToolPackage')]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object]
        ${Package},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${ModeOption},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ConfigFiles')]
        [string[]]
        ${ConfigFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConfigFiles')]
        [string[]]
        ${AddConfigFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('RemoveConfigFiles')]
        [string[]]
        ${RemoveConfigFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('CleanConfigFiles')]
        [switch]
        ${CleanConfigFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${VerboseLogging},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${SkipEncryptedFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${FileAccessOption},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${ContinueOnLockedFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${UseHardLinks},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${OfflineUserState},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepCaptureUserState -Value Set-CMTSStepCaptureUserState

function Set-CMTSStepCaptureWindowsSettings
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${MigrateComputerName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${MigrateRegistrationInfo},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${MigrateTimeZone},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepCaptureSystemImage Set-CMTaskSequenceStepCaptureWindowsSettings -Value Set-CMTSStepCaptureWindowsSettings Set-CMTSStepCaptureWindowsSettings

function Set-CMTSStepConnectNetworkFolder
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Path},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('DriveLetter')]
        [string]
        ${Drive},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [securestring]
        ${UserPassword},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepConnectNetworkFolder -Value Set-CMTSStepConnectNetworkFolder

function Set-CMTSStepConvertDisk
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateRange(0, 99)]
        [int]
        ${DiskNumber},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepConvertDisk -Value Set-CMTSStepConvertDisk

function Set-CMTSStepDisableBitLocker
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('SpecificDrive')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Drive},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('UseCurrentOperatingSystemDrive')]
        [switch]
        ${CurrentDrive},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepDisableBitLocker -Value Set-CMTSStepDisableBitLocker

function Set-CMTSStepDownloadPackageContent
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddPackages')]
        [System.Object[]]
        ${AddPackage},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('RemovePackageByIds')]
        [string[]]
        ${RemovePackageId},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('CleanPackages')]
        [switch]
        ${CleanPackage},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${LocationOption},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('DestinationCustomPath')]
        [string]
        ${Path},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('DestinationVariableName')]
        [string]
        ${DestinationVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ContinueDownloadOnError')]
        [bool]
        ${ContinueDownload},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepDownloadPackageContent -Value Set-CMTSStepDownloadPackageContent

function Set-CMTSStepEnableBitLocker
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${TpmOnly},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${UsbOnly},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${TpmAndUsb},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${TpmAndPin},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('SpecificDrive')]
        [string]
        ${Drive},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [securestring]
        ${Pin},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${CreateKeyOption},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${IsWaitingForBitLockerComplete},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepEnableBitLocker -Value Set-CMTSStepEnableBitLocker

function Set-CMTSStepInstallApplication
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('Applications')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${Application},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${BaseVariableName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${EnableContinueOnInstallError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateRange(1, 5)]
        [int]
        ${RetryCount},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepInstallApplication -Value Set-CMTSStepInstallApplication

function Set-CMTSStepInstallSoftware
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Program')]
        [System.Object]
        ${Program},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${BaseVariableName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${EnableContinueOnInstallError},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepInstallSoftware -Value Set-CMTSStepInstallSoftware

function Set-CMTSStepInstallUpdate
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('InstallUpdateBasedOnTypeOfDeployment')]
        [System.Object]
        ${Target},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('EnableEvaluateFromCache')]
        [bool]
        ${UseCache},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateRange(0, 5)]
        [int]
        ${RetryCount},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepInstallUpdate -Value Set-CMTSStepInstallUpdate

function Set-CMTSStepJoinDomainWorkgroup
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${WorkgroupName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DomainName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('OrganizationalUnit')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${OU},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [securestring]
        ${UserPassword},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepJoinDomainWorkgroup -Value Set-CMTSStepJoinDomainWorkgroup

function Set-CMTSStepOfflineEnableBitLocker
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('DestinationDisk')]
        [ValidateRange(0, 99)]
        [int]
        ${Disk},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('DestinationPartition')]
        [ValidateRange(1, 99)]
        [int]
        ${Partition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('SpecificDrive')]
        [string]
        ${Drive},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('DestinationVariable')]
        [string]
        ${VariableName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('UseNextAvailableFormattedPartition')]
        [switch]
        ${NextPartition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${EnableSkipWhenTpmInvalid},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepOfflineEnableBitLocker -Value Set-CMTSStepOfflineEnableBitLocker

function Set-CMTSStepPartitionDisk
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateSet('Mbr','Gpt')]
        [System.Object]
        ${DiskType},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${IsBootDisk},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateRange(0, 99)]
        [int]
        ${DiskNumber},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('PartitionSettings')]
        [PSTypeName('IResultObject#SMS_TaskSequence_PartitionSettings')]
        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${PartitionSetting},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepPartitionDisk -Value Set-CMTSStepPartitionDisk

function Set-CMTSStepPrepareConfigMgrClient
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepPrepareConfigMgrClient -Value Set-CMTSStepPrepareConfigMgrClient

function Set-CMTSStepPrepareWindows
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AutomaticallyBuildMassStorageDriverList')]
        [bool]
        ${BuildDriverList},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('DoNotResetActivationFlag')]
        [bool]
        ${KeepActivation},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepPrepareWindows -Value Set-CMTSStepPrepareWindows

function Set-CMTSStepPrestartCheck
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('EnableCheckFreeDiskSpace')]
        [bool]
        ${CheckSpace},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('MinimumFreeDiskSpace')]
        [ValidateRange(0, 2000000)]
        [int]
        ${DiskSpace},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('EnableCheckMemory')]
        [bool]
        ${CheckMemory},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('MinimumMemory')]
        [ValidateRange(0, 2000000)]
        [int]
        ${Memory},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('EnableCheckOSType')]
        [bool]
        ${CheckOS},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('CurrentOSType')]
        [System.Object]
        ${OS},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('EnableCheckProcessorSpeed')]
        [bool]
        ${CheckSpeed},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('MinimumProcessorSpeed')]
        [ValidateRange(0, 2000000)]
        [int]
        ${Speed},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepPrestartCheck -Value Set-CMTSStepPrestartCheck

function Set-CMTSStepReboot
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${RunAfterRestart},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [string]
        ${NotificationMessage},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateRange(1, 9999)]
        [int]
        ${MessageTimeout},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepReboot -Value Set-CMTSStepReboot

function Set-CMTSStepReleaseStateStore
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepReleaseStateStore -Value Set-CMTSStepReleaseStateStore

function Set-CMTSStepRequestStateStore
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateRange(0, 30)]
        [int]
        ${RetryCount},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateRange(0, 600)]
        [int]
        ${RetryTime},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('FallbackToNaa')]
        [bool]
        ${FallbackToAccount},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${RequestOption},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepRequestStateStore -Value Set-CMTSStepRequestStateStore

function Set-CMTSStepRestoreUserState
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('UserStateMigrationToolPackage')]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object]
        ${Package},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${ModeOption},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConfigFiles')]
        [string[]]
        ${AddConfigFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('RemoveConfigFiles')]
        [string[]]
        ${RemoveConfigFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('CleanConfigFiles')]
        [switch]
        ${CleanConfigFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('RestoreLocalComputerUserProfile')]
        [bool]
        ${RestoreLocalAccount},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('NewPasswordForLocalAccount')]
        [ValidateNotNullOrEmpty()]
        [securestring]
        ${Password},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${ContinueOnRestore},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${VerboseLogging},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepRestoreUserState -Value Set-CMTSStepRestoreUserState

function Set-CMTSStepRunCommandLine
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CommandLine},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('StartIn')]
        [string]
        ${WorkingDirectory},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('TimeoutInMinutes')]
        [ValidateRange(1, 999)]
        [int]
        ${Timeout},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsEnabledRedirectionFor64BitFileSystem')]
        [bool]
        ${IsWow64RedirectionEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${IsRunAsUser},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${UserName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [securestring]
        ${UserPassword},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('SuccessCodes')]
        [int[]]
        ${SuccessCode},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepRunCommandLine -Value Set-CMTSStepRunCommandLine

function Set-CMTSStepRunPowerShellScript
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${PackageId},

        [Alias('StartIn')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${WorkingDirectory},

        [Alias('TimeoutInMinutes')]
        [ValidateRange(1, 999)]
        [int]
        ${TimeoutMins},

        [string]
        ${UserName},

        [Alias('Password')]
        [securestring]
        ${UserPassword},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ScriptName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('SourceCode')]
        [string]
        ${SourceScript},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('Output','OutputVariable')]
        [string]
        ${OutputVariableName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('Parameters')]
        [string]
        ${Parameter},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('SuccessCodes')]
        [int[]]
        ${SuccessCode},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('PowerShellExecutionPolicy')]
        [System.Object]
        ${ExecutionPolicy},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepRunPowerShellScript -Value Set-CMTSStepRunPowerShellScript

function Set-CMTSStepSetDynamicVariable
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddRules')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_Rule')]
        [System.Object[]]
        ${AddRule},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('CleanRules')]
        [switch]
        ${CleanRule},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepSetDynamicVariable -Value Set-CMTSStepSetDynamicVariable

function Set-CMTSStepSetupWindowsAndConfigMgr
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClientPackageId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('PreproductionClientPackageId')]
        [string]
        ${PreproductionPackageId},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('InstallationProperties')]
        [string]
        ${InstallationProperty},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepSetupWindowsAndConfigMgr -Value Set-CMTSStepSetupWindowsAndConfigMgr

function Set-CMTSStepSetVariable
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('VariableName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${TaskSequenceVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('VariableValue')]
        [string]
        ${TaskSequenceVariableValue},

        [Alias('IsHidden','IsMask')]
        [bool]
        ${IsMasked},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepSetVariable -Value Set-CMTSStepSetVariable

function Set-CMTSStepUpgradeOperatingSystem
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${UpgradePackage},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SourcePath},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${EditionIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ProductKey},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${DriverPackage},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${StagedContent},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateRange(0, 43200)]
        [int]
        ${SetupTimeout},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${ScanOnly},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [bool]
        ${IgnoreMessage},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${DynamicUpdateSetting},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Alias('Id','TaskSequencePackageId')]
        [string]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [string]
        ${TaskSequenceName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('TaskSequence')]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [string]
        ${StepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(1, 50)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewStepName},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [ValidateLength(0, 256)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepContinueOnError')]
        [bool]
        ${IsContinueOnError},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('IsThisStepEnabled')]
        [bool]
        ${IsEnabled},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('AddConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${AddCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('ClearConditions')]
        [switch]
        ${ClearCondition},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [System.Object]
        ${StepOrder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [int]
        ${MoveToIndex},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionIfStatement},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionQueryWmi},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionVariable},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionOperatingSystem},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFile},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionFolder},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionRegistry},

        [Parameter(ParameterSetName='ById')]
        [Parameter(ParameterSetName='ByName')]
        [Parameter(ParameterSetName='ByValue')]
        [switch]
        ${RemoveConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware', Mandatory=$true)]
        [switch]
        ${SetConditionSoftware},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${MsiFilePath},

        [Parameter(ParameterSetName='ByIdSetConditionSoftware')]
        [Parameter(ParameterSetName='ByNameSetConditionSoftware')]
        [Parameter(ParameterSetName='ByValueSetConditionSoftware')]
        [bool]
        ${IsAnyVersion},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry', Mandatory=$true)]
        [switch]
        ${SetConditionRegistry},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${RootKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${RegistryKey},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [ValidateSet('Exists','NotExists','Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${RegistryOperator},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueName},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [System.Object]
        ${ValueType},

        [Parameter(ParameterSetName='ByIdSetConditionRegistry')]
        [Parameter(ParameterSetName='ByNameSetConditionRegistry')]
        [Parameter(ParameterSetName='ByValueSetConditionRegistry')]
        [string]
        ${RegistryValueData},

        [Parameter(ParameterSetName='ByIdSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFolder', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFolder', Mandatory=$true)]
        [switch]
        ${SetConditionFolder},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FolderPath},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [datetime]
        ${FolderTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFolder')]
        [Parameter(ParameterSetName='ByNameSetConditionFolder')]
        [Parameter(ParameterSetName='ByValueSetConditionFolder')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FolderDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionFile', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionFile', Mandatory=$true)]
        [switch]
        ${SetConditionFile},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FilePath},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${FileVersion},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [datetime]
        ${FileTimestamp},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${FileDateTimeOperator},

        [Parameter(ParameterSetName='ByIdSetConditionFile')]
        [Parameter(ParameterSetName='ByNameSetConditionFile')]
        [Parameter(ParameterSetName='ByValueSetConditionFile')]
        [ValidateSet('Equals','NotEquals','Greater','GreaterEqual','Less','LessEqual')]
        [System.Object]
        ${VersionOperator},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem', Mandatory=$true)]
        [switch]
        ${SetConditionOperatingSystem},

        [Parameter(ParameterSetName='ByIdSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByNameSetConditionOperatingSystem')]
        [Parameter(ParameterSetName='ByValueSetConditionOperatingSystem')]
        [Alias('SupportedPlatforms')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${SupportedPlatform},

        [Parameter(ParameterSetName='ByIdSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionVariable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionVariable', Mandatory=$true)]
        [switch]
        ${SetConditionVariable},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [System.Object]
        ${OperatorType},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Variable')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableName},

        [Parameter(ParameterSetName='ByIdSetConditionVariable')]
        [Parameter(ParameterSetName='ByNameSetConditionVariable')]
        [Parameter(ParameterSetName='ByValueSetConditionVariable')]
        [Alias('Value')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConditionVariableValue},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement', Mandatory=$true)]
        [switch]
        ${SetConditionIfStatement},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('Operator')]
        [System.Object]
        ${StatementType},

        [Parameter(ParameterSetName='ByIdSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByNameSetConditionIfStatement')]
        [Parameter(ParameterSetName='ByValueSetConditionIfStatement')]
        [Alias('SubCondition','SubConditions')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TaskSequence_ConditionOperand')]
        [System.Object[]]
        ${Condition},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi', Mandatory=$true)]
        [switch]
        ${SetConditionQueryWmi},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Namespace},

        [Parameter(ParameterSetName='ByIdSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByNameSetConditionQueryWmi')]
        [Parameter(ParameterSetName='ByValueSetConditionQueryWmi')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Query},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMTaskSequenceStepUpgradeOperatingSystem -Value Set-CMTSStepUpgradeOperatingSystem

function Set-CMUpdateGroupDeployment
{
    [CmdletBinding(DefaultParameterSetName='ByValueEnable', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByNameDisable')]
        [Parameter(ParameterSetName='ByIdDisable')]
        [Parameter(ParameterSetName='ByValueDisable')]
        [Parameter(ParameterSetName='ByDeploymentSummaryValueDisable')]
        [switch]
        ${Disable},

        [Parameter(ParameterSetName='ByNameEnable')]
        [Parameter(ParameterSetName='ByIdEnable')]
        [Parameter(ParameterSetName='ByValueEnable')]
        [Parameter(ParameterSetName='ByDeploymentSummaryValueEnable')]
        [switch]
        ${Enable},

        [Parameter(ParameterSetName='ByValueEnable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByValueDisable', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_UpdateGroupAssignment')]
        [System.Object]
        ${UpdateGroupDeployment},

        [Parameter(ParameterSetName='ByIdDisable', Mandatory=$true)]
        [Parameter(ParameterSetName='ByIdEnable', Mandatory=$true)]
        [Alias('Id')]
        [int]
        ${UpdateGroupDeploymentId},

        [Parameter(ParameterSetName='ByNameEnable')]
        [Parameter(ParameterSetName='ByNameDisable')]
        [Alias('Name','UpdateGroupDeploymentName')]
        [string]
        ${DeploymentName},

        [Parameter(ParameterSetName='ByDeploymentSummaryValueEnable', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByDeploymentSummaryValueDisable', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject[]#SMS_DeploymentSummary')]
        [System.Object]
        ${Deployment},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMUserDataAndProfileConfigurationItem
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_UserStateManagementSettings')]
        [System.Object]
        ${InputObject},

        [bool]
        ${ConfigureFolderRedirection},

        [Alias('ConfigureOffineFile')]
        [bool]
        ${ConfigureOfflineFile},

        [bool]
        ${ConfigureRoamingUserProfile},

        [System.Object]
        ${DeviceType},

        [Alias('FolderRedirectionUserConfigurationForDesktop')]
        [System.Object]
        ${Desktop},

        [Alias('FolderRedirectionUserConfigurationForStartMenu')]
        [System.Object]
        ${StartMenu},

        [Alias('FolderRedirectionUserConfigurationForDocuments','Documents')]
        [System.Object]
        ${Document},

        [Alias('FolderRedirectionUserConfigurationForMusic')]
        [System.Object]
        ${Music},

        [Alias('FolderRedirectionUserConfigurationForVideos','Videos')]
        [System.Object]
        ${Video},

        [Alias('FolderRedirectionUserConfigurationForFavorites','Favorites')]
        [System.Object]
        ${Favorite},

        [Alias('FolderRedirectionUserConfigurationForContacts','Contacts')]
        [System.Object]
        ${Contact},

        [Alias('FolderRedirectionUserConfigurationForDownloads','Downloads')]
        [System.Object]
        ${Download},

        [Alias('FolderRedirectionUserConfigurationForLinks','Links')]
        [System.Object]
        ${Link},

        [Alias('FolderRedirectionUserConfigurationForSearches','Searches')]
        [System.Object]
        ${Search},

        [Alias('FolderRedirectionUserConfigurationForSavedGames','SavedGames')]
        [System.Object]
        ${SavedGame},

        [Alias('FolderRedirectionUserConfigurationForApplicationData','FolderRedirectionUserConfigurationForAppDataRoaming')]
        [System.Object]
        ${AppDataRoaming},

        [Alias('FolderRedirectionUserConfigurationForPictures','Pictures')]
        [System.Object]
        ${Picture},

        [bool]
        ${UseSpecifiedLocation},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SpecifiedLocation},

        [bool]
        ${ManageAdvancedSetting},

        [bool]
        ${GrantExclusiveRight},

        [bool]
        ${MoveContent},

        [bool]
        ${LeaveFolderNewLocation},

        [bool]
        ${MoveCachedFolder},

        [bool]
        ${UseCommonAlert},

        [ValidateRange(0, 32767)]
        [int]
        ${ErrorDays},

        [ValidateRange(0, 32767)]
        [int]
        ${WarningDays},

        [bool]
        ${EnableOfflineFile},

        [System.Object]
        ${BackgroundSynchronization},

        [System.Object]
        ${FileSynchronization},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${OfflineFile},

        [bool]
        ${EnableSlowLink},

        [ValidateRange(0, 32767)]
        [int]
        ${SlowLink},

        [Alias('SynchronizationInterval')]
        [ValidateRange(0, 32767)]
        [int]
        ${SyncMins},

        [bool]
        ${DisableWorkOffline},

        [bool]
        ${DisableMakeOffline},

        [ValidateRange(0, 32767)]
        [int]
        ${LimitDisk},

        [bool]
        ${AllowAllDevice},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${ExcludeList},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${SynchronizationList},

        [bool]
        ${ManageSlowLink},

        [bool]
        ${DetectSlowLink},

        [ValidateRange(0, 32767)]
        [int]
        ${TimeOut},

        [ValidateRange(0, 32767)]
        [int]
        ${ConnectionTransferRate},

        [bool]
        ${SlowLinkUIEnabled},

        [Alias('WaitForNetworkInSeconds')]
        [ValidateRange(0, 32767)]
        [int]
        ${WaitForNetworkSec},

        [bool]
        ${AccessPolicy},

        [bool]
        ${OwnerCheckDisabled},

        [bool]
        ${AddAdminGroupToRupEnabled},

        [bool]
        ${AllowCrossForestUserPolicy},

        [bool]
        ${TempProfileLogonBlocked},

        [Alias('OnlyAllowLocalProfiles')]
        [bool]
        ${OnlyAllowLocalProfile},

        [bool]
        ${SynchronizationPolicy},

        [ValidateNotNullOrEmpty()]
        [ValidateSet('12:00 AM','1:00 PM','2:00 PM','3:00 PM','4:00 PM','5:00 PM','6:00 PM','7:00 PM','8:00 PM','9:00 PM','10:00 PM','11:00 PM','12:00 PM')]
        [string]
        ${SpecifyTime},

        [ValidateRange(0, 23)]
        [int]
        ${BackgroundUploadHour},

        [Alias('SpecifyTimeInterval')]
        [ValidateRange(0, 32767)]
        [int]
        ${SpecifyTimeMin},

        [bool]
        ${DeleteRoamingCacheEnabled},

        [ValidateRange(0, 32767)]
        [int]
        ${DeleteProfileOlderDays},

        [bool]
        ${ForceUnloadDisabled},

        [bool]
        ${ProfileUploadDisabled},

        [Alias('LocalizedDescription')]
        [ValidateLength(0, 512)]
        [string]
        ${Description},

        [Parameter(ValueFromPipeline=$true)]
        [ValidateNotNull()]
        [System.Object]
        ${Digest},

        [Alias('DesiredConfigurationDigestPath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DigestPath},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DigestXml},

        [Parameter(ParameterSetName='SetById', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 255)]
        [string]
        ${NewName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMVhd
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true)]
        [Alias('Id','PackageId')]
        [string]
        ${VhdPackageId},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_VhdPackage')]
        [System.Object]
        ${InputObject},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Alias('PackageSourcePath','Path')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${VhdFilePath},

        [string]
        ${Version},

        [string]
        ${Description},

        [string]
        ${TaskSequencePackageId},

        [Parameter(Mandatory=$true)]
        [Alias('DistributionPointServerNames')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${DistributionPointServerName},

        [timespan]
        ${Timeout},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMVpnProfileConfigurationItem
{
    [CmdletBinding(DefaultParameterSetName='SetByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_VpnConnectionSettings')]
        [System.Object]
        ${InputObject},

        [Alias('LocalizedDescription')]
        [ValidateLength(0, 512)]
        [string]
        ${Description},

        [Parameter(ValueFromPipeline=$true)]
        [ValidateNotNull()]
        [System.Object]
        ${Digest},

        [Alias('DesiredConfigurationDigestPath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DigestPath},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DigestXml},

        [Parameter(ParameterSetName='SetById', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 255)]
        [string]
        ${NewName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMWebApplicationDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [Alias('ContentLocation')]
        [string]
        ${Url},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [string]
        ${DeploymentTypeName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [System.Object]
        ${Application},

        [Parameter(ParameterSetName='ByDTValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeploymentType')]
        [System.Object]
        ${InputObject},

        [Alias('NewDeploymentTypeName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [switch]
        ${PassThru},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMWindowsAppxDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [ValidateSet('DoNothing','Download')]
        [System.Object]
        ${SlowNetworkDeploymentMode},

        [bool]
        ${TriggerVpn},

        [Alias('EnableContentLocationFallback','AllowClientsToUseFallbackSourceLocationForContent')]
        [bool]
        ${ContentFallback},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [string]
        ${DeploymentTypeName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [System.Object]
        ${Application},

        [Parameter(ParameterSetName='ByDTValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeploymentType')]
        [System.Object]
        ${InputObject},

        [Alias('NewDeploymentTypeName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ContentLocation},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [switch]
        ${PassThru},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMAppxDeploymentType -Value Set-CMWindowsAppxDeploymentType

function Set-CMWindowsEnrollmentProfile
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
        [Alias('ProfileName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Profile')]
        [PSTypeName('SMS_MDMBulkEnrollmentProfiles')]
        [System.Object]
        ${InputObject},

        [ValidateSet('Cloud','OnPremises')]
        [System.Object]
        ${Authority},

        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Alias('ProfileDescription')]
        [string]
        ${Description},

        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Alias('CertificateProfiles')]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_TrustedRootCertificateSettings')]
        [System.Object[]]
        ${CertificateProfile},

        [Alias('WifiProfiles')]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_WirelessProfileSettings')]
        [System.Object[]]
        ${WifiProfile},

        [Alias('EnrollmentProxyPoints')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse;RoleName=SMS Enrollment Web Site')]
        [System.Object[]]
        ${EnrollmentProxyPoint},

        [string]
        ${ProxyServerUrl},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMWindowsFirewallPolicy
{
    [CmdletBinding(DefaultParameterSetName='SetByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetById', Mandatory=$true, Position=0)]
        [Parameter(ParameterSetName='SetOrderById', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Parameter(ParameterSetName='SetOrderByName', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetOrderByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SetOrderById', Mandatory=$true)]
        [Parameter(ParameterSetName='SetOrderByName', Mandatory=$true)]
        [Parameter(ParameterSetName='SetOrderByValue', Mandatory=$true)]
        [Alias('Priority')]
        [ValidateSet('Increase','Decrease')]
        [System.Object]
        ${Order},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [Alias('LocalizedDescription')]
        [ValidateLength(0, 512)]
        [string]
        ${Description},

        [Parameter(ParameterSetName='SetById', ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetByName', ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SetByValue', ValueFromPipeline=$true)]
        [ValidateNotNull()]
        [System.Object]
        ${Digest},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [Alias('DesiredConfigurationDigestPath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DigestPath},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DigestXml},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 255)]
        [string]
        ${NewName},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [System.Object]
        ${DomainTurnOnFirewall},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [System.Object]
        ${PrivateTurnOnFirewall},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [System.Object]
        ${PublicTurnOnFirewall},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [System.Object]
        ${DomainBlockAllInboundTraffic},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [System.Object]
        ${PrivateBlockAllInboundTraffic},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [System.Object]
        ${PublicBlockAllInboundTraffic},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [Alias('DomainNotifications')]
        [System.Object]
        ${DomainNotification},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [Alias('PrivateNotifications')]
        [System.Object]
        ${PrivateNotification},

        [Parameter(ParameterSetName='SetById')]
        [Parameter(ParameterSetName='SetByName')]
        [Parameter(ParameterSetName='SetByValue')]
        [Alias('PublicNotifications')]
        [System.Object]
        ${PublicNotification},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMWindowsPhoneDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [string]
        ${DeploymentTypeName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [System.Object]
        ${Application},

        [Parameter(ParameterSetName='ByDTValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeploymentType')]
        [System.Object]
        ${InputObject},

        [Alias('NewDeploymentTypeName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ContentLocation},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [switch]
        ${PassThru},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMWindowsPhone8DeploymentType Set-CMXapDeploymentType -Value Set-CMWindowsPhoneDeploymentType Set-CMWindowsPhoneDeploymentType

function Set-CMWindowsPhoneStoreDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [Alias('ContentLocation')]
        [string]
        ${Url},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [string]
        ${DeploymentTypeName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [System.Object]
        ${Application},

        [Parameter(ParameterSetName='ByDTValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeploymentType')]
        [System.Object]
        ${InputObject},

        [Alias('NewDeploymentTypeName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [switch]
        ${PassThru},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMWindowsPhone8DeeplinkDeploymentType Set-CMWindowsPhone8StoreDeploymentType -Value Set-CMWindowsPhoneStoreDeploymentType Set-CMWindowsPhoneStoreDeploymentType

function Set-CMWindowsStoreDeploymentType
{
    [CmdletBinding(DefaultParameterSetName='ByAppName', ConfirmImpact='Medium')]
    param
    (
        [Alias('ContentLocation')]
        [string]
        ${Url},

        [System.Object[]]
        ${AddRequirement},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${ApplicationId},

        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='ByAppId', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppName', Mandatory=$true)]
        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [string]
        ${DeploymentTypeName},

        [Parameter(ParameterSetName='ByAppValue', Mandatory=$true)]
        [System.Object]
        ${Application},

        [Parameter(ParameterSetName='ByDTValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('DeploymentType')]
        [System.Object]
        ${InputObject},

        [Alias('NewDeploymentTypeName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${NewName},

        [Alias('RemoveRequirements')]
        [System.Object[]]
        ${RemoveRequirement},

        [Alias('RemoveLanguages')]
        [string[]]
        ${RemoveLanguage},

        [switch]
        ${PassThru},

        [Alias('AddLanguages','Languages','Language')]
        [string[]]
        ${AddLanguage},

        [Alias('AdministratorComment')]
        [string]
        ${Comment},

        [Alias('ForceForUnknownPublisher')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Set-CMWindowsDeeplinkDeploymentType -Value Set-CMWindowsStoreDeploymentType

function Set-CMWirelessProfile
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_WirelessProfileSettings')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('CI_ID','CIId')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='ByName', Mandatory=$true)]
        [string]
        ${Name},

        [string]
        ${Description},

        [System.Object]
        ${Severity},

        [switch]
        ${ClearSupportedPlatform},

        [Alias('AddSupportedPlatforms')]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${AddSupportedPlatform},

        [Alias('RemoveSupportedPlatforms')]
        [PSTypeName('IResultObject#SMS_SupportedPlatforms')]
        [System.Object[]]
        ${RemoveSupportedPlatform},

        [string]
        ${NetworkName},

        [string]
        ${Ssid},

        [bool]
        ${ConnectAutoNetworkInRange},

        [bool]
        ${LookOtherNetworkWhileConnected},

        [bool]
        ${ConnectEvenNotBroadcasting},

        [System.Object]
        ${AuthenticationMode},

        [bool]
        ${EnableSingleSignOn},

        [bool]
        ${SingleSignOnImmediatelyBefore},

        [ValidateRange(1, 120)]
        [int]
        ${SingleSignOnMaxDelaySec},

        [bool]
        ${SingleSignOnAdditionalDialogs},

        [bool]
        ${SingleSignOnVlan},

        [bool]
        ${EnablePmkCaching},

        [ValidateRange(5, 1440)]
        [int]
        ${PmkTimeToLiveMins},

        [ValidateRange(1, 255)]
        [int]
        ${PmkCacheMaxEntries},

        [bool]
        ${PreAuthentication},

        [ValidateRange(1, 16)]
        [int]
        ${PreAuthAttempts},

        [bool]
        ${EnableFipsCompliance},

        [bool]
        ${ConfigureProxy},

        [bool]
        ${AutoDetectProxy},

        [string]
        ${AutoScriptUrl},

        [string]
        ${ProxyAddress},

        [ValidateRange(1, 65535)]
        [int]
        ${ProxyPort},

        [string]
        ${BypassProxy},

        [System.Object]
        ${SecurityAuthentication},

        [System.Object]
        ${SecurityEncryption},

        [ValidateSet('AKA','AKAprime','FAST','LEAP','PEAP','SIM','TLS','TTLS')]
        [System.Object]
        ${EapType},

        [string]
        ${TrustedServerCertSubjectNames},

        [switch]
        ${RememberCredentials},

        [bool]
        ${RememberUserCredentials},

        [Alias('RootCertificates')]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy')]
        [System.Object[]]
        ${RootCertificate},

        [PSTypeName('IResultObject#SMS_ConfigurationPolicy')]
        [System.Object]
        ${ClientCertificate},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Set-CMWirelessProfileConfigurationItem
{
    [CmdletBinding(DefaultParameterSetName='SetByName', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SetByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_WirelessProfileSettings')]
        [System.Object]
        ${InputObject},

        [Alias('LocalizedDescription')]
        [ValidateLength(0, 512)]
        [string]
        ${Description},

        [Parameter(ValueFromPipeline=$true)]
        [ValidateNotNull()]
        [System.Object]
        ${Digest},

        [Alias('DesiredConfigurationDigestPath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DigestPath},

        [ValidateNotNullOrEmpty()]
        [string]
        ${DigestXml},

        [Parameter(ParameterSetName='SetById', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SetByName', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [ValidateNotNullOrEmpty()]
        [ValidateLength(1, 255)]
        [string]
        ${NewName},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Start-CMAntimalwarePolicyDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByAntimalwarePolicyValue_CollectionValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByAntimalwarePolicyName_CollectionId', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByAntimalwarePolicyName_CollectionName', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByAntimalwarePolicyName_CollectionValue', Mandatory=$true)]
        [Alias('PolicyName')]
        [string]
        ${AntimalwarePolicyName},

        [Parameter(ParameterSetName='SearchByAntimalwarePolicyId_CollectionId', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByAntimalwarePolicyId_CollectionName', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByAntimalwarePolicyId_CollectionValue', Mandatory=$true)]
        [Alias('PolicyId')]
        [string]
        ${AntimalwarePolicyId},

        [Parameter(ParameterSetName='SearchByAntimalwarePolicyValue_CollectionId', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SearchByAntimalwarePolicyValue_CollectionName', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SearchByAntimalwarePolicyValue_CollectionValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Policy')]
        [PSTypeName('IResultObject#SMS_AntimalwareSettings')]
        [System.Object]
        ${AntimalwarePolicy},

        [Parameter(ParameterSetName='SearchByAntimalwarePolicyName_CollectionId', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByAntimalwarePolicyId_CollectionId', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByAntimalwarePolicyValue_CollectionId', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='SearchByAntimalwarePolicyName_CollectionName', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByAntimalwarePolicyId_CollectionName', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByAntimalwarePolicyValue_CollectionName', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='SearchByAntimalwarePolicyName_CollectionValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SearchByAntimalwarePolicyId_CollectionValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SearchByAntimalwarePolicyValue_CollectionValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Collection;CollectionType=2')]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Start-CMApplicationDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [ValidateNotNullOrEmpty()]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${InputObject},

        [Alias('AppRequiresApproval')]
        [bool]
        ${ApprovalRequired},

        [Alias('AvailiableDate')]
        [datetime]
        ${AvailableDate},

        [Alias('AvailiableTime')]
        [datetime]
        ${AvailableTime},

        [datetime]
        ${AvailableDateTime},

        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [string]
        ${Comment},

        [datetime]
        ${DeadlineDate},

        [datetime]
        ${DeadlineTime},

        [datetime]
        ${DeadlineDateTime},

        [System.Object]
        ${DeployAction},

        [System.Object]
        ${DeployPurpose},

        [bool]
        ${EnableMomAlert},

        [ValidateRange(0, 99)]
        [int]
        ${FailParameterValue},

        [bool]
        ${OverrideServiceWindow},

        [bool]
        ${PersistOnWriteFilterDevice},

        [datetime]
        ${PostponeDate},

        [datetime]
        ${PostponeTime},

        [datetime]
        ${PostponeDateTime},

        [bool]
        ${PreDeploy},

        [Alias('RaiseMomAlertsOnFailure')]
        [bool]
        ${GenerateScomAlertOnFailure},

        [bool]
        ${RebootOutsideServiceWindow},

        [bool]
        ${SendWakeupPacket},

        [ValidateRange(0, 99)]
        [int]
        ${SuccessParameterValue},

        [System.Object]
        ${TimeBaseOn},

        [bool]
        ${UseMeteredNetwork},

        [System.Object]
        ${UserNotification},

        [switch]
        ${PassThru},

        [bool]
        ${UpdateSupersedence},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Start-CMApplicationDeploymentSimulation
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [System.Object]
        ${InputObject},

        [Parameter(Mandatory=$true)]
        [string]
        ${CollectionName},

        [Alias('DeployAction')]
        [System.Object]
        ${DeploymentAction},

        [bool]
        ${PreDeploy},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Start-CMBaselineDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationBaselineInfo')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true)]
        [string]
        ${CollectionName},

        [bool]
        ${EnableEnforcement},

        [bool]
        ${OverrideServiceWindow},

        [bool]
        ${GenerateAlert},

        [ValidateRange(0, 100)]
        [int]
        ${ParameterValue},

        [datetime]
        ${PostponeDate},

        [datetime]
        ${PostponeTime},

        [bool]
        ${MonitoredByScom},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Start-CMClientSettingDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByClientSettingName_CollectionValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByClientSettingName_CollectionId', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByClientSettingName_CollectionName', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByClientSettingName_CollectionValue', Mandatory=$true)]
        [string]
        ${ClientSettingName},

        [Parameter(ParameterSetName='SearchByClientSettingId_CollectionId', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByClientSettingId_CollectionName', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByClientSettingId_CollectionValue', Mandatory=$true)]
        [string]
        ${ClientSettingId},

        [Parameter(ParameterSetName='SearchByClientSettingValue_CollectionId', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SearchByClientSettingValue_CollectionName', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SearchByClientSettingValue_CollectionValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ClientSettings')]
        [System.Object]
        ${ClientSetting},

        [Parameter(ParameterSetName='SearchByClientSettingName_CollectionId', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByClientSettingId_CollectionId', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByClientSettingValue_CollectionId', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='SearchByClientSettingName_CollectionName', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByClientSettingId_CollectionName', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByClientSettingValue_CollectionName', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='SearchByClientSettingName_CollectionValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SearchByClientSettingId_CollectionValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='SearchByClientSettingValue_CollectionValue', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${Collection},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Start-CMCloudDistributionPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('AzureServiceId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AzureService')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Start-CMCloudManagementGateway
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('AzureServiceId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AzureService')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Start-CMConfigurationPolicyDeployment
{
    [CmdletBinding(DefaultParameterSetName='DeployFWPolicyByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='DeployUSMPolicyByNameMandatory', Mandatory=$true)]
        [string]
        ${UserDataAndProfileName},

        [Parameter(ParameterSetName='DeployUSMPolicyByIdMandatory', Mandatory=$true)]
        [string]
        ${UserDataAndProfileId},

        [Parameter(ParameterSetName='DeployUSMPolicyByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_UserStateManagementSettings')]
        [System.Object]
        ${UserDataAndProfile},

        [Parameter(ParameterSetName='DeployFWPolicyByNameMandatory', Mandatory=$true)]
        [string]
        ${FirewallPolicyName},

        [Parameter(ParameterSetName='DeployFWPolicyByIdMandatory', Mandatory=$true)]
        [string]
        ${FirewallPolicyId},

        [Parameter(ParameterSetName='DeployFWPolicyByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_FirewallSettings')]
        [System.Object]
        ${FirewallPolicy},

        [Parameter(ParameterSetName='DeployRCPolicyByNameMandatory', Mandatory=$true)]
        [string]
        ${RemoteConnectionProfileName},

        [Parameter(ParameterSetName='DeployRCPolicyByIdMandatory', Mandatory=$true)]
        [string]
        ${RemoteConnectionProfileId},

        [Parameter(ParameterSetName='DeployRCPolicyByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_ConfigurationPolicy;CategoryInstance_UniqueID=SettingsAndPolicy:SMS_RemoteConnectionSettings')]
        [System.Object]
        ${RemoteConnectionProfile},

        [Parameter(ParameterSetName='DeployUSMPolicyByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployUSMPolicyByNameMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployUSMPolicyByValueMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployFWPolicyByNameMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployFWPolicyByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployFWPolicyByValueMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployRCPolicyByIdMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployRCPolicyByNameMandatory', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployRCPolicyByValueMandatory', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='DeployUSMPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByValueMandatory')]
        [bool]
        ${EnableEnforcement},

        [Parameter(ParameterSetName='DeployUSMPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByValueMandatory')]
        [bool]
        ${OverrideServiceWindow},

        [Parameter(ParameterSetName='DeployUSMPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByValueMandatory')]
        [bool]
        ${GenerateAlert},

        [Parameter(ParameterSetName='DeployUSMPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByValueMandatory')]
        [ValidateRange(0, 100)]
        [int]
        ${ParameterValue},

        [Parameter(ParameterSetName='DeployUSMPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByValueMandatory')]
        [datetime]
        ${PostponeDate},

        [Parameter(ParameterSetName='DeployUSMPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByValueMandatory')]
        [datetime]
        ${PostponeTime},

        [Parameter(ParameterSetName='DeployUSMPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByValueMandatory')]
        [bool]
        ${MonitoredByScom},

        [Parameter(ParameterSetName='DeployUSMPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployUSMPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployFWPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployFWPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployFWPolicyByValueMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByIdMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByNameMandatory')]
        [Parameter(ParameterSetName='DeployRCPolicyByValueMandatory')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object]
        ${Schedule},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Start-CMContentDistribution
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory_Application', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Application','Package','BootImage','DeploymentPackage','SoftwareUpdatePackage','DriverPackage','ImagePackage','OperatingSystemInstaller','TaskSequence')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchByIdMandatory_Application', Mandatory=$true)]
        [string[]]
        ${ApplicationId},

        [Parameter(ParameterSetName='SearchByNameMandatory_Application', Mandatory=$true)]
        [string[]]
        ${ApplicationName},

        [Parameter(ParameterSetName='SearchByIdMandatory_BootImage', Mandatory=$true)]
        [Alias('BootImageIds')]
        [string[]]
        ${BootImageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_BootImage', Mandatory=$true)]
        [Alias('BootImageNames')]
        [string[]]
        ${BootImageName},

        [string[]]
        ${CollectionName},

        [Parameter(ParameterSetName='SearchByIdMandatory_DeploymentPackage', Mandatory=$true)]
        [Alias('DeploymentPackageIds')]
        [string[]]
        ${DeploymentPackageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_DeploymentPackage', Mandatory=$true)]
        [Alias('DeploymentPackageNames')]
        [string[]]
        ${DeploymentPackageName},

        [Parameter(ParameterSetName='SearchByIdMandatory_Application')]
        [Parameter(ParameterSetName='SearchByNameMandatory_Application')]
        [Parameter(ParameterSetName='SearchByValueMandatory_Application')]
        [Alias('DisableDetectAssociatedContentDependencies')]
        [switch]
        ${DisableContentDependencyDetection},

        [string[]]
        ${DistributionPointGroupName},

        [string[]]
        ${DistributionPointName},

        [Parameter(ParameterSetName='SearchByIdMandatory_DriverPackage', Mandatory=$true)]
        [Alias('DriverPackageIds')]
        [string[]]
        ${DriverPackageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_DriverPackage', Mandatory=$true)]
        [Alias('DriverPackageNames')]
        [string[]]
        ${DriverPackageName},

        [Parameter(ParameterSetName='SearchByValueMandatory_OperatingSystemImage', Mandatory=$true)]
        [PSTypeName('IResultObject#SMS_ImagePackage')]
        [System.Object]
        ${OperatingSystemImage},

        [Parameter(ParameterSetName='SearchByIdMandatory_OperatingSystemImage', Mandatory=$true)]
        [Alias('OperatingSystemImageIds')]
        [string[]]
        ${OperatingSystemImageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_OperatingSystemImage', Mandatory=$true)]
        [Alias('OperatingSystemImageNames')]
        [string[]]
        ${OperatingSystemImageName},

        [Parameter(ParameterSetName='SearchByIdMandatory_OperatingSystemInstaller', Mandatory=$true)]
        [Alias('OperatingSystemInstallerIds')]
        [string[]]
        ${OperatingSystemInstallerId},

        [Parameter(ParameterSetName='SearchByNameMandatory_OperatingSystemInstaller', Mandatory=$true)]
        [Alias('OperatingSystemImageInstallerNames')]
        [string[]]
        ${OperatingSystemInstallerName},

        [Parameter(ParameterSetName='SearchByIdMandatory_Package', Mandatory=$true)]
        [Alias('PackageIds')]
        [string[]]
        ${PackageId},

        [Parameter(ParameterSetName='SearchByNameMandatory_Package', Mandatory=$true)]
        [Alias('PackageNames')]
        [string[]]
        ${PackageName},

        [Parameter(ParameterSetName='SearchByIdMandatory_TaskSequence', Mandatory=$true)]
        [Alias('TaskSequenceIds')]
        [string[]]
        ${TaskSequenceId},

        [Parameter(ParameterSetName='SearchByNameMandatory_TaskSequence', Mandatory=$true)]
        [Alias('TaskSequenceNames')]
        [string[]]
        ${TaskSequenceName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Start-CMDistributionPointUpgrade
{
    [CmdletBinding(DefaultParameterSetName='UseImportCertificate', ConfirmImpact='Medium')]
    param
    (
        [bool]
        ${AllowFallbackForContent},

        [bool]
        ${AllowPreStaging},

        [bool]
        ${AllowRespondIncomingPxeRequest},

        [System.Object]
        ${ClientConnectionType},

        [System.Object]
        ${ClientCommunicationMode},

        [Alias('ComputersUsePxePassword')]
        [ValidateNotNullOrEmpty()]
        [securestring]
        ${PxePassword},

        [System.Object]
        ${ContentValidationPriority},

        [bool]
        ${EnableAnonymous},

        [bool]
        ${EnablePxeSupport},

        [bool]
        ${EnableUnknownComputerSupport},

        [bool]
        ${EnableNonWdsPxe},

        [bool]
        ${InitiateConnection},

        [Alias('InstallInternetServer')]
        [bool]
        ${InstallIis},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${MacAddressForRespondingPxeRequest},

        [string]
        ${PublicFqdn},

        [Alias('PxeServerResponseDelaySeconds')]
        [ValidateRange(0, 32)]
        [int]
        ${PxeServerResponseDelaySec},

        [System.Object]
        ${UserDeviceAffinity},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ST_RecurWeekly')]
        [System.Object]
        ${ValidateContentSchedule},

        [Parameter(ParameterSetName='UseSelfSignedCertificate', Mandatory=$true)]
        [datetime]
        ${CertificateExpirationTimeUtc},

        [Parameter(ParameterSetName='UseImportCertificate')]
        [ValidateNotNullOrEmpty()]
        [securestring]
        ${CertificatePassword},

        [Parameter(ParameterSetName='UseImportCertificate', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CertificatePath},

        [Parameter(Mandatory=$true)]
        [Alias('SiteCode')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DestinationSiteCode},

        [Parameter(ParameterSetName='UseImportCertificate')]
        [bool]
        ${ForceWhenDuplicateCertificate},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_Reserved')]
        [System.Object]
        ${InstallationAccount},

        [ValidateRange(50, 100000)]
        [int]
        ${MinFreeSpaceMB},

        [ValidateNotNullOrEmpty()]
        [string]
        ${PathForSavingMigratedPackage},

        [System.Object]
        ${PrimaryContentLibraryLocation},

        [System.Object]
        ${PrimaryPackageShareLocation},

        [System.Object]
        ${SecondaryContentLibraryLocation},

        [System.Object]
        ${SecondaryPackageShareLocation},

        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SharedDistributionPoint')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_SCI_SysResUse')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Start-CMObjectTracking
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Start-CMPackageDeployment
{
    [CmdletBinding(DefaultParameterSetName='DeployStandardProgramByPackageValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue', Mandatory=$true)]
        [switch]
        ${DeviceProgram},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue', Mandatory=$true)]
        [switch]
        ${StandardProgram},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName', Mandatory=$true)]
        [string]
        ${PackageName},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageId', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId', Mandatory=$true)]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Package')]
        [System.Object]
        ${Package},

        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Program')]
        [System.Object]
        ${Program},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue', Mandatory=$true)]
        [Alias('StandardProgramName','DeviceProgramName')]
        [string]
        ${ProgramName},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue', Mandatory=$true)]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue')]
        [string]
        ${Comment},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue')]
        [System.Object]
        ${DeployPurpose},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue')]
        [bool]
        ${SendWakeupPacket},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue')]
        [bool]
        ${UseMeteredNetwork},

        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue')]
        [datetime]
        ${DeploymentStartDay},

        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue')]
        [datetime]
        ${DeploymentStartTime},

        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue')]
        [datetime]
        ${DeploymentStartDateTime},

        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue')]
        [bool]
        ${UseUtc},

        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue')]
        [int]
        ${RecurValue},

        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue')]
        [System.Object]
        ${RecurUnit},

        [Parameter(ParameterSetName='DeployDeviceProgramByPackageName')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageId')]
        [Parameter(ParameterSetName='DeployDeviceProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployDeviceProgramByProgramValue')]
        [bool]
        ${Rerun},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [datetime]
        ${DeploymentAvailableDay},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [datetime]
        ${DeploymentAvailableTime},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [datetime]
        ${DeploymentAvailableDateTime},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [bool]
        ${UseUtcForAvailableSchedule},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [datetime]
        ${DeploymentExpireDay},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [datetime]
        ${DeploymentExpireTime},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [datetime]
        ${DeploymentExpireDateTime},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [bool]
        ${UseUtcForExpireSchedule},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${ScheduleEvent},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_ScheduleToken')]
        [System.Object[]]
        ${Schedule},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [System.Object]
        ${RerunBehavior},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [Alias('AllowUsersRunIndependently')]
        [bool]
        ${RunFromSoftwareCenter},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [bool]
        ${SoftwareInstallation},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [bool]
        ${SystemRestart},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [bool]
        ${PersistOnWriteFilterDevice},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [System.Object]
        ${FastNetworkOption},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [System.Object]
        ${SlowNetworkOption},

        [Parameter(ParameterSetName='DeployStandardProgramByPackageName')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageId')]
        [Parameter(ParameterSetName='DeployStandardProgramByPackageValue')]
        [Parameter(ParameterSetName='DeployStandardProgramByProgramValue')]
        [bool]
        ${AllowSharedContent},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Start-CMSoftwareUpdateDeployment
{
    [CmdletBinding(DefaultParameterSetName='DeploySoftwareUpdateByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='DeploySoftwareUpdateByName', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SoftwareUpdateName},

        [Parameter(ParameterSetName='DeploySoftwareUpdateById', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SoftwareUpdateId},

        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SoftwareUpdateGroupName},

        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SoftwareUpdateGroupId},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('SoftwareUpdate','SoftwareUpdateGroup')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName', Mandatory=$true)]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById', Mandatory=$true)]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue', Mandatory=$true)]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName', Mandatory=$true)]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeploymentName},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Description},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${DeploymentType},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [bool]
        ${SendWakeupPacket},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [System.Object]
        ${VerbosityLevel},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [System.Object]
        ${TimeBasedOn},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [datetime]
        ${DeploymentAvailableDay},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [datetime]
        ${DeploymentAvailableTime},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [Alias('DeploymentExpireDay')]
        [datetime]
        ${EnforcementDeadlineDay},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [Alias('DeploymentExpireTime')]
        [datetime]
        ${EnforcementDeadline},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [System.Object]
        ${UserNotification},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [bool]
        ${SoftwareInstallation},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [bool]
        ${AllowRestart},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [bool]
        ${RestartServer},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [bool]
        ${RestartWorkstation},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [bool]
        ${PersistOnWriteFilterDevice},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [bool]
        ${GenerateSuccessAlert},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [ValidateRange(0, 99)]
        [int]
        ${PercentSuccess},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [int]
        ${TimeValue},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [System.Object]
        ${TimeUnit},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [bool]
        ${DisableOperationsManagerAlert},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [bool]
        ${GenerateOperationsManagerAlert},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [System.Object]
        ${ProtectedType},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [System.Object]
        ${UnprotectedType},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [bool]
        ${UseBranchCache},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [bool]
        ${DownloadFromMicrosoftUpdate},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [bool]
        ${AllowUseMeteredNetwork},

        [Parameter(ParameterSetName='DeploySoftwareUpdateByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateById')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateByValue')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupByName')]
        [Parameter(ParameterSetName='DeploySoftwareUpdateGroupById')]
        [switch]
        ${AcceptEula},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Start-CMTaskSequenceDeployment
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_TaskSequencePackage')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='SearchPackageByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('PackageId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${TaskSequencePackageId},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionId},

        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${Collection},

        [string]
        ${Comment},

        [System.Object]
        ${DeployPurpose},

        [bool]
        ${SendWakeupPacket},

        [bool]
        ${UseMeteredNetwork},

        [Alias('MakeAvailableTo')]
        [System.Object]
        ${Availability},

        [datetime]
        ${DeploymentAvailableDay},

        [datetime]
        ${DeploymentAvailableTime},

        [datetime]
        ${DeploymentAvailableDateTime},

        [bool]
        ${UseUtcForAvailableSchedule},

        [datetime]
        ${DeploymentExpireDay},

        [datetime]
        ${DeploymentExpireTime},

        [datetime]
        ${DeploymentExpireDateTime},

        [bool]
        ${UseUtcForExpireSchedule},

        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${ScheduleEvent},

        [ValidateNotNullOrEmpty()]
        [System.Object[]]
        ${Schedule},

        [System.Object]
        ${RerunBehavior},

        [Alias('AllowUsersRunIndependently')]
        [bool]
        ${RunFromSoftwareCenter},

        [bool]
        ${ShowTaskSequenceProgress},

        [bool]
        ${SoftwareInstallation},

        [bool]
        ${SystemRestart},

        [bool]
        ${PersistOnWriteFilterDevice},

        [bool]
        ${InternetOption},

        [ValidateRange(0, 99)]
        [int]
        ${PercentSuccess},

        [datetime]
        ${AlertDay},

        [datetime]
        ${AlertTime},

        [datetime]
        ${AlertDateTime},

        [ValidateRange(0, 99)]
        [int]
        ${PercentFailure},

        [System.Object]
        ${DeploymentOption},

        [Alias('AllowUseRemoteDistributionPoint')]
        [bool]
        ${AllowSharedContent},

        [bool]
        ${AllowFallback},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Stop-CMCloudDistributionPoint
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('AzureServiceId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AzureService')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Stop-CMCloudManagementGateway
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('AzureServiceId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_AzureService')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Stop-CMMigrationSource
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Stop-CMObjectTracking
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Suspend-CMAlert
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Alert')]
        [PSTypeName('IResultObject#SMS_AlertBase')]
        [System.Object]
        ${InputObject},

        [string]
        ${Comment},

        [Parameter(Mandatory=$true)]
        [datetime]
        ${SkipUntil},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Suspend-CMApplication
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName','ApplicationName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Sync-CMAssetIntelligenceCatalog
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Sync-CMExchangeServer
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchBySiteCodeMandatory')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${SiteCode},

        [Parameter(ParameterSetName='SearchBySiteCodeMandatory', Mandatory=$true)]
        [string]
        ${Address},

        [switch]
        ${Force},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Sync-CMMigrationSource
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Sync-CMSoftwareUpdate
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [bool]
        ${FullSync},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Unblock-CMCertificate
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('SMSID')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('InputObject')]
        [PSTypeName('IResultObject#SMS_Certificate')]
        [System.Object]
        ${Certificate},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Unblock-CMDetectedMalware
{
    [CmdletBinding(DefaultParameterSetName='SearchByThreatValue', ConfirmImpact='High')]
    param
    (
        [Parameter(ParameterSetName='SearchByCollectionName', Mandatory=$true)]
        [string]
        ${CollectionName},

        [Parameter(ParameterSetName='SearchByThreatName', Mandatory=$true)]
        [string]
        ${ThreatName},

        [Parameter(ParameterSetName='SearchByCollectionId', Mandatory=$true)]
        [string]
        ${CollectionId},

        [Parameter(ParameterSetName='SearchByCollection', Mandatory=$true, ValueFromPipeline=$true)]
        [PSTypeName('IResultObject#SMS_Collection')]
        [System.Object]
        ${Collection},

        [Parameter(ParameterSetName='SearchByThreatId', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ThreatId},

        [Parameter(ParameterSetName='SearchByThreatValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('InputObject')]
        [ValidateNotNullOrEmpty()]
        [PSTypeName('IResultObject#SMS_TopThreatSummary')]
        [System.Object]
        ${Threat},

        [Parameter(ParameterSetName='SearchByThreatValue', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByThreatId', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByThreatName', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByCollectionValue', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByCollectionId', Mandatory=$true)]
        [Parameter(ParameterSetName='SearchByCollectionName', Mandatory=$true)]
        [System.Object]
        ${UnblockAction},

        [Parameter(ParameterSetName='SearchByThreatValue')]
        [Parameter(ParameterSetName='SearchByThreatId')]
        [Parameter(ParameterSetName='SearchByThreatName')]
        [Parameter(ParameterSetName='SearchByCollectionValue')]
        [Parameter(ParameterSetName='SearchByCollectionId')]
        [Parameter(ParameterSetName='SearchByCollectionName')]
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

#New-Alias -Name Unblock-CMThreat -Value Unblock-CMDetectedMalware

function Unblock-CMDevice
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceName},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('ResourceId')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${DeviceId},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [System.Object]
        ${InputObject},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Undo-CMSoftwareInventory
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true)]
        [Alias('SoftwareKey')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true)]
        [Alias('CommonName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('InputObject')]
        [PSTypeName('IResultObject#SMS_AISoftwareList')]
        [System.Object]
        ${SoftwareInventory},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Unlock-CMObject
{
    [CmdletBinding(ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ByValue', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [System.Object[]]
        ${InputObject},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Update-CMApplicationStatistic
{
    [CmdletBinding(DefaultParameterSetName='SearchByValueMandatory', ConfirmImpact='Low')]
    param
    (
        [Parameter(ParameterSetName='SearchByNameMandatory', Mandatory=$true, Position=0)]
        [Alias('LocalizedDisplayName','ApplicationName')]
        [string]
        ${Name},

        [Parameter(ParameterSetName='SearchByIdMandatory', Mandatory=$true, Position=0)]
        [Alias('CIId','CI_ID')]
        [int]
        ${Id},

        [Parameter(ParameterSetName='SearchByValueMandatory', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Alias('Application')]
        [System.Object]
        ${InputObject},

        [switch]
        ${PassThru},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Update-CMCertificate
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Parameter(ParameterSetName='ByValue', Mandatory=$true)]
        [string]
        ${Path},

        [Parameter(ParameterSetName='ById', Mandatory=$true)]
        [Alias('SmsId')]
        [string]
        ${Id},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ByCertificate', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('Certificate')]
        [PSTypeName('IResultObject#SMS_Certificate')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='ByCertificate', Mandatory=$true, ValueFromPipeline=$true)]
        [X509Certificate]
        ${X509Certificate},

        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Update-CMClientStatus
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [switch]
        ${Force},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}


function Update-CMDistributionPoint
{
    [CmdletBinding(DefaultParameterSetName='ByValue', ConfirmImpact='Medium')]
    param
    (
        [Parameter(ParameterSetName='UpdateByDeploymentTypeName', Mandatory=$true)]
        [string]
        ${ApplicationName},

        [Parameter(ParameterSetName='SearchByBootImageId', Mandatory=$true)]
        [string]
        ${BootImageId},

        [Parameter(ParameterSetName='SearchByBootImageName', Mandatory=$true)]
        [string]
        ${BootImageName},

        [Parameter(ParameterSetName='SearchByBootImageName')]
        [Parameter(ParameterSetName='SearchByBootImageId')]
        [Parameter(ParameterSetName='ByValue')]
        [Alias('Reload')]
        [switch]
        ${ReloadBootImage},

        [Parameter(ParameterSetName='UpdateByDeploymentTypeName', Mandatory=$true)]
        [string]
        ${DeploymentTypeName},

        [Parameter(ParameterSetName='SearchByDriverPackageId', Mandatory=$true)]
        [string]
        ${DriverPackageId},

        [Parameter(ParameterSetName='SearchByDriverPackageName', Mandatory=$true)]
        [string]
        ${DriverPackageName},

        [Parameter(ParameterSetName='ByValue', Mandatory=$true, ValueFromPipeline=$true)]
        [Alias('BootImage','DriverPackage','OperatingSystemImage','OperatingSystemInstaller','Package','SoftwareUpdateDeploymentPackage')]
        [PSTypeName('IResultObject#SMS_PackageBaseclass')]
        [System.Object]
        ${InputObject},

        [Parameter(ParameterSetName='UpdateByDeploymentTypeName')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ManifestPath},

        [Parameter(ParameterSetName='SearchByOSImageId', Mandatory=$true)]
        [string]
        ${OperatingSystemImageId},

        [Parameter(ParameterSetName='SearchByOSImageName', Mandatory=$true)]
        [string]
        ${OperatingSystemImageName},

        [Parameter(ParameterSetName='SearchByOSInstallerId', Mandatory=$true)]
        [string]
        ${OperatingSystemInstallerId},

        [Parameter(ParameterSetName='SearchByOSInstallerName', Mandatory=$true)]
        [string]
        ${OperatingSystemInstallerName},

        [Parameter(ParameterSetName='SearchByPackageId', Mandatory=$true)]
        [string]
        ${PackageId},

        [Parameter(ParameterSetName='SearchByPackageName', Mandatory=$true)]
        [string]
        ${PackageName},

        [Parameter(ParameterSetName='SearchBySoftwareUpdateDeploymentPackageId', Mandatory=$true)]
        [string]
        ${SoftwareUpdateDeploymentPackageId},

        [Parameter(ParameterSetName='SearchBySoftwareUpdateDeploymentPackageName', Mandatory=$true)]
        [string]
        ${SoftwareUpdateDeploymentPackageName},

        [switch]
        ${DisableWildcardHandling},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

function Add-CMUserCollectionExcludeMembershipRule
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ExcludeCollectionName},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

function Add-CMDeviceCollectionExcludeMembershipRule
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ExcludeCollectionName},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

function Get-CMDeviceCollectionDirectMembershipRule
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${RuleName},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

function Get-CMUserCollectionDirectMembershipRule
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${RuleName},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

function Get-CMDeviceCollectionExcludeMembershipRule
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ExcludeCollectionName},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

function Get-CMUserCollectionExcludeMembershipRule
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${ExcludeCollectionName},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

function Get-CMDeviceCollectionQueryMembershipRule
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${RuleName},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}

function Get-CMUserCollectionQueryMembershipRule
{
    [CmdletBinding(ConfirmImpact='Low')]
    param
    (
        [ValidateNotNullOrEmpty()]
        [string]
        ${CollectionName},

        [ValidateNotNullOrEmpty()]
        [string]
        ${RuleName},

        [switch]
        ${ForceWildcardHandling}
    )

    throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
}
